<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>安之</title>
  
  <subtitle>临渊羡鱼不如退而结网</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-09-30T10:42:50.804Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>MiK</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Maven</title>
    <link href="http://example.com/2022/09/30/Maven/Maven/"/>
    <id>http://example.com/2022/09/30/Maven/Maven/</id>
    <published>2022-09-30T08:59:50.892Z</published>
    <updated>2022-09-30T10:42:50.804Z</updated>
    
    <content type="html"><![CDATA[<h1 id="项目的组成部分"><a href="#项目的组成部分" class="headerlink" title="项目的组成部分"></a>项目的组成部分</h1><p>完成一个java项目，需要做哪些工作<br>1.分析项目要做什么，知道项目有哪些组成部分。<br>2.设计项目，通过哪些步骤，使用哪些技术。需要多少人， 多长的时间。<br>3.组建团队，招人， 购置设备，服务器， 软件， 笔记本。<br>4.开发人员写代码。 开发人员需要测试自己写代码。 重复多次的工作。<br>5.测试人员，测试项目功能是否符合要求。<br>  测试开发人员提交代码-如果测试有问题–需要开发人员修改–在提交代码给测试<br>  –测试人员在测试代码-如果还有问题-在交给开发人员-开发人员在提交-在测试<br>  直到-测试代码通过。</p><h1 id="传统开发项目的问题"><a href="#传统开发项目的问题" class="headerlink" title="传统开发项目的问题"></a>传统开发项目的问题</h1><ol><li>很多模块，模块之间有关系， 手工管理关系，比较繁琐。</li><li>需要很多第三方功能， 需要很多jar文件，需要手工从网络中获取各个jar</li><li>需要管理jar的版本， 你需要的是mysql.5.1.5.jar 拿你不能给给一个mysql.4.0.jar</li><li>管理jar文件之间的依赖， 你的项目要使用a.jar 需要使用b.jar里面的类。<br> 必须首先获取到b.jar才可以， 然后才能使用a.jar.</li></ol><p> a.jar需要b.jar这个关系叫做依赖， 或者你的项目中要使用mysql的驱动， 也可以叫做项目依赖mysql驱动。<br> a.class使用b.class， a依赖b类</p><h1 id="Maven的作用"><a href="#Maven的作用" class="headerlink" title="Maven的作用"></a>Maven的作用</h1><ol><li>maven可以管理jar文件</li><li>自动下载jar和他的文档，源代码</li><li>管理jar直接的依赖， a.jar需要b.jar ， maven会自动下载b.jar</li><li>管理你需要的jar版本</li><li>帮你编译程序，把java编译为class</li><li>帮你测试你的代码是否正确。</li><li>帮你打包文件，形成jar文件，或者war文件</li><li>帮你部署项目</li></ol><h1 id="Maven的项目构建"><a href="#Maven的项目构建" class="headerlink" title="Maven的项目构建"></a>Maven的项目构建</h1><ol><li>清理， 把之前项目编译的东西删除掉，我新的编译代码做准备。</li><li>编译， 把程序源代码编译为执行代码， java-class文件批量的，maven可以同时把成千上百的文件编译为class。javac 不一样，javac一次编译一个文件。</li><li>测试， maven可以执行测试程序代码，验证你的功能是否正确。批量的，maven同时执行多个测试代码，同时测试很多功能。</li><li>报告， 生成测试结果的文件， 测试通过没有。</li><li>打包， 把你的项目中所有的class文件，配置文件等所有资源放到一个压缩文件中。这个压缩文件就是项目的结果文件， 通常java程序，压缩文件是jar扩展名的。对于web应用，压缩文件扩展名是.war</li><li>安装， 把5中生成的文件jar，war安装到本机仓库</li><li>部署， 把程序安装好可以执行。</li></ol><h1 id="Maven的核心概念"><a href="#Maven的核心概念" class="headerlink" title="Maven的核心概念"></a>Maven的核心概念</h1><ol><li><p>POM ： 一个文件 名称是pom.xml ,  pom翻译过来叫做项目对象模型。 maven把一个项目当做一个模型使用。控制maven构建项目的过程，管理jar依赖。</p></li><li><p>约定的目录结构 ： maven项目的目录和文件的位置都是规定的。</p></li><li><p>坐标 ： 是一个唯一的字符串，用来表示资源的。</p></li><li><p>依赖管理 ： 管理你的项目可以使用jar文件</p></li><li><p>仓库管理（了解） ：你的资源存放的位置</p></li><li><p>生命周期 (了解) ： maven工具构建项目的过程，就是生命周期。</p></li><li><p>插件和目标（了解）：执行maven构建的时候用的工具是插件</p></li><li><p>继承</p></li><li><p>聚合</p></li></ol><h1 id="Maven的安装"><a href="#Maven的安装" class="headerlink" title="Maven的安装"></a>Maven的安装</h1><ol><li>从官网下载maven的安装包</li></ol><p><img src="https://raw.githubusercontent.com/Minkes/BlogImage/master/image-20220930180432955.png" alt="image-20220930180432955"></p><ol start="2"><li><p>解压安装包,安装路径不能是中文</p></li><li><p>配置环境变量 </p><p>在系统的环境变量中指定一个M2_HOME的名称,他的目录为Maven的安装目录 <strong>例如:</strong><code>E:\apache-maven-3.8.6</code>, 再把M2_HOME加入到Path之中,在所有路径之前加入<code>%M2_HOME%\bin</code></p></li><li><p>验证 在cmd中输入 <code>mvn -v</code>  出现如下内容，maven安装，配置正确。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Apache Maven 3.8.6 (84538c9988a25aec085021c365c560670ad80f63)</span><br><span class="line">Maven home: E:\apache-maven-3.8.6</span><br><span class="line">Java version: 1.8.0_201, vendor: Oracle Corporation, runtime: E:\Java\jdk1.8.0_201\jre</span><br><span class="line">Default locale: zh_CN, platform encoding: GBK</span><br><span class="line">OS name: <span class="string">&quot;windows 10&quot;</span>, version: <span class="string">&quot;10.0&quot;</span>, <span class="built_in">arch</span>: <span class="string">&quot;amd64&quot;</span>, family: <span class="string">&quot;windows&quot;</span></span><br></pre></td></tr></table></figure><p><strong>注意:需要先配置JDK</strong></p><h1 id="Maven-详解"><a href="#Maven-详解" class="headerlink" title="Maven 详解"></a>Maven 详解</h1></li></ol><h2 id="Maven的约定目录"><a href="#Maven的约定目录" class="headerlink" title="Maven的约定目录"></a>Maven的约定目录</h2><p>每一个maven项目在磁盘中都是一个文件夹（项目-Hello）<br>Hello&#x2F;<br>—&#x2F;src<br>——&#x2F;main           #放你主程序java代码和配置文件<br>———-&#x2F;java       #你的程序包和包中的java文件<br>———-&#x2F;resources  #你的java程序中要使用的配置文件</p><p>——&#x2F;test  #放测试程序代码和文件的（可以没有）<br>———-&#x2F;java       #测试程序包和包中的java文件<br>———-&#x2F;resources  #测试java程序中要使用的配置文件</p><p>—&#x2F;pom.xml  #maven的核心文件（maven项目必须有）</p><h2 id="mvn-complie"><a href="#mvn-complie" class="headerlink" title="mvn complie"></a>mvn complie</h2><blockquote><p>  mvn compile 编译src&#x2F;main目录下的所有java文件的。</p></blockquote><ol><li><p>为什么要下载<br>maven工具执行的操作需要很多插件（java类–jar文件）完成的</p></li><li><p>下载什么东西了<br>jar文件–叫做插件–插件是完成某些功能</p></li><li><p>下载的东西存放到哪里了。<br>默认仓库（本机仓库）：<br>C:\Users\（登录操作系统的用户名）Administrator.m2\repository</p></li></ol><pre><code>Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-parameter-documenter-2.0.9.pom</code></pre><p><a href="https://repo.maven.apache.org/">https://repo.maven.apache.org</a> ：中央仓库的地址</p><p>执行mvn compile， 结果是在项目的根目录下生成target目录（结果目录），<br>maven编译的java程序，最后的class文件都放在target目录中</p><p>设置本机存放资源的目录位置(设置本机仓库)：</p><ol><li><p>修改maven的配置文件， maven安装目录&#x2F;conf&#x2F;settings.xml<br>先备份 settings.xml</p></li><li><p>修改 <localRepository>  指定你的目录（不要使用中文目录）</p></li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">E</span>:\apache-maven-<span class="number">3</span>.<span class="number">8</span>.<span class="number">6</span>\repository</span><br></pre></td></tr></table></figure><h2 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h2><ol><li><p>仓库是什么： 仓库是存放东西的， 存放maven使用的jar 和 我们项目使用的jar</p><blockquote><p>  maven使用的插件（各种jar）</p><p>  我项目使用的jar(第三方的工具)</p></blockquote></li><li><p>仓库的分类</p><blockquote><p>  本地仓库， 就是你的个人计算机上的文件夹，存放各种jar</p><p>  远程仓库， 在互联网上的，使用网络才能使用的仓库</p><ol><li>中央仓库，最权威的， 所有的开发人员都共享使用的一个集中的仓库，<br><a href="https://repo.maven.apache.org/">https://repo.maven.apache.org</a> ：中央仓库的地址</li><li>中央仓库的镜像：就是中央仓库的备份， 在各大洲，重要的城市都是镜像。</li><li>私服，在公司内部，在局域网中使用的， 不是对外使用的。</li></ol></blockquote></li></ol><p>  3）仓库的使用，maven仓库的使用不需要人为参与。<br>     开发人员需要使用mysql驱动—&gt;maven首先查本地仓库—&gt;私服—&gt;镜像—&gt;中央仓库</p><h2 id="POM"><a href="#POM" class="headerlink" title="POM"></a>POM</h2><ol><li><p>坐标：唯一值， 在互联网中唯一标识一个项目的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>公司域名的倒写<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>自定义项目名称<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>自定版本号<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  <a href="https://mvnrepository.com/">https://mvnrepository.com/</a> 搜索使用的中央仓库， 使用groupId 或者 artifactId作为搜索条件</p></li><li><p>packaging： 打包后压缩文件的扩展名，默认是jar ，web应用是war packaging 可以不写， 默认是jar</p></li><li><p>依赖: dependencies 和dependency ，相当于是 java代码中import</p><p>你的项目中要使用的各种资源说明， 比我的项目要使用mysql驱动</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--依赖  java代码中 import --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>properties：设置属性</p></li><li><p>build ： maven在进行项目的构建时， 配置信息，例如指定编译java代码使用的jdk的版本等</p></li></ol><h2 id="生命周期、命令、插件"><a href="#生命周期、命令、插件" class="headerlink" title="生命周期、命令、插件"></a>生命周期、命令、插件</h2><p>maven的生命周期：就是maven构建项目的过程，清理，编译，测试，报告，打包，安装，部署<br>maven的命令：maven独立使用，通过命令，完成maven的生命周期的执行。<br>maven可以使用命令，完成项目的清理，编译，测试等等</p><p>maven的插件： maven命令执行时，真正完成功能的是插件，插件就是一些jar文件， 一些类。</p><ol><li>单元测试（测试方法）：用的是junit， junit是一个专门测试的框架（工具）。<br>junit测试的内容： 测试的是类中的方法， 每一个方法都是独立测试的。方法是测试的基本单位（单元）。</li></ol><blockquote><p>  maven借助单元测试，批量的测试你类中的大量方法是否符合预期的。</p></blockquote><ol start="2"><li><p>使用步骤</p><ol><li><p>加入依赖，在pom.xml加入单元测试依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 单元测试 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>在maven项目中的src&#x2F;test&#x2F;java目录下，创建测试程序。<br>推荐的创建类和方法的提示：</p><ul><li>测试类的名称 是Test + 你要测试的类名</li><li>测试的方法名称 是：Test + 方法名称</li></ul></li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAdd</span><span class="params">()</span>&#123;</span><br><span class="line">    测试HelloMaven的add方法是否正确</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//其中testAdd叫做测试方法，它的定义规则</span></span><br><span class="line"><span class="comment">//1.方法是public的，必须的</span></span><br><span class="line"><span class="comment">//2.方法没有返回值， 必须的</span></span><br><span class="line"><span class="comment">//3.方法名称是自定义的，推荐是Test + 方法名称</span></span><br><span class="line"><span class="comment">//4.在方法的上面加入 @Test</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>mvn compile</p><p>编译main&#x2F;java&#x2F;目录下的java 为class文件， 同时把class拷贝到 target&#x2F;classes目录下面</p><p>把main&#x2F;resources目录下的所有文件 都拷贝到target&#x2F;classes目录下</p></li></ol><p>​    </p><h1 id="idea设置Maven"><a href="#idea设置Maven" class="headerlink" title="idea设置Maven"></a>idea设置Maven</h1><blockquote><p>  idea中有内置的Maven,但是我们一般不适用内置的Maven,因为内置的Maven在设置和修改的时候不方便,我们需要自己下载Maven并在idea中配置</p></blockquote><ol><li>file–settings–Build</li></ol><p><img src="https://raw.githubusercontent.com/Minkes/BlogImage/master/image-20220930183125806.png" alt="image-20220930183125806"></p><ol start="2"><li>file–other settings–Settings for New Project</li></ol><p><img src="https://raw.githubusercontent.com/Minkes/BlogImage/master/image-20220930183201659.png" alt="image-20220930183201659"></p><p><strong>使用Maven模板创建项目</strong></p><ol><li>maven-archetype-quickstart : 普通的java项目</li><li>maven-archetype-webapp : web工程</li></ol><h1 id="Maven的依赖范围-scope"><a href="#Maven的依赖范围-scope" class="headerlink" title="Maven的依赖范围(scope)"></a>Maven的依赖范围(scope)</h1><p>scope的值有 compile, test, provided ,默认是compile<br>scope:表示依赖使用的范围，也就是在maven构建项目的那些阶段中起作用。<br>maven构建项目  编译， 测试 ，打包， 安装 ，部署 过程（阶段）</p><p><strong>junit的依赖范围是 test</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>a<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>b<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意:</strong></p><p>在写项目的中的用到的所有依赖（jar ） ，必须在本地仓库中有。没有必须通过maven下载， 包括provided的都必须下载。</p><p>你在servlet需要继承HttpServlet( provided) , 你使用的HttpServlet是maven仓库中的。</p><p>当你的写好的程序， 放到 tomat服务器中运行时， 此时你的程序中不包含servlet的jar<br>因为tomcat提供了 servlet的.jar</p><h1 id="Maven的常用操作"><a href="#Maven的常用操作" class="headerlink" title="Maven的常用操作"></a>Maven的常用操作</h1><ol><li>maven的属性设置<br><properties> 设置maven的常用属性</li><li>maven的全局变量<br>自定义的属性<ol><li>在<properties> 通过自定义标签声明变量（标签名就是变量名）</li><li>在pom.xml文件中的其它位置，使用 ${标签名} 使用变量的值</li></ol></li></ol><p>自定义全局变量一般是定义 依赖的版本号， 当你的项目中要使用多个相同的版本号，<br>先使用全局变量定义， 在使用${变量名}</p><ol start="3"><li>资源插件</li></ol> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span><span class="comment">&lt;!--所在的目录--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">includes</span>&gt;</span><span class="comment">&lt;!--包括目录下的.properties,.xml 文件都会扫描到--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">&lt;!—filtering 选项 false 不启用过滤器， *.property 已经起到过滤的作用了 --&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  作用： mybatis课程中会用到这个作用</p><blockquote><p>  默认没有使用resources的时候， maven执行编译代码时， 会把src&#x2F;main&#x2F;resource目录中的文件拷贝到target&#x2F;classes目录中。</p></blockquote>]]></content>
    
    
    <summary type="html">Maven 仓库管理详解</summary>
    
    
    
    <category term="Java 学习" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Maven" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/Maven/"/>
    
    
    <category term="Java 学习" scheme="http://example.com/tags/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Maven" scheme="http://example.com/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>jQuery</title>
    <link href="http://example.com/2022/09/28/JQuery/jQuery/"/>
    <id>http://example.com/2022/09/28/JQuery/jQuery/</id>
    <published>2022-09-28T13:37:06.950Z</published>
    <updated>2022-09-29T08:42:31.997Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>   jQuery是js库,相当于Java的工具类,库是存放东西的,jQuery是存放Js代码的地方,放的是js代码写的function。</p></blockquote><h1 id="dom对象和jQuery对象"><a href="#dom对象和jQuery对象" class="headerlink" title="dom对象和jQuery对象"></a>dom对象和jQuery对象</h1><p><strong>dom 对象</strong></p><p>使用javascript的语法创建的对象叫做dom对象， 也就是js对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;txt1&quot;</span>);  obj是dom对象，也叫做js对象</span><br><span class="line">obj.<span class="property">value</span>;</span><br></pre></td></tr></table></figure><p><strong>jQuery 对象</strong></p><p>使用jquery语法表示对象叫做jquery对象， 注意：jquery表示的对象都是数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">例如  <span class="keyword">var</span> jobj =  $(<span class="string">&quot;#txt1&quot;</span>)obj就是使用jquery语法表示的对象。也就是jquery对象。 它是一个数组。</span><br><span class="line">现在数组中就一个值。</span><br></pre></td></tr></table></figure><p>dom对象可以和jquery对象相互的转换。<br>dom对象可以转为jquery ， 语法： $(dom对象)<br>jquery对象也可以转为dom对象， 语法： 从数组中获取第一个对象， 第一个对象就是dom对象， 使用[0]或者get{0).</p><p>为什么要进行dom和jquery的转换：目的是要使用对象的方法，或者方法。<br>当你的dom对象时，可以使用dom对象的属性或者方法， 如果你要想使用jquery提供的函数，必须是jquery对象才可以</p><h1 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h1><h2 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#dom对象的id值&quot;</span>)</span><br></pre></td></tr></table></figure><p> 通过dom对象的id定位dom对象的。 通过id找对象， id在当前页面中是唯一值。</p><h2 id="class选择器"><a href="#class选择器" class="headerlink" title="class选择器"></a>class选择器</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;.class样式名)</span></span><br></pre></td></tr></table></figure><p>class表示css中的样式， 使用样式的名称定位dom对象的。</p><h2 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;标签名称&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="表单选择器"><a href="#表单选择器" class="headerlink" title="表单选择器"></a>表单选择器</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用&lt;input&gt;标签的type属性值，定位dom对象的方式。</span><br><span class="line">语法： $(<span class="string">&quot;:type属性值&quot;</span>)</span><br><span class="line">例如： $(<span class="string">&quot;:text&quot;</span>) ,选择的是所有的单行文本框，</span><br><span class="line">  $(<span class="string">&quot;:button&quot;</span>) ,选择的是所有的按钮。</span><br></pre></td></tr></table></figure><h1 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h1><blockquote><p>  在定位了dom对象后，根据一些条件筛选dom对象。过滤器有是一个字符串，用来筛选dom对象的。过滤器不能单独使用， 必须和选择器一起使用。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>）$(<span class="string">&quot;选择器:first&quot;</span>) : 第一个dom对象</span><br><span class="line"><span class="number">2</span>）$(<span class="string">&quot;选择器:last&quot;</span>): 数组中的最后一个dom对象</span><br><span class="line"><span class="number">3</span>）$(<span class="string">&quot;选择器:eq(数组的下标)&quot;</span>) ：获取指定下标的dom对象</span><br><span class="line"><span class="number">4</span>）$(<span class="string">&quot;选择器:lt(下标)&quot;</span>) ： 获取小于下标的所有dom对象</span><br><span class="line"><span class="number">5</span>）$(<span class="string">&quot;选择器:gt(下标)&quot;</span>) ： 获取大于下标的所有dom对象</span><br></pre></td></tr></table></figure><p><strong>表单属性过滤器</strong></p><p>根据表单中dom对象的状态情况，定位dom对象的。</p><p>启用状态:<strong>enabled</strong><br>不可用状态:<strong>disabled</strong><br>选择状态:<strong>checked</strong> 例如radio， checkbox </p><h1 id="each语法"><a href="#each语法" class="headerlink" title="each语法"></a>each语法</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125; <span class="comment">//数组</span></span><br><span class="line"><span class="keyword">var</span> json = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;lisi&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">20</span> &#125; </span><br><span class="line"><span class="keyword">var</span> obj = $(<span class="string">&quot;:text&quot;</span>);</span><br><span class="line">语法： $.<span class="title function_">each</span>( 循环的内容， 处理函数 ) ：表示使用jquery的each，循环数组，每个数组成员，都会执行后面的“处理函数”一次。</span><br><span class="line"><span class="attr">$</span>: 相当于是java的一个类名</span><br><span class="line"><span class="attr">each</span>:就是类中的静态方法。</span><br><span class="line">静态方法调用，可以使用 类名.方法名称 </span><br><span class="line"></span><br><span class="line">处理函数:<span class="keyword">function</span>(<span class="params">index, emelent</span>) :</span><br><span class="line">    index, element都是自定义的形参， 名称自定义。</span><br><span class="line">    index：循环的索引</span><br><span class="line">element：数组中的成员</span><br><span class="line">js循环数组：</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.<span class="property">length</span>;i++)&#123;</span><br><span class="line">     <span class="keyword">var</span> item = arr[i]; <span class="comment">//数组成员</span></span><br><span class="line">     <span class="comment">//操作数组成员</span></span><br><span class="line">     <span class="title function_">shuchu</span>( i , item);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">shuchu</span>(<span class="params">index, emlemnt</span>)&#123;</span><br><span class="line">    输出index ，element</span><br><span class="line">&#125;</span><br><span class="line">jquery对象.<span class="title function_">each</span>( <span class="keyword">function</span>(<span class="params">index,element</span>) &#123;&#125; )</span><br></pre></td></tr></table></figure><h1 id="jQuery为dom绑定事件"><a href="#jQuery为dom绑定事件" class="headerlink" title="jQuery为dom绑定事件"></a>jQuery为dom绑定事件</h1><blockquote><p>  $(选择器).事件名称( 事件的处理函数)</p></blockquote><p>$(选择器)：定位dom对象， dom对象可以有多个， 这些dom对象都绑定事件了<br>事件名称：就是js中事件去掉on的部分， 例如 js中的单击事件 onclick(),<br>        jquery中的事件名称，就是click，都是小写的。<br>事件的处理函数：就是一个function ，当事件发生时，执行这个函数的内容。</p><p>例如给id是btn的按钮绑定单击事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#btn&quot;</span>).<span class="title function_">click</span>(<span class="title function_">funtion</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;btn按钮单击了&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>on 事件绑定</strong></p><blockquote><p>   $(选择器).on( 事件名称 , 事件的处理函数)</p></blockquote><p>事件名称： 就是js事件中去掉on的部分， 例如js中onclick ,这里就是click<br>事件的处理函数： function 定义。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span></span><br><span class="line">$(&quot;#btn&quot;).on(&quot;click&quot;, function() &#123; 处理按钮单击 &#125; )</span><br></pre></td></tr></table></figure><h1 id="jQuery-ajax"><a href="#jQuery-ajax" class="headerlink" title="jQuery-ajax"></a>jQuery-ajax</h1><blockquote><p>  jQuery中的ajax请求其实是封装了XMLHttpRequest的操作,简化了请求的处理</p></blockquote><ol><li>$.ajax() : jquery中实现ajax的核心函数。</li><li>$.post() : 使用post方式做ajax请求。</li><li>$.get() : 使用get方式发送ajax请求。</li></ol><p>**$.post()和$.get() 他们在内部都是调用的 $.ajax() **</p><p>语法: $.ajax(  {名称:值， 名称1:值1….. } )</p><p>参数说明:</p><ol><li>async:是一个boolean类型的值， 默认是true ，表示异步请求的。可以不写async这个配置项<br>        xmlHttp.open(get,url,true),第三个参数一样的意思。</li><li>contentType: 一个字符串，表示从浏览器发送服务器的参数的类型。 可以不写。<br>                例如你想表示请求的参数是json格式的， 可以写application&#x2F;json</li><li>data: 可以是字符串，数组，json，表示请求的参数和参数值。 常用的是json格式的数据</li><li>dataType: 表示期望从服务器端返回的数据格式，可选的有： xml ， html ，text ，json<br>      当我们使用$.ajax()发送请求时， 会把dataType的值发送给服务器， 那我们的servlet能够<br>        读取到dataType的值，就知道你的浏览器需要的是 json或者xml的数据，那么服务器就可以<br>        返回你需要的数据格式。</li><li>error: 一个function ，表示当请求发生错误时，执行的函数。<br>    error:function() {   发生错误时执行  }  </li><li>sucess:一个function , 请求成功了，从服务器端返回了数据，会执行success指定函数<br>      之前使用XMLHttpRequest对象， 当<code>readyState==4&amp;&amp;status==200</code>的时候。</li><li>url:请求的地址</li><li>type:请求方式，get或者post， 不用区分大小写。 默认是get方式。</li></ol><p>  <strong>主要使用的是 url , data ,dataType, success .</strong></p>]]></content>
    
    
    <summary type="html">jQuery 是 js原生库 用于封装一些js操作</summary>
    
    
    
    <category term="Java 学习" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="jQuery" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/jQuery/"/>
    
    
    <category term="Java 学习" scheme="http://example.com/tags/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="jQuery" scheme="http://example.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>18. AJAX 详解</title>
    <link href="http://example.com/2022/09/25/JavaEE/18.%20AJAX%20%E8%AF%A6%E8%A7%A3/"/>
    <id>http://example.com/2022/09/25/JavaEE/18.%20AJAX%20%E8%AF%A6%E8%A7%A3/</id>
    <published>2022-09-25T02:22:18.858Z</published>
    <updated>2022-09-28T13:58:03.047Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-引言-传统请求的缺点"><a href="#1-引言-传统请求的缺点" class="headerlink" title="1. 引言 - 传统请求的缺点"></a>1. 引言 - 传统请求的缺点</h1><ul><li>传统的请求都有哪些？<ul><li>直接在浏览器地址栏上输入URL。</li><li>点击超链接</li><li>提交form表单</li><li>使用JS代码发送请求<ul><li>window.open(url)</li><li>document.location.href &#x3D; url</li><li>window.location.href &#x3D; url</li><li>….</li></ul></li></ul></li><li>传统请求存在的问题<ul><li>页面全部刷新导致了用户的体验较差。</li><li>传统的请求导致用户的体验有空白期。（用户的体验是不连贯的）</li></ul></li></ul><h1 id="2-AJAX-概述"><a href="#2-AJAX-概述" class="headerlink" title="2. AJAX 概述"></a>2. AJAX 概述</h1><ul><li>AJAX不能称为一种技术，它是多种技术的综合产物。</li><li>AJAX可以让浏览器发送一种特殊的请求，这种请求可以是：异步的。</li><li>什么是异步，什么是同步？<ul><li>假设有t1和t2线程，t1和t2线程并发，就是异步。</li><li>假设有t1和t2线程，t2在执行的时候，必须等待t1线程执行到某个位置之后t2才能执行，那么t2在等t1，显然他们是排队的，排队的就是同步。</li><li>AJAX是可以发送异步请求的。也就是说，在同一个浏览器页面当中，可以发送多个ajax请求，这些ajax请求之间不需要等待，是并发的。</li></ul></li><li>AJAX代码属于WEB前端的JS代码。和后端的java没有关系，后端也可以是php语言，也可以是C语言。</li><li>AJAX 应用程序可能使用 XML 来传输数据，但将数据作为纯文本或 JSON 文本传输也同样常见。</li><li>AJAX可以更新网页的部分，而不需要重新加载整个页面。（页面局部刷新）</li><li>AJAX可以做到在同一个网页中同时启动多个请求，类似于在同一个网页中启动“多线程”，一个“线程”一个“请求”。</li></ul><h1 id="3-XMLHttpRequest"><a href="#3-XMLHttpRequest" class="headerlink" title="3. XMLHttpRequest"></a>3. XMLHttpRequest</h1><ul><li><p>XMLHttpRequest对象是AJAX的核心对象，发送请求以及接收服务器数据的返回，全靠它了。</p></li><li><p>XMLHttpRequest对象，现代浏览器都是支持的，都内置了该对象。直接用即可。</p></li><li><p>创建XMLHttpRequest对象</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br></pre></td></tr></table></figure></li><li><p>XMLHttpRequest对象的方法</p></li></ul><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">abort()</td><td align="left">取消当前请求</td></tr><tr><td align="left">getAllResponseHeaders()</td><td align="left">返回头部信息</td></tr><tr><td align="left">getResponseHeader()</td><td align="left">返回特定的头部信息</td></tr><tr><td align="left">open(<em>method</em>, <em>url</em>, <em>async</em>, <em>user</em>, <em>psw</em>)</td><td align="left">规定请求method：请求类型 GET 或 POST url：文件位置 async：true（异步）或 false（同步）user：可选的用户名称 psw：可选的密码</td></tr><tr><td align="left">send()</td><td align="left">将请求发送到服务器，用于 GET 请求</td></tr><tr><td align="left">send(<em>string</em>)</td><td align="left">将请求发送到服务器，用于 POST 请求</td></tr><tr><td align="left">setRequestHeader()</td><td align="left">向要发送的报头添加标签&#x2F;值对</td></tr></tbody></table><ul><li>XMLHttpRequest对象的属性</li></ul><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">onreadystatechange</td><td align="left">定义当 readyState 属性发生变化时被调用的函数</td></tr><tr><td align="left">readyState</td><td align="left">保存 XMLHttpRequest 的状态。0：请求未初始化     1：服务器连接已建立     2：请求已收到    3：正在处理请求    4：请求已完成且响应已就绪</td></tr><tr><td align="left">responseText</td><td align="left">以字符串返回响应数据</td></tr><tr><td align="left">responseXML</td><td align="left">以 XML 数据返回响应数据</td></tr><tr><td align="left">status</td><td align="left">返回请求的状态号200: “OK”403: “Forbidden”404: “Not Found”</td></tr><tr><td align="left">statusText</td><td align="left">返回状态文本（比如 “OK” 或 “Not Found”）</td></tr></tbody></table><h1 id="4-AJAX-GET请求"><a href="#4-AJAX-GET请求" class="headerlink" title="4. AJAX - GET请求"></a>4. AJAX - GET请求</h1><ul><li><p>前端代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>AJAX 请求<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>发送AJAX请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;mySpan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 1. 创建 AJAX 核心对象</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 2. 注册回调函数</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">status</span> == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 通过XMLHttpRequest对象的responseText属性获取响应的数据</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 并且不管服务器响应的是什么,都以字符串的形式返回 (不管是json \ xml \ html \ text ... 都是字符串)</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;mySpan&quot;</span>).<span class="property">innerHTML</span> = <span class="variable language_">this</span>.<span class="property">responseText</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 3. 开启通道</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;http://localhost:8080/ajaxServlet&quot;</span>, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 4. 发送请求</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="title function_">send</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>后端代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wlm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;AjaxServlet&quot;, urlPatterns = &quot;/ajaxServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AjaxServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        out.println(<span class="string">&quot;Hello World! -- from AjaxServlet&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>AJAX - GET请求如何提交数据呢?</strong></p></li><li><p>get请求提交数据是在“请求行”上提交，格式是：url?name&#x3D;value&amp;name&#x3D;value&amp;name&#x3D;value….</p></li><li><p>其实这个get请求提交数据的格式是HTTP协议中规定的，遵循协议即可。</p></li></ul><h1 id="5-AJAX-GET请求缓存问题-低版本IE-现已不存在了"><a href="#5-AJAX-GET请求缓存问题-低版本IE-现已不存在了" class="headerlink" title="5. AJAX - GET请求缓存问题(低版本IE 现已不存在了)"></a>5. AJAX - GET请求缓存问题(低版本IE 现已不存在了)</h1><ul><li>对于低版本的IE浏览器来说，AJAX的get请求可能会走缓存。存在缓存问题。对于现代的浏览器来说，大部分浏览器都已经不存在AJAX get缓存问题了。</li><li>什么是AJAX GET请求缓存问题呢？<ul><li>在HTTP协议中是这样规定get请求的：get请求会被缓存起来。</li><li>发送AJAX GET请求时，在同一个浏览器上，前后发送的AJAX请求路径一样的话，对于低版本的IE来说，第二次的AJAX GET请求会走缓存，不走服务器。</li></ul></li><li>POST请求在HTTP协议中规定的是：POST请求不会被浏览器缓存。</li><li>GET请求缓存的优缺点：<ul><li>优点：直接从浏览器缓存中获取资源，不需要从服务器上重新加载资源，速度较快，用户体验好。</li><li>缺点：无法实时获取最新的服务器资源。</li></ul></li><li>浏览器什么时候会走缓存？<ul><li>第一：是一个GET请求</li><li>第二：请求路径已经被浏览器缓存过了。第二次发送请求的时候，这个路径没有变化，会走浏览器缓存。</li></ul></li><li>如果是低版本的IE浏览器，怎么解决AJAX GET请求的缓存问题呢？<ul><li>可以在请求路径url后面添加一个时间戳，这个时间戳是随时变化的。所以每一次发送的请求路径都是不一样的，这样就不会走浏览器的缓存问题了。</li><li>可以采用时间戳：”url?t&#x3D;” + new Date().getTime()</li><li>或者可以通过随机数：”url?t&#x3D;” + Math.random()</li><li>也可以随机数+时间戳….</li></ul></li></ul><h1 id="6-AJAX-POST请求"><a href="#6-AJAX-POST请求" class="headerlink" title="6. AJAX - POST请求"></a>6. AJAX - POST请求</h1><p><strong>AJAX POST请求和GET请求的代码区别在哪里？就是前端代码有区别。后端代码没有区别。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 4. 发送AJAX POST请求</span></span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>) <span class="comment">// 设置请求头的内容类型。模拟form表单提交数据。</span></span><br><span class="line"><span class="comment">// 获取表单中的数据</span></span><br><span class="line"><span class="keyword">var</span> username = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;username&quot;</span>).<span class="property">value</span>;</span><br><span class="line"><span class="keyword">var</span> password = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;password&quot;</span>).<span class="property">value</span>;</span><br><span class="line"><span class="comment">// send函数中的参数就是发送的数据，这个数据在“请求体”当中发送。</span></span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="string">&quot;username=&quot;</span>+username+<span class="string">&quot;&amp;password=&quot;</span>+password)</span><br></pre></td></tr></table></figure><h1 id="7-基于JSON的数据交换"><a href="#7-基于JSON的数据交换" class="headerlink" title="7. 基于JSON的数据交换"></a>7. 基于JSON的数据交换</h1><p><strong>在WEB前端中，如何将一个json格式的字符串转换成json对象?</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jsonStr = <span class="string">&quot;&#123;\&quot;username\&quot; : \&quot;zhangsan\&quot;, \&quot;password\&quot; : \&quot;1233344\&quot;&#125;&quot;</span></span><br><span class="line"><span class="keyword">var</span> jsonObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(jsonStr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(jsonObj.<span class="property">username</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(jsonObj.<span class="property">password</span>)</span><br></pre></td></tr></table></figure><p><strong>在后端拼接JSON格式的字符串，响应给前端的浏览器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">json.append(<span class="string">&quot;[&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">    <span class="comment">// 获取每个学生的信息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">age</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">addr</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;addr&quot;</span>);</span><br><span class="line">    <span class="comment">// 拼接json格式的字符串</span></span><br><span class="line">    <span class="comment">// &#123;&quot;name&quot;:&quot;   王五    &quot;,&quot;age&quot;:    20      ,&quot;addr&quot;:&quot;      北京大兴区     &quot;&#125;,</span></span><br><span class="line">    json.append(<span class="string">&quot;&#123;\&quot;name\&quot;:\&quot;&quot;</span>);</span><br><span class="line">    json.append(name);</span><br><span class="line">    json.append(<span class="string">&quot;\&quot;,\&quot;age\&quot;:&quot;</span>);</span><br><span class="line">    json.append(age);</span><br><span class="line">    json.append(<span class="string">&quot;,\&quot;addr\&quot;:\&quot;&quot;</span>);</span><br><span class="line">    json.append(addr);</span><br><span class="line">    json.append(<span class="string">&quot;\&quot;&#125;,&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">jsonStr = json.substring(<span class="number">0</span>, json.length() - <span class="number">1</span>) + <span class="string">&quot;]&quot;</span>;</span><br></pre></td></tr></table></figure><p><strong>拼接JSON格式的字符串太痛苦，可以使用阿里巴巴的fastjson组件，它可以将java对象转换成json格式的字符串</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Student&gt; studentList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">    <span class="comment">// 取出数据</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">addr</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;addr&quot;</span>);</span><br><span class="line">    <span class="comment">// 将以上数据封装成Student对象</span></span><br><span class="line">    <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(name, age, addr);</span><br><span class="line">    <span class="comment">// 将Student对象放到List集合</span></span><br><span class="line">    studentList.add(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将List集合转换成json字符串</span></span><br><span class="line">jsonStr = JSON.toJSONString(studentList);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意在使用fastjson的时候,需要引入fastjson的jar包</span></span><br></pre></td></tr></table></figure><h1 id="8-基于XML的数据交换"><a href="#8-基于XML的数据交换" class="headerlink" title="8. 基于XML的数据交换"></a>8. 基于XML的数据交换</h1><p><strong>注意：如果服务器端响应XML的话，响应的内容类型需要写成：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setContentType(<span class="string">&quot;text/xml;charset=UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure><p>xml和JSON都是常用的数据交换格式</p><ul><li>XML体积大，解析麻烦。较少用。</li><li>JSON体积小，解析简单，较常用。</li></ul><p>基于XML的数据交换，<strong>前端代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>使用XML完成数据交换<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 1.创建XMLHTTPRequest对象</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 2.注册回调函数</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">readyState</span> == <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 服务器端响应了一个XML字符串，这里怎么接收呢？</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 使用XMLHTTPRequest对象的responseXML属性，接收返回之后，可以自动封装成document对象（文档对象）</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">var</span> xmlDoc = <span class="variable language_">this</span>.<span class="property">responseXML</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">//console.log(xmlDoc)</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 获取所有的&lt;student&gt;元素，返回了多个对象，应该是数组。</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">var</span> students = xmlDoc.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;student&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">//console.log(students[0].nodeName)</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">var</span> html = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; students.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="keyword">var</span> student = students[i]</span></span><br><span class="line"><span class="language-javascript">                            <span class="comment">// 获取&lt;student&gt;元素下的所有子元素</span></span></span><br><span class="line"><span class="language-javascript">                            html += <span class="string">&quot;&lt;tr&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">                            html += <span class="string">&quot;&lt;td&gt;&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;&lt;/td&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">                            <span class="keyword">var</span> nameOrAge = student.<span class="property">childNodes</span></span></span><br><span class="line"><span class="language-javascript">                            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; nameOrAge.<span class="property">length</span>; j++) &#123;</span></span><br><span class="line"><span class="language-javascript">                                <span class="keyword">var</span> node = nameOrAge[j]</span></span><br><span class="line"><span class="language-javascript">                                <span class="keyword">if</span> (node.<span class="property">nodeName</span> == <span class="string">&quot;name&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                                    <span class="comment">//console.log(&quot;name = &quot; + node.textContent)</span></span></span><br><span class="line"><span class="language-javascript">                                    html += <span class="string">&quot;&lt;td&gt;&quot;</span>+node.<span class="property">textContent</span>+<span class="string">&quot;&lt;/td&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">                                &#125;</span></span><br><span class="line"><span class="language-javascript">                                <span class="keyword">if</span> (node.<span class="property">nodeName</span> == <span class="string">&quot;age&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                                    <span class="comment">//console.log(&quot;age = &quot; + node.textContent)</span></span></span><br><span class="line"><span class="language-javascript">                                    html += <span class="string">&quot;&lt;td&gt;&quot;</span>+node.<span class="property">textContent</span>+<span class="string">&quot;&lt;/td&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">                                &#125;</span></span><br><span class="line"><span class="language-javascript">                            &#125;</span></span><br><span class="line"><span class="language-javascript">                            html += <span class="string">&quot;&lt;/tr&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;stutbody&quot;</span>).<span class="property">innerHTML</span> = html</span></span><br><span class="line"><span class="language-javascript">                    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">status</span>)</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 3.开启通道</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;/ajax/ajaxrequest6?t=&quot;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>(), <span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 4.发送请求</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="title function_">send</span>()</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>显示学生列表<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;500px&quot;</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">id</span>=<span class="string">&quot;stutbody&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;tr&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;1&lt;/td&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;zhangsan&lt;/td&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;20&lt;/td&gt;</span></span><br><span class="line"><span class="comment">    &lt;/tr&gt;</span></span><br><span class="line"><span class="comment">    &lt;tr&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;2&lt;/td&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;lisi&lt;/td&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;22&lt;/td&gt;</span></span><br><span class="line"><span class="comment">    &lt;/tr&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>后端代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.ajax.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: 代码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: AjaxRequest6Servlet</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 服务器端返回XML字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: bjpowernode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2022-05-15 11:48</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/ajaxrequest6&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AjaxRequest6Servlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 注意：响应的内容类型是XML。</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/xml;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        &lt;students&gt;</span></span><br><span class="line"><span class="comment">            &lt;student&gt;</span></span><br><span class="line"><span class="comment">                &lt;name&gt;zhangsan&lt;/name&gt;</span></span><br><span class="line"><span class="comment">                &lt;age&gt;20&lt;/age&gt;</span></span><br><span class="line"><span class="comment">            &lt;/student&gt;</span></span><br><span class="line"><span class="comment">            &lt;student&gt;</span></span><br><span class="line"><span class="comment">                &lt;name&gt;lisi&lt;/name&gt;</span></span><br><span class="line"><span class="comment">                &lt;age&gt;22&lt;/age&gt;</span></span><br><span class="line"><span class="comment">            &lt;/student&gt;</span></span><br><span class="line"><span class="comment">        &lt;/students&gt;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">xml</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;students&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;student&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;name&gt;zhangsan&lt;/name&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;age&gt;20&lt;/age&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;/student&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;student&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;name&gt;lisi&lt;/name&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;age&gt;22&lt;/age&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;/student&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;/students&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        out.print(xml);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="9-AJAX-乱码问题解决"><a href="#9-AJAX-乱码问题解决" class="headerlink" title="9. AJAX 乱码问题解决"></a>9. AJAX 乱码问题解决</h1><ul><li><p>对于<strong>tomcat10</strong>来说，关于字符集，我们程序员不需要干涉，不会出现乱码。</p></li><li><p>对于<strong>tomcat9</strong>来说呢？</p><ul><li><p>响应中文的时候，会出现乱码，怎么解决？</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>发送ajax post请求的时候，发送给服务器的数据，服务器接收之后乱码，怎么解决？</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="10-AJAX的异步请求和同步请求"><a href="#10-AJAX的异步请求和同步请求" class="headerlink" title="10. AJAX的异步请求和同步请求"></a>10. AJAX的异步请求和同步请求</h1><ul><li><p>什么是异步？什么是同步？</p><ul><li>ajax请求1和ajax请求2，同时并发，谁也不用等谁，这就是异步。（a不等b，b也不等a）</li><li>如果ajax请求1在发送的时候需要等待ajax请求2结束之后才能发送，那么这就是同步。（a等待b，或者b等待a，只要发生等待，就是同步。）</li></ul></li><li><p>异步和同步在代码上如何实现？</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设这个是ajax请求1</span></span><br><span class="line"><span class="comment">// 如果第三个参数是false：这个就表示“ajax请求1”不支持异步，也就是说ajax请求1发送之后，会影响其他ajax请求的发送，只有当我这个请求结束之后，你们其他的ajax请求才能发送。</span></span><br><span class="line"><span class="comment">// false表示，不支持异步。我这个请求发了之后，你们其他的请求都要靠边站。都等着。你们别动呢，等我结束了你们再说。</span></span><br><span class="line">xhr1.<span class="title function_">open</span>(<span class="string">&quot;请求方式&quot;</span>, <span class="string">&quot;URL&quot;</span>, <span class="literal">false</span>)</span><br><span class="line">xhr1.<span class="title function_">send</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设这个是ajax请求2</span></span><br><span class="line"><span class="comment">// 如果第三个参数是true：这个就表示“ajax请求2”支持异步请求，也就是说ajax请求2发送之后，不影响其他ajax请求的发送。</span></span><br><span class="line">xhr2.<span class="title function_">open</span>(<span class="string">&quot;请求方式&quot;</span>, <span class="string">&quot;URL&quot;</span>, <span class="literal">true</span>) </span><br><span class="line">xhr2.<span class="title function_">send</span>()</span><br></pre></td></tr></table></figure></li><li><p>什么情况下用同步？（大部分情况下我们都是使用ajax异步方式，同步很少用。）</p><ul><li>举一个例子<ul><li>用户注册<ul><li>用户名需要发送ajax请求进行校验</li><li>邮箱地址也需要发送ajax请求校验</li><li>其他的也可能需要发送ajax请求。。。</li><li>并且最终注册按钮的时候，也是发送ajax请求进行注册。</li><li>那么显然，注册的Ajax请求和校验的ajax请求不能异步，必须等待所有的校验ajax请求结束之后，注册的ajax请求才能发。</li></ul></li></ul></li></ul></li></ul><h1 id="11-AJAX代码封装-jQuery"><a href="#11-AJAX代码封装-jQuery" class="headerlink" title="11. AJAX代码封装(jQuery)"></a>11. AJAX代码封装(jQuery)</h1><p><strong>手动开发jQuery，源代码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">jQuery</span>(<span class="params">selector</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> selector == <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (selector.<span class="title function_">charAt</span>(<span class="number">0</span>) == <span class="string">&quot;#&quot;</span>) &#123;</span><br><span class="line">            domObj = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(selector.<span class="title function_">substring</span>(<span class="number">1</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">jQuery</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> selector == <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">onload</span> = selector</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">html</span> = <span class="keyword">function</span>(<span class="params">htmlStr</span>)&#123;</span><br><span class="line">        domObj.<span class="property">innerHTML</span> = htmlStr</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">click</span> = <span class="keyword">function</span>(<span class="params">fun</span>)&#123;</span><br><span class="line">        domObj.<span class="property">onclick</span> = fun</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">focus</span> = <span class="keyword">function</span> (<span class="params">fun</span>)&#123;</span><br><span class="line">        domObj.<span class="property">onfocus</span> = fun</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">blur</span> = <span class="keyword">function</span>(<span class="params">fun</span>) &#123;</span><br><span class="line">        domObj.<span class="property">onblur</span> = fun</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">change</span> = <span class="keyword">function</span> (<span class="params">fun</span>)&#123;</span><br><span class="line">        domObj.<span class="property">onchange</span> = fun</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">val</span> = <span class="keyword">function</span>(<span class="params">v</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (v == <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> domObj.<span class="property">value</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            domObj.<span class="property">value</span> = v</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态的方法，发送ajax请求</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分析：使用ajax函数发送ajax请求的时候，需要程序员给我们传过来什么？</span></span><br><span class="line"><span class="comment">     *      请求的方式(type)：GET/POST</span></span><br><span class="line"><span class="comment">     *      请求的URL(url)：url</span></span><br><span class="line"><span class="comment">     *      请求时提交的数据(data)：data</span></span><br><span class="line"><span class="comment">     *      请求时发送异步请求还是同步请求(async)：true表示异步，false表示同步。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    jQuery.<span class="property">ajax</span> = <span class="keyword">function</span>(<span class="params">jsonArgs</span>)&#123;</span><br><span class="line">        <span class="comment">// 1.</span></span><br><span class="line">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">        <span class="comment">// 2.</span></span><br><span class="line">        xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">readyState</span> == <span class="number">4</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">                    <span class="comment">// 我们这个工具类在封装的时候，先不考虑那么多，假设服务器返回的都是json格式的字符串。</span></span><br><span class="line">                    <span class="keyword">var</span> jsonObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">this</span>.<span class="property">responseText</span>)</span><br><span class="line">                    <span class="comment">// 调用函数</span></span><br><span class="line">                    jsonArgs.<span class="title function_">success</span>(jsonObj)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (jsonArgs.<span class="property">type</span>.<span class="title function_">toUpperCase</span>() == <span class="string">&quot;POST&quot;</span>) &#123;</span><br><span class="line">            <span class="comment">// 3.</span></span><br><span class="line">            xhr.<span class="title function_">open</span>(<span class="string">&quot;POST&quot;</span>, jsonArgs.<span class="property">url</span>, jsonArgs.<span class="property">async</span>)</span><br><span class="line">            <span class="comment">// 4.</span></span><br><span class="line">            xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>)</span><br><span class="line">            xhr.<span class="title function_">send</span>(jsonArgs.<span class="property">data</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (jsonArgs.<span class="property">type</span>.<span class="title function_">toUpperCase</span>() == <span class="string">&quot;GET&quot;</span>) &#123;</span><br><span class="line">            xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, jsonArgs.<span class="property">url</span> + <span class="string">&quot;?&quot;</span> + jsonArgs.<span class="property">data</span>, jsonArgs.<span class="property">async</span>)</span><br><span class="line">            xhr.<span class="title function_">send</span>()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$ = jQuery</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里有个细节，执行这个目的是为了让静态方法ajax生效。</span></span><br><span class="line"><span class="keyword">new</span> <span class="title function_">jQuery</span>()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>如何使用?</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/ajax/js/jQuery-1.0.0.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&quot;#btn1&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                type : <span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                url : <span class="string">&quot;/ajax/ajaxrequest11&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                data : <span class="string">&quot;username=&quot;</span> + $(<span class="string">&quot;#username&quot;</span>).<span class="title function_">val</span>(),</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">async</span> : <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">                success : <span class="keyword">function</span>(<span class="params">json</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    $(<span class="string">&quot;#div1&quot;</span>).<span class="title function_">html</span>(json.<span class="property">uname</span>)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="12-AJAX-跨域问题"><a href="#12-AJAX-跨域问题" class="headerlink" title="12. AJAX 跨域问题"></a>12. AJAX 跨域问题</h1><h3 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h3><ul><li>跨域是指从一个域名的网页去请求另一个域名的资源。比如从百度(<a href="https://baidu.com)页面去请求京东(https//www.jd.com)%E7%9A%84%E8%B5%84%E6%BA%90%E3%80%82">https://baidu.com)页面去请求京东(https://www.jd.com)的资源。</a></li><li>通过超链接或者form表单提交或者window.location.href的方式进行跨域是不存在问题的（<strong>大家可以编写程序测试一下</strong>）。但在一个域名的网页中的一段js代码发送ajax请求去访问另一个域名中的资源，由于同源策略的存在导致无法跨域访问，那么ajax就存在这种跨域问题。</li><li>同源策略是指一段脚本只能读取来自同一来源的窗口和文档的属性，同源就是协议、域名和端口都相同。</li><li>同源策略有什么用？如果你刚刚在网银输入账号密码，查看了自己还有1万块钱，紧接着访问一些不规矩的网站，这个网站可以访问刚刚的网银站点，并且获取账号密码，那后果可想而知。所以，从安全的角度来讲，同源策略是有利于保护网站信息的。</li><li>有一些情况下，我们是需要使用ajax进行跨域访问的。比如某公司的A页面(a.bjpowernode.com)有可能需要获取B页面(b.bjpowernode.com)。</li></ul><h3 id="同源还是不同源"><a href="#同源还是不同源" class="headerlink" title="同源还是不同源"></a>同源还是不同源</h3><ul><li><p>区分同源和不同源的三要素</p></li><li><ul><li>协议<ul><li>域名</li><li>端口</li></ul></li></ul></li><li><p>协议一致，域名一致，端口号一致，三个要素都一致，才是同源，其它一律都是不同源</p></li></ul><table><thead><tr><th><strong>URL1</strong></th><th><strong>URL2</strong></th><th><strong>是否同源</strong></th><th>描述</th></tr></thead><tbody><tr><td><a href="http://localhost:8080/a/index.html">http://localhost:8080/a/index.html</a></td><td><a href="http://localhost:8080/a/first">http://localhost:8080/a/first</a></td><td>同源</td><td>协议 域名 端口一致</td></tr><tr><td><a href="http://localhost:8080/a/index.html">http://localhost:8080/a/index.html</a></td><td><a href="http://localhost:8080/b/first">http://localhost:8080/b/first</a></td><td>同源</td><td>协议 域名 端口一致</td></tr><tr><td><a href="http://www.myweb.com:8080/a.js">http://www.myweb.com:8080/a.js</a></td><td><a href="https://www.myweb.com:8080/b.js">https://www.myweb.com:8080/b.js</a></td><td>不同源</td><td>协议不同</td></tr><tr><td><a href="http://www.myweb.com:8080/a.js">http://www.myweb.com:8080/a.js</a></td><td><a href="http://www.myweb.com:8081/b.js">http://www.myweb.com:8081/b.js</a></td><td>不同源</td><td>端口不同</td></tr><tr><td><a href="http://www.myweb.com/a.js">http://www.myweb.com/a.js</a></td><td><a href="http://www.myweb2.com/b.js">http://www.myweb2.com/b.js</a></td><td>不同源</td><td>域名不同</td></tr><tr><td><a href="http://www.myweb.com/a.js">http://www.myweb.com/a.js</a></td><td><a href="http://crm.myweb.com/b.js">http://crm.myweb.com/b.js</a></td><td>不同源</td><td>子域名不同</td></tr></tbody></table><h3 id="复现AJAX跨域问题"><a href="#复现AJAX跨域问题" class="headerlink" title="复现AJAX跨域问题"></a>复现AJAX跨域问题</h3><h3 id="AJAX跨域解决方案"><a href="#AJAX跨域解决方案" class="headerlink" title="AJAX跨域解决方案"></a>AJAX跨域解决方案</h3><h4 id="方案1：设置响应头"><a href="#方案1：设置响应头" class="headerlink" title="方案1：设置响应头"></a>方案1：设置响应头</h4><ul><li><p>核心原理：跨域访问的资源允许你跨域访问。</p></li><li><p>实现：</p><ul><li>&#96;&#96;&#96;java<br>  response.setHeader(“Access-Control-Allow-Origin”, “<a href="http://localhost:8080&quot;">http://localhost:8080&quot;</a>); &#x2F;&#x2F; 允许某个<br>  response.setHeader(“Access-Control-Allow-Origin”, “*”); &#x2F;&#x2F; 允许所有  <figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 方案<span class="number">2</span>：jsonp</span><br><span class="line"></span><br><span class="line">- jsonp：json <span class="keyword">with</span> padding（带填充的json【学完之后再理解这个什么意思！！！】）</span><br><span class="line">- jsonp不是一个真正的ajax请求。只不过可以完成ajax的局部刷新效果。可以说jsonp是一种类ajax请求的机制。</span><br><span class="line">- jsonp不是ajax请求，但是可以完成局部刷新的效果，并且可以解决跨域问题。</span><br><span class="line">- 注意：jsonp解决跨域的时候，只支持GET请求。不支持post请求。</span><br><span class="line"></span><br><span class="line">#### 方案<span class="number">3</span>：jQuery封装的jsonp</span><br><span class="line"></span><br><span class="line">- 牛人们写的jQuery库，已经对jsonp进行了封装。大家可以直接拿来用。</span><br><span class="line"></span><br><span class="line">- 用之前需要引入jQuery库的js文件。（这里的jQuery库咱们就不再封装了，咱们直接用jQuery写好的jsonp方式。）</span><br><span class="line"></span><br><span class="line">- jQuery中的jsonp其实就是我们方案<span class="number">2</span>的高度封装，底层原理完全相同。</span><br><span class="line"></span><br><span class="line">- 核心代码</span><br><span class="line"></span><br><span class="line">    - ```javascript</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type : <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">            url : <span class="string">&quot;跨域的url&quot;</span>,</span><br><span class="line">            dataType : <span class="string">&quot;jsonp&quot;</span>, <span class="comment">// 指定数据类型</span></span><br><span class="line">            jsonp : <span class="string">&quot;fun&quot;</span>, <span class="comment">// 指定参数名（不设置的时候，默认是：&quot;callback&quot;）</span></span><br><span class="line">            jsonpCallback : <span class="string">&quot;sayHello&quot;</span> <span class="comment">// 指定回调函数的名字</span></span><br><span class="line">           <span class="comment">// （不设置的时候，jQuery会自动生成一个随机的回调函数，</span></span><br><span class="line">               <span class="comment">//并且这个回调函数还会自动调用success的回调函数。）</span></span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="方案4：代理机制（httpclient）"><a href="#方案4：代理机制（httpclient）" class="headerlink" title="方案4：代理机制（httpclient）"></a>方案4：代理机制（httpclient）</h4><ul><li>使用Java程序怎么去发送get&#x2F;post请求呢？【GET和POST请求就是HTTP请求。】<ul><li>第一种方案：使用JDK内置的API（java.net.URL…..），这些API是可以发送HTTP请求的。</li><li>第二种方案：使用第三方的开源组件，比如：apache的httpclient组件。（httpclient组件是开源免费的，可以直接用）</li></ul></li><li>在java程序中，使用httpclient组件可以发送http请求。<ul><li>对于httpclient组件的代码，大家目前可以不进行深入的研究，可以从网上直接搜。然后粘贴过来，改一改，看看能不能完成发送get和post请求。</li><li>使用httpclient组件，需要先将这个组件相关的jar包引入到项目当中。</li></ul></li></ul><h1 id="附录-HTTP状态信息"><a href="#附录-HTTP状态信息" class="headerlink" title="附录: HTTP状态信息"></a>附录: HTTP状态信息</h1><h3 id="1xx-信息"><a href="#1xx-信息" class="headerlink" title="1xx: 信息"></a>1xx: 信息</h3><table><thead><tr><th align="left">消息:</th><th align="left">描述:</th></tr></thead><tbody><tr><td align="left">100 Continue</td><td align="left">服务器仅接收到部分请求，但是一旦服务器并没有拒绝该请求，客户端应该继续发送其余的请求。</td></tr><tr><td align="left">101 Switching Protocols</td><td align="left">服务器转换协议：服务器将遵从客户的请求转换到另外一种协议。</td></tr></tbody></table><h3 id="2xx-成功"><a href="#2xx-成功" class="headerlink" title="2xx: 成功"></a>2xx: 成功</h3><table><thead><tr><th align="left">消息:</th><th align="left">描述:</th></tr></thead><tbody><tr><td align="left">200 OK</td><td align="left">请求成功（其后是对GET和POST请求的应答文档。）</td></tr><tr><td align="left">201 Created</td><td align="left">请求被创建完成，同时新的资源被创建。</td></tr><tr><td align="left">202 Accepted</td><td align="left">供处理的请求已被接受，但是处理未完成。</td></tr><tr><td align="left">203 Non-authoritative Information</td><td align="left">文档已经正常地返回，但一些应答头可能不正确，因为使用的是文档的拷贝。</td></tr><tr><td align="left">204 No Content</td><td align="left">没有新文档。浏览器应该继续显示原来的文档。如果用户定期地刷新页面，而Servlet可以确定用户文档足够新，这个状态代码是很有用的。</td></tr><tr><td align="left">205 Reset Content</td><td align="left">没有新文档。但浏览器应该重置它所显示的内容。用来强制浏览器清除表单输入内容。</td></tr><tr><td align="left">206 Partial Content</td><td align="left">客户发送了一个带有Range头的GET请求，服务器完成了它。</td></tr></tbody></table><h3 id="3xx-重定向"><a href="#3xx-重定向" class="headerlink" title="3xx: 重定向"></a>3xx: 重定向</h3><table><thead><tr><th align="left">消息:</th><th align="left">描述:</th></tr></thead><tbody><tr><td align="left">300 Multiple Choices</td><td align="left">多重选择。链接列表。用户可以选择某链接到达目的地。最多允许五个地址。</td></tr><tr><td align="left">301 Moved Permanently</td><td align="left">所请求的页面已经转移至新的url。</td></tr><tr><td align="left">302 Found</td><td align="left">所请求的页面已经临时转移至新的url。</td></tr><tr><td align="left">303 See Other</td><td align="left">所请求的页面可在别的url下被找到。</td></tr><tr><td align="left">304 Not Modified</td><td align="left">未按预期修改文档。客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文档还可以继续使用。</td></tr><tr><td align="left">305 Use Proxy</td><td align="left">客户请求的文档应该通过Location头所指明的代理服务器提取。</td></tr><tr><td align="left">306 <em>Unused</em></td><td align="left">此代码被用于前一版本。目前已不再使用，但是代码依然被保留。</td></tr><tr><td align="left">307 Temporary Redirect</td><td align="left">被请求的页面已经临时移至新的url。</td></tr></tbody></table><h3 id="4xx-客户端错误"><a href="#4xx-客户端错误" class="headerlink" title="4xx: 客户端错误"></a>4xx: 客户端错误</h3><table><thead><tr><th align="left">消息:</th><th align="left">描述:</th></tr></thead><tbody><tr><td align="left">400 Bad Request</td><td align="left">服务器未能理解请求。</td></tr><tr><td align="left">401 Unauthorized</td><td align="left">被请求的页面需要用户名和密码。</td></tr><tr><td align="left">402 Payment Required</td><td align="left">此代码尚无法使用。</td></tr><tr><td align="left">403 Forbidden</td><td align="left">对被请求页面的访问被禁止。</td></tr><tr><td align="left">404 Not Found</td><td align="left">服务器无法找到被请求的页面。</td></tr><tr><td align="left">405 Method Not Allowed</td><td align="left">请求中指定的方法不被允许。</td></tr><tr><td align="left">406 Not Acceptable</td><td align="left">服务器生成的响应无法被客户端所接受。</td></tr><tr><td align="left">407 Proxy Authentication Required</td><td align="left">用户必须首先使用代理服务器进行验证，这样请求才会被处理。</td></tr><tr><td align="left">408 Request Timeout</td><td align="left">请求超出了服务器的等待时间。</td></tr><tr><td align="left">409 Conflict</td><td align="left">由于冲突，请求无法被完成。</td></tr><tr><td align="left">410 Gone</td><td align="left">被请求的页面不可用。</td></tr><tr><td align="left">411 Length Required</td><td align="left">“Content-Length” 未被定义。如果无此内容，服务器不会接受请求。</td></tr><tr><td align="left">412 Precondition Failed</td><td align="left">请求中的前提条件被服务器评估为失败。</td></tr><tr><td align="left">413 Request Entity Too Large</td><td align="left">由于所请求的实体的太大，服务器不会接受请求。</td></tr><tr><td align="left">414 Request-url Too Long</td><td align="left">由于url太长，服务器不会接受请求。当post请求被转换为带有很长的查询信息的get请求时，就会发生这种情况。</td></tr><tr><td align="left">415 Unsupported Media Type</td><td align="left">由于媒介类型不被支持，服务器不会接受请求。</td></tr><tr><td align="left">416</td><td align="left">服务器不能满足客户在请求中指定的Range头。</td></tr><tr><td align="left">417 Expectation Failed</td><td align="left"></td></tr></tbody></table><h3 id="5xx-服务器错误"><a href="#5xx-服务器错误" class="headerlink" title="5xx: 服务器错误"></a>5xx: 服务器错误</h3><table><thead><tr><th align="left">消息:</th><th align="left">描述:</th></tr></thead><tbody><tr><td align="left">500 Internal Server Error</td><td align="left">请求未完成。服务器遇到不可预知的情况。</td></tr><tr><td align="left">501 Not Implemented</td><td align="left">请求未完成。服务器不支持所请求的功能。</td></tr><tr><td align="left">502 Bad Gateway</td><td align="left">请求未完成。服务器从上游服务器收到一个无效的响应。</td></tr><tr><td align="left">503 Service Unavailable</td><td align="left">请求未完成。服务器临时过载或当机。</td></tr><tr><td align="left">504 Gateway Timeout</td><td align="left">网关超时。</td></tr><tr><td align="left">505 HTTP Version Not Supported</td><td align="left">服务器不支持请求中指明的HTTP协议版本。</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">AJAX（Asynchronous Javascript And Xml）</summary>
    
    
    
    <category term="Java 学习" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/JavaEE/"/>
    
    <category term="AJAX" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/JavaEE/AJAX/"/>
    
    
    <category term="Java 学习" scheme="http://example.com/tags/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/tags/JavaEE/"/>
    
    <category term="AJAX" scheme="http://example.com/tags/AJAX/"/>
    
  </entry>
  
  <entry>
    <title>17. Listener监听器</title>
    <link href="http://example.com/2022/09/24/JavaEE/17.%20Listener%E7%9B%91%E5%90%AC%E5%99%A8/"/>
    <id>http://example.com/2022/09/24/JavaEE/17.%20Listener%E7%9B%91%E5%90%AC%E5%99%A8/</id>
    <published>2022-09-24T15:52:00.402Z</published>
    <updated>2022-09-24T15:54:15.697Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Listener监听器"><a href="#Listener监听器" class="headerlink" title="Listener监听器"></a>Listener监听器</h1><ul><li><p>什么是监听器？</p><ul><li>监听器是Servlet规范中的一员。就像Filter一样。Filter也是Servlet规范中的一员。</li><li>在Servlet中，所有的监听器接口都是以“Listener”结尾。</li></ul></li><li><p>监听器有什么用？</p><ul><li>监听器实际上是Servlet规范留给我们javaweb程序员的特殊时机。</li><li>特殊的时刻如果想执行这段代码，你需要想到使用对应的监听器。</li></ul></li><li><p>Servlet规范中提供了哪些监听器？</p><ul><li>jakarta.servlet包下：<ul><li>ServletContextListener</li><li>ServletContextAttributeListener</li><li>ServletRequestListener</li><li>ServletRequestAttributeListener</li></ul></li><li>jakarta.servlet.http包下：<ul><li>HttpSessionListener</li><li>HttpSessionAttributeListener<ul><li>该监听器需要使用@WebListener注解进行标注。</li><li>该监听器监听的是什么？是session域中数据的变化。只要数据变化，则执行相应的方法。主要监测点在session域对象上。</li></ul></li><li>HttpSessionBindingListener<ul><li>该监听器不需要使用@WebListener进行标注。</li><li>假设User类实现了该监听器，那么User对象在被放入session的时候触发bind事件，User对象从session中删除的时候，触发unbind事件。</li><li>假设Customer类没有实现该监听器，那么Customer对象放入session或者从session删除的时候，不会触发bind和unbind事件。</li></ul></li><li>HttpSessionIdListener<ul><li>session的id发生改变的时候，监听器中的唯一一个方法就会被调用。</li></ul></li><li>HttpSessionActivationListener<ul><li>监听session对象的钝化和活化的。</li><li>钝化：session对象从内存存储到硬盘文件。</li><li>活化：从硬盘文件把session恢复到内存。</li></ul></li></ul></li></ul></li><li><p>实现一个监听器的步骤：以ServletContextListener为例。</p><ul><li><p>第一步：编写一个类实现ServletContextListener接口。并且实现里面的方法。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">contextInitialized</span><span class="params">(ServletContextEvent event)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">contextDestroyed</span><span class="params">(ServletContextEvent event)</span></span><br></pre></td></tr></table></figure></li><li><p>第二步：在web.xml文件中对ServletContextListener进行配置，如下：</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.bjpowernode.javaweb.listener.MyServletContextListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>当然，第二步也可以不使用配置文件，也可以用注解，例如：@WebListener</li></ul></li></ul></li><li><p>注意：所有监听器中的方法都是不需要javaweb程序员调用的，由服务器来负责调用？什么时候被调用呢？</p><ul><li>当某个特殊的事件发生（特殊的事件发生其实就是某个时机到了。）之后，被web服务器自动调用。</li></ul></li><li><p>思考一个业务场景：</p><ul><li>请编写一个功能，记录该网站实时的在线用户的个数。</li><li>我们可以通过服务器端有没有分配session对象，因为一个session代表了一个用户。有一个session就代表有一个用户。如果你采用这种逻辑去实现的话，session有多少个，在线用户就有多少个。这种方式的话：HttpSessionListener够用了。session对象只要新建，则count++，然后将count存储到ServletContext域当中，在页面展示在线人数即可。</li><li>业务发生改变了，只统计登录的用户的在线数量，这个该怎么办？<ul><li>session.setAttribute(“user”, userObj); </li><li>用户登录的标志是什么？session中曾经存储过User类型的对象。那么这个时候可以让User类型的对象实现HttpSessionBindingListener监听器，只要User类型对象存储到session域中，则count++，然后将count++存储到ServletContext对象中。页面展示在线人数即可。</li></ul></li></ul></li><li><p>实现oa项目中当前登录在线的人数。</p><ul><li>什么代表着用户登录了？<ul><li>session.setAttribute(“user”, userObj); User类型的对象只要往session中存储过，表示有新用户登录。</li></ul></li><li>什么代表着用户退出了？<ul><li>session.removeAttribute(“user”); User类型的对象从session域中移除了。</li><li>或者有可能是session销毁了。（session超时）</li></ul></li></ul></li></ul>]]></content>
    
    
    <summary type="html">监听器是Servlet规范中的一员。就像Filter一样。Filter也是Servlet规范中的一员。在Servlet中，所有的监听器接口都是以“Listener”结尾。</summary>
    
    
    
    <category term="Java 学习" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/JavaEE/"/>
    
    
    <category term="Java 学习" scheme="http://example.com/tags/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>16. Filter 过滤器</title>
    <link href="http://example.com/2022/09/24/JavaEE/16.%20Filter%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    <id>http://example.com/2022/09/24/JavaEE/16.%20Filter%E8%BF%87%E6%BB%A4%E5%99%A8/</id>
    <published>2022-09-24T15:50:26.903Z</published>
    <updated>2022-09-24T15:54:46.922Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Filter过滤器"><a href="#Filter过滤器" class="headerlink" title="Filter过滤器"></a>Filter过滤器</h1><ul><li><p>Filter是什么，有什么用，执行原理是什么？</p><ul><li>Filter是过滤器。</li><li>Filter可以在Servlet这个目标程序执行之前添加代码。也可以在目标Servlet执行之后添加代码。之前之后都可以添加过滤规则。</li><li>一般情况下，都是在过滤器当中编写公共代码。</li></ul></li><li><p>一个过滤器怎么写呢？</p><ul><li><p>第一步：编写一个Java类实现一个接口：jarkata.servlet.Filter。并且实现这个接口当中所有的方法。</p><ul><li>init方法：在Filter对象第一次被创建之后调用，并且只调用一次。</li><li>doFilter方法：只要用户发送一次请求，则执行一次。发送N次请求，则执行N次。在这个方法中编写过滤规则。</li><li>destroy方法：在Filter对象被释放&#x2F;销毁之前调用，并且只调用一次。</li></ul></li><li><p>第二步：在web.xml文件中对Filter进行配置。这个配置和Servlet很像。</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filter2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.bjpowernode.javaweb.servlet.Filter2<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filter2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>或者使用注解：@WebFilter({“*.do”})</li></ul></li></ul></li><li><p>注意：</p><ul><li>Servlet对象默认情况下，在服务器启动的时候是不会新建对象的。</li><li>Filter对象默认情况下，在服务器启动的时候会新建对象。</li><li>Servlet是单例的。Filter也是单例的。（单实例。）</li></ul></li><li><p>目标Servlet是否执行，取决于两个条件：</p><ul><li>第一：在过滤器当中是否编写了：chain.doFilter(request, response); 代码。</li><li>第二：用户发送的请求路径是否和Servlet的请求路径一致。</li></ul></li><li><p>chain.doFilter(request, response); 这行代码的作用：</p><ul><li>执行下一个过滤器，如果下面没有过滤器了，执行最终的Servlet。</li></ul></li><li><p>注意：Filter的优先级，天生的就比Servlet优先级高。</p><ul><li>&#x2F;a.do 对应一个Filter，也对应一个Servlet。那么一定是先执行Filter，然后再执行Servlet。</li></ul></li><li><p>关于Filter的配置路径：</p><ul><li>&#x2F;a.do、&#x2F;b.do、&#x2F;dept&#x2F;save。这些配置方式都是精确匹配。</li><li>&#x2F;* 匹配所有路径。</li><li>*.do 后缀匹配。不要以 &#x2F; 开始</li><li>&#x2F;dept&#x2F;*  前缀匹配。</li></ul></li><li><p>在web.xml文件中进行配置的时候，Filter的执行顺序是什么？</p><ul><li>依靠filter-mapping标签的配置位置，越靠上优先级越高。</li></ul></li><li><p>过滤器的调用顺序，遵循栈数据结构。</p></li><li><p>使用@WebFilter的时候，Filter的执行顺序是怎样的呢？</p><ul><li>执行顺序是：比较Filter这个类名。</li><li>比如：FilterA和FilterB，则先执行FilterA。</li><li>比如：Filter1和Filter2，则先执行Filter1.</li></ul></li><li><p>Filter的生命周期？</p><ul><li>和Servlet对象生命周期一致。</li><li>唯一的区别：Filter默认情况下，在服务器启动阶段就实例化。Servlet不会。</li></ul></li><li><p>Filter过滤器这里有一个设计模式：</p><ul><li>责任链设计模式。</li><li>过滤器最大的优点：<ul><li>在程序编译阶段不会确定调用顺序。因为Filter的调用顺序是配置到web.xml文件中的，只要修改web.xml配置文件中filter-mapping的顺序就可以调整Filter的执行顺序。显然Filter的执行顺序是在程序运行阶段动态组合的。那么这种设计模式被称为责任链设计模式。</li></ul></li><li>责任链设计模式最大的核心思想：<ul><li>在程序运行阶段，动态的组合程序的调用顺序。</li></ul></li></ul></li></ul>]]></content>
    
    
    <summary type="html">Filter是过滤器。Filter可以在Servlet这个目标程序执行之前添加代码。也可以在目标Servlet执行之后添加代码。之前之后都可以添加过滤规则。一般情况下，都是在过滤器当中编写公共代码。</summary>
    
    
    
    <category term="Java 学习" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/JavaEE/"/>
    
    
    <category term="Java 学习" scheme="http://example.com/tags/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>15. EL表达式和JSTL标签库</title>
    <link href="http://example.com/2022/09/24/JavaEE/15.%20EL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8CJSTL%E6%A0%87%E7%AD%BE%E5%BA%93/"/>
    <id>http://example.com/2022/09/24/JavaEE/15.%20EL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8CJSTL%E6%A0%87%E7%AD%BE%E5%BA%93/</id>
    <published>2022-09-24T15:48:20.499Z</published>
    <updated>2022-09-24T15:56:05.225Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-EL表达式"><a href="#1-EL表达式" class="headerlink" title="1. EL表达式"></a>1. EL表达式</h1><ul><li><p>EL表达式是干什么用的？</p><ul><li>Expression Language（表达式语言）</li><li>EL表达式可以代替JSP中的java代码，让JSP文件中的程序看起来更加整洁，美观。</li><li>JSP中夹杂着各种java代码，例如&lt;% java代码 %&gt;、&lt;%&#x3D;%&gt;等，导致JSP文件很混乱，不好看，不好维护。所以才有了后期的EL表达式。</li><li>EL表达式可以算是JSP语法的一部分。EL表达式归属于JSP。</li></ul></li><li><p>EL表达式出现在JSP中主要是：</p><ul><li>从某个作用域中取数据，然后将其转换成字符串，然后将其输出到浏览器。这就是EL表达式的功效。三大功效：<ul><li>第一功效：从某个域中取数据。<ul><li>四个域：<ul><li>pageContext</li><li>request</li><li>session</li><li>application</li></ul></li></ul></li><li>第二功效：将取出的数据转成字符串。<ul><li>如果是一个java对象，也会自动调用java对象的toString方法将其转换成字符串。</li></ul></li><li>第三功效：将字符串输出到浏览器。<ul><li>和这个一样：&lt;%&#x3D; %&gt;，将其输出到浏览器。</li></ul></li></ul></li></ul></li><li><p>EL表达式很好用，基本的语法格式：</p><ul><li>${表达式}</li></ul></li><li><p>EL表达式的使用：</p>  <figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line"><span class="comment">// 创建User对象</span></span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user.setUsername(<span class="string">&quot;jackson&quot;</span>);</span><br><span class="line">user.setPassword(<span class="string">&quot;1234&quot;</span>);</span><br><span class="line">user.setAge(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将User对象存储到某个域当中。一定要存，因为EL表达式只能从某个范围中取数据。</span></span><br><span class="line"><span class="comment">// 数据是必须存储到四大范围之一的。</span></span><br><span class="line">request.setAttribute(<span class="string">&quot;userObj&quot;</span>, user);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--使用EL表达式取--%&gt;</span><br><span class="line">$&#123;这个位置写什么？？？？这里写的一定是存储到域对象当中时的name&#125;</span><br><span class="line">要这样写：</span><br><span class="line">$&#123;userObj&#125;</span><br><span class="line">等同于java代码：&lt;%=request.getAttribute(<span class="string">&quot;userObj&quot;</span>)%&gt;</span><br><span class="line">你不要这样写：$&#123;<span class="string">&quot;userObj&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">面试题：</span><br><span class="line">$&#123;abc&#125; 和 $&#123;<span class="string">&quot;abc&quot;</span>&#125;的区别是什么？</span><br><span class="line">$&#123;abc&#125;表示从某个域中取出数据，并且被取的这个数据的name是<span class="string">&quot;abc&quot;</span>，之前一定有这样的代码: 域.setAttribute(<span class="string">&quot;abc&quot;</span>, 对象);</span><br><span class="line">$&#123;<span class="string">&quot;abc&quot;</span>&#125; 表示直接将<span class="string">&quot;abc&quot;</span>当做普通字符串输出到浏览器。不会从某个域中取数据了。</span><br><span class="line"></span><br><span class="line">$&#123;userObj&#125; 底层是怎么做的？从域中取数据，取出user对象，然后调用user对象的toString方法，转换成字符串，输出到浏览器。</span><br><span class="line"></span><br><span class="line">&lt;%--如果想输出对象的属性值，怎么办？--%&gt;</span><br><span class="line">$&#123;userObj.username&#125; 使用这个语法的前提是：User对象有getUsername()方法。</span><br><span class="line">$&#123;userObj.password&#125; 使用这个语法的前提是：User对象有getPassword()方法。</span><br><span class="line">$&#123;userObj.age&#125; 使用这个语法的前提是：User对象有getAge()方法。</span><br><span class="line">$&#123;userObj.email&#125; 使用这个语法的前提是：User对象有getEmail()方法。</span><br><span class="line">EL表达式中的. 这个语法，实际上调用了底层的getXxx()方法。</span><br><span class="line">注意：如果没有对应的get方法，则出现异常。报<span class="number">500</span>错误。</span><br><span class="line"></span><br><span class="line">$&#123;userObj.addr222.zipcode&#125;</span><br><span class="line">以上EL表达式对应的java代码：</span><br><span class="line">user.getAddr222().getZipcode()</span><br></pre></td></tr></table></figure><ul><li><p>EL表达式优先从小范围中读取数据。</p><ul><li>pageContext &lt; request &lt; session &lt; application</li></ul></li><li><p>EL表达式中有四个隐含的隐式的范围：</p><ul><li>pageScope 对应的是 pageContext范围。</li><li>requestScope 对应的是 request范围。</li><li>sessionScope 对应的是 session范围。</li><li>applicationScope 对应的是 application范围。</li></ul></li><li><p>EL表达式对null进行了预处理。如果是null，则向浏览器输出一个空字符串。</p></li><li><p>EL表达式取数据的时候有两种形式：</p><ul><li>第一种：.  （大部分使用这种方式）</li><li>第二种：[ ] （如果存储到域的时候，这个name中含有特殊字符，可以使用 [ ]）<ul><li>request.setAttribute(“abc.def”, “zhangsan”);</li><li>${requestScope.abc.def} 这样是无法取值的。</li><li>应该这样：${requestScope[“abc.def”]}</li></ul></li></ul></li><li><p>掌握使用EL表达式，怎么从Map集合中取数据：</p><ul><li>${map.key}</li></ul></li><li><p>掌握使用EL表达式，怎么从数组和List集合中取数据：</p><ul><li>${数组[0]}</li><li>${数组[1]}</li><li>${list[0]}</li></ul></li><li><p>page指令当中，有一个属性，可以忽略EL表达式</p>  <figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> isELIgnored=<span class="string">&quot;true&quot;</span> %&gt;</span><br><span class="line">isELIgnored=<span class="string">&quot;true&quot;</span> 表示忽略EL表达式</span><br><span class="line">isELIgnored=<span class="string">&quot;false&quot;</span> 表示不忽略EL表达式。（这是默认值）</span><br><span class="line"></span><br><span class="line">isELIgnored=<span class="string">&quot;true&quot;</span> 这个是全局的控制。</span><br><span class="line"></span><br><span class="line">可以使用反斜杠进行局部控制：\$&#123;username&#125; 这样也可以忽略EL表达式。</span><br></pre></td></tr></table></figure></li><li><p>通过EL表达式获取应用的根：</p><ul><li>${pageContext.request.contextPath}</li></ul></li><li><p>EL表达式中其他的隐式对象：</p><ul><li>pageContext</li><li>param</li><li>paramValues</li><li>initParam</li></ul></li><li><p>EL表达式的运算符</p><ul><li>算术运算符<ul><li>+、-、*、&#x2F;、%</li></ul></li><li>关系运算符<ul><li><input disabled="" type="checkbox"> &#x3D;&#x3D; eq !&#x3D; &gt; &gt;&#x3D; &lt; &lt;&#x3D;</li></ul></li><li>逻辑运算符<ul><li><input disabled="" type="checkbox"> !  &amp;&amp; ||  not and or</li></ul></li><li>条件运算符<ul><li><input disabled="" type="checkbox"> ? :</li></ul></li><li>取值运算符<ul><li>[ ]和.</li></ul></li><li>empty运算符<ul><li><input disabled="" type="checkbox"> empty运算符的结果是boolean类型</li><li><input disabled="" type="checkbox"> ${empty param.username}</li><li><input disabled="" type="checkbox"> ${not empty param.username}</li><li><input disabled="" type="checkbox"> ${!empty param.password}</li></ul></li></ul></li></ul></li></ul><h1 id="2-JSTL标签库"><a href="#2-JSTL标签库" class="headerlink" title="2. JSTL标签库"></a>2. JSTL标签库</h1><ul><li><p>什么是JSTL标签库？</p><ul><li>Java Standard Tag Lib（Java标准的标签库）</li><li>JSTL标签库通常结合EL表达式一起使用。目的是让JSP中的java代码消失。</li><li>标签是写在JSP当中的，但实际上最终还是要执行对应的java程序。（java程序在jar包当中。）</li></ul></li><li><p>使用JSTL标签库的步骤：</p><ul><li><p>第一步：引入JSTL标签库对应的jar包。</p><ul><li>tomcat10之后引入的jar包是：<ul><li>jakarta.servlet.jsp.jstl-2.0.0.jar</li><li>jakarta.servlet.jsp.jstl-api-2.0.0.jar</li></ul></li><li>在IDEA当中怎么引入？<ul><li>在WEB-INF下新建lib目录，然后将jar包拷贝到lib当中。然后将其“Add Lib…”</li><li>一定是要和mysql的数据库驱动一样，都是放在WEB-INF&#x2F;lib目录下的。</li><li>什么时候需要将jar包放到WEB-INF&#x2F;lib目录下？如果这个jar是tomcat服务器没有的。</li></ul></li></ul></li><li><p>第二步：在JSP中引入要使用标签库。（使用taglib指令引入标签库。）</p><ul><li><p>JSTL提供了很多种标签，你要引入哪个标签？？？？重点掌握核心标签库。</p>  <figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@taglib</span> prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">这个就是核心标签库。</span><br><span class="line">prefix=<span class="string">&quot;这里随便起一个名字就行了，核心标签库，大家默认的叫做c，你随意。&quot;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>第三步：在需要使用标签的位置使用即可。表面使用的是标签，底层实际上还是java程序。</p></li></ul></li><li><p>JSTL标签的原理</p>  <figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@taglib</span> prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">以上uri后面的路径实际上指向了一个xxx.tld文件。</span><br><span class="line">tld文件实际上是一个xml配置文件。</span><br><span class="line">在tld文件中描述了“标签”和“java类”之间的关系。</span><br><span class="line">以上核心标签库对应的tld文件是：c.tld文件。它在哪里。</span><br><span class="line">在jakarta.servlet.jsp.jstl-<span class="number">2.0</span><span class="number">.0</span>.jar里面META-INF目录下，有一个c.tld文件。</span><br></pre></td></tr></table></figure><ul><li><p>源码解析：配置文件tld解析</p>  <figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;tag&gt;</span><br><span class="line">    &lt;description&gt;对该标签的描述&lt;/description&gt;</span><br><span class="line">    &lt;name&gt;<span class="keyword">catch</span>&lt;/name&gt; 标签的名字</span><br><span class="line">    &lt;tag-class&gt;org.apache.taglibs.standard.tag.common.core.CatchTag&lt;/tag-class&gt; 标签对应的java类。</span><br><span class="line">    &lt;body-content&gt;JSP&lt;/body-content&gt; 标签体当中可以出现的内容，如果是JSP，就表示标签体中可以出现符合JSP所有语法的代码。例如EL表达式。</span><br><span class="line">    &lt;attribute&gt;</span><br><span class="line">        &lt;description&gt;</span><br><span class="line">        对这个属性的描述</span><br><span class="line">        &lt;/description&gt;</span><br><span class="line">        &lt;name&gt;<span class="keyword">var</span>&lt;/name&gt; 属性名</span><br><span class="line">        &lt;required&gt;<span class="literal">false</span>&lt;/required&gt; <span class="literal">false</span>表示该属性不是必须的。<span class="literal">true</span>表示该属性是必须的。</span><br><span class="line">        &lt;rtexprvalue&gt;<span class="literal">false</span>&lt;/rtexprvalue&gt; 这个描述说明了该属性是否支持EL表达式。<span class="literal">false</span>表示不支持。<span class="literal">true</span>表示支持EL表达式。</span><br><span class="line">    &lt;/attribute&gt;</span><br><span class="line">  &lt;/tag&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:<span class="keyword">catch</span> <span class="keyword">var</span>=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">JSP....</span><br><span class="line">&lt;/c:<span class="keyword">catch</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>jstl中的核心标签库core当中有哪些常用的标签呢？</p><ul><li><p>c:if</p><ul><li>&lt;c:if test&#x3D;”boolean类型，支持EL表达式”&gt;&lt;&#x2F;c: if&gt;</li></ul></li><li><p>c:forEach</p><ul><li>&lt;c:forEach items&#x3D;”集合，支持EL表达式” var&#x3D;”集合中的元素” varStatus&#x3D;”元素状态对象”&gt; ${元素状态对象.count} &lt;&#x2F;c: forEach&gt;</li><li>&lt;c:forEach var&#x3D;”i” begin&#x3D;”1” end&#x3D;”10” step&#x3D;”2”&gt; ${i} &lt;&#x2F;c: forEach&gt;</li></ul></li><li><p>c:choose c:when c:otherwise</p>  <figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:choose&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;param.age &lt; 18&#125;&quot;</span>&gt;</span><br><span class="line">        青少年</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;param.age &lt; 35&#125;&quot;</span>&gt;</span><br><span class="line">        青年</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;param.age &lt; 55&#125;&quot;</span>&gt;</span><br><span class="line">        中年</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:otherwise&gt;</span><br><span class="line">        老年</span><br><span class="line">    &lt;/c:otherwise&gt;</span><br><span class="line">&lt;/c:choose&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul>]]></content>
    
    
    <summary type="html">EL表达式是干什么用的?</summary>
    
    
    
    <category term="Java 学习" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/JavaEE/"/>
    
    
    <category term="Java 学习" scheme="http://example.com/tags/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>14. JSP详解</title>
    <link href="http://example.com/2022/09/24/JavaEE/14.%20JSP%E8%AF%A6%E8%A7%A3/"/>
    <id>http://example.com/2022/09/24/JavaEE/14.%20JSP%E8%AF%A6%E8%A7%A3/</id>
    <published>2022-09-24T15:33:46.184Z</published>
    <updated>2022-09-24T15:57:00.586Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-什么是JSP"><a href="#1-什么是JSP" class="headerlink" title="1. 什么是JSP"></a>1. 什么是JSP</h1><p>JSP全称Java Server Pages，是一种动态网页开发技术。它使用JSP标签在HTML网页中插入Java代码。标签通常以&lt;%开头以%&gt;结束。</p><p>JSP是一种Java servlet，主要用于实现Java web应用程序的用户界面部分。网页开发者们通过结合HTML代码、XHTML代码、XML元素以及嵌入JSP操作和命令来编写JSP。</p><p>JSP是java程序。（JSP本质还是一个Servlet）</p><p>JSP是：JavaServer Pages的缩写。（基于Java语言实现的服务器端的页面。）</p><p>Servlet是JavaEE的13个子规范之一，那么JSP也是JavaEE的13个子规范之一。</p><p>JSP是一套规范。所有的web容器&#x2F;web服务器都是遵循这套规范的，都是按照这套规范进行的“翻译”</p><p>每一个web容器&#x2F;web服务器都会内置一个JSP翻译引擎。</p><p><strong>关于index.jsp</strong></p><ul><li><p>在WEB-INF目录之外创建一个index.jsp文件，然后这个文件中没有任何内容。</p></li><li><p>将上面的项目部署之后，启动服务器，打开浏览器，访问以下地址：</p><ul><li><a href="http://localhost:8080/jsp/index.jsp">http://localhost:8080/jsp/index.jsp</a> 展现在大家面前的是一个空白。</li><li>实际上访问以上的这个：index.jsp，底层执行的是：index_jsp.class 这个java程序。</li><li>这个index.jsp会被tomcat翻译生成index_jsp.java文件，然后tomcat服务器又会将index_jsp.java编译生成index_jsp.class文件</li><li>访问index.jsp，实际上执行的是index_jsp.class中的方法。</li></ul></li><li><p>JSP实际上就是一个Servlet。</p><ul><li>index.jsp访问的时候，会自动翻译生成index_jsp.java，会自动编译生成index_jsp.class，那么index_jsp 这就是一个类。</li><li>index_jsp 类继承 HttpJspBase，而HttpJspBase类继承的是HttpServlet。所以index_jsp类就是一个Servlet类。</li><li>jsp的生命周期和Servlet的生命周期完全相同。完全就是一个东西。没有任何区别。</li><li>jsp和servlet一样，都是单例的。（假单例。）</li></ul></li></ul><p><strong>为什么第一次访问Jsp会比较慢?</strong></p><ul><li>第一次比较麻烦：<ul><li>要把jsp文件翻译生成java源文件</li><li>java源文件要编译生成class字节码文件</li><li>然后通过class去创建servlet对象</li><li>然后调用servlet对象的init方法</li><li>最后调用servlet对象的service方法。</li></ul></li><li>第二次就比较快了，为什么？<ul><li>因为第二次直接调用单例servlet对象的service方法即可。</li></ul></li></ul><h1 id="2-JSP和Servlet的区别"><a href="#2-JSP和Servlet的区别" class="headerlink" title="2. JSP和Servlet的区别"></a>2. JSP和Servlet的区别</h1><p>职责不同：</p><ul><li>Servlet的职责是什么：收集数据。（Servlet的强项是逻辑处理，业务处理，然后链接数据库，获取&#x2F;收集数据。）</li><li>JSP的职责是什么：展示数据。（JSP的强项是做数据的展示）</li></ul><h1 id="3-JSP的基础语法"><a href="#3-JSP的基础语法" class="headerlink" title="3. JSP的基础语法"></a>3. JSP的基础语法</h1><ul><li>在jsp文件中直接编写文字，都会自动被翻译到哪里？<ul><li>翻译到servlet类的service方法的out.write(“翻译到这里”)，直接翻译到双引号里，被java程序当做普通字符串打印输出到浏览器。</li><li>在JSP中编写的HTML CSS JS代码，这些代码对于JSP来说只是一个普通的字符串。但是JSP把这个普通的字符串一旦输出到浏览器，浏览器就会对HTML CSS JS进行解释执行。展现一个效果。</li></ul></li><li>JSP的page指令（这个指令后面再详细说，这里先解决一下中文乱码问题），解决响应时的中文乱码问题：<ul><li>通过page指令来设置响应的内容类型，在内容类型的最后面添加：charset&#x3D;UTF-8<ul><li>&lt;%@page contentType&#x3D;”text&#x2F;html;charset&#x3D;UTF-8”%&gt;，表示响应的内容类型是text&#x2F;html，采用的字符集UTF-8</li><li>&lt;%@page import&#x3D;”java.util.List,java.util.ArrayList”%&gt;</li></ul></li></ul></li><li>怎么在JSP中编写Java程序：<ul><li>&lt;% java语句; %&gt;<ul><li>在这个符号当中编写的被视为java程序，被翻译到Servlet类的service方法内部。</li><li>这里你要细心点，你要思考，在&lt;% %&gt;这个符号里面写java代码的时候，你要时时刻刻的记住你正在“方法体”当中写代码，方法体中可以写什么，不可以写什么，你心里是否明白呢？</li><li>在service方法当中编写的代码是有顺序的，方法体当中的代码要遵循自上而下的顺序依次逐行执行。</li><li>service方法当中不能写静态代码块，不能写方法，不能定义成员变量。。。。。。</li><li>在同一个JSP当中 &lt;%%&gt; 这个符号可以出现多个。</li></ul></li><li>&lt;%! %&gt;<ul><li>在这个符号当中编写的java程序会自动翻译到service方法之外。</li><li>这个语法很少用，为什么？不建议使用，因为在service方法外面写静态变量和实例变量，都会存在线程安全问题，因为JSP就是servlet，servlet是单例的，多线程并发的环境下，这个静态变量和实例变量一旦有修改操作，必然会存在线程安全问题。</li></ul></li><li>JSP的输出语句<ul><li>怎么向浏览器上输出一个java变量。</li><li>&lt;% String name &#x3D; “jack”;  out.write(“name &#x3D; “ + name); %&gt;</li><li>注意：以上代码中的out是JSP的九大内置对象之一。可以直接拿来用。当然，必须只能在service方法内部使用。</li><li>如果向浏览器上输出的内容中没有“java代码”，例如输出的字符串是一个固定的字符串，可以直接在jsp中编写，不需要写到&lt;%%&gt; 这里。</li><li>如果输出的内容中含有“java代码”，这个时候可以使用以下语法格式：<ul><li>&lt;%&#x3D; %&gt; 注意：在&#x3D;的后面编写要输出的内容。</li><li>&lt;%&#x3D; %&gt; 这个符号会被翻译到哪里？最终翻译成什么？ <ul><li>翻译成了这个java代码：   out.print();</li><li>翻译到service方法当中了。</li></ul></li><li>什么时候使用&lt;%&#x3D;%&gt; 输出呢？输出的内容中含有java的变量，输出的内容是一个动态的内容，不是一个死的字符串。如果输出的是一个固定的字符串，直接在JSP文件中编写即可。</li></ul></li></ul></li></ul></li><li>在JSP中如何编写JSP的专业注释<ul><li>&lt;%–JSP的专业注释，不会被翻译到java源代码当中。–%&gt;</li><li><!--这种注释属于HTML的注释，这个注释信息仍然会被翻译到java源代码当中，不建议。--></li></ul></li><li>JSP基础语法总结：<ul><li>JSP中直接编写普通字符串<ul><li>翻译到service方法的out.write(“这里”)</li></ul></li><li>&lt;%%&gt;<ul><li>翻译到service方法体内部，里面是一条一条的java语句。</li></ul></li><li>&lt;%! %&gt;<ul><li>翻译到service方法之外。</li></ul></li><li>&lt;%&#x3D; %&gt;<ul><li>翻译到service方法体内部，翻译为：out.print();</li></ul></li><li>&lt;%@page  contentType&#x3D;”text&#x2F;html;charset&#x3D;UTF-8”%&gt;<ul><li>page指令，通过contentType属性用来设置响应的内容类型。</li></ul></li></ul></li></ul><h1 id="4-JSP指令"><a href="#4-JSP指令" class="headerlink" title="4. JSP指令"></a>4. JSP指令</h1><ul><li><ul><li><p>指令的作用：指导JSP的翻译引擎如何工作（指导当前的JSP翻译引擎如何翻译JSP文件。）</p><ul><li><p>指令包括哪些呢？</p><ul><li>include指令：包含指令，在JSP中完成静态包含，很少用了。（这里不讲）</li><li>taglib指令：引入标签库的指令。这个到JJSTL标签库的时候再学习。现在先不管。</li><li>page指令：目前重点学习一个page指令。</li></ul></li><li><p>指令的使用语法是什么？</p><ul><li>&lt;%@指令名  属性名&#x3D;属性值  属性名&#x3D;属性值  属性名&#x3D;属性值….%&gt;</li></ul></li><li><p>关于page指令当中都有哪些常用的属性呢？</p>  <figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> session=<span class="string">&quot;true|false&quot;</span> %&gt;</span><br><span class="line"><span class="literal">true</span>表示启用JSP的内置对象session，表示一定启动session对象。没有session对象会创建。</span><br><span class="line">如果没有设置，默认值就是session=<span class="string">&quot;true&quot;</span></span><br><span class="line">session=<span class="string">&quot;false&quot;</span> 表示不启动内置对象session。当前JSP页面中无法使用内置对象session。</span><br></pre></td></tr></table></figure>  <figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> contentType=<span class="string">&quot;text/json&quot;</span> %&gt;</span><br><span class="line">contentType属性用来设置响应的内容类型</span><br><span class="line">但同时也可以设置字符集。</span><br><span class="line">&lt;%<span class="meta">@page</span> contentType=<span class="string">&quot;text/json;charset=UTF-8&quot;</span> %&gt;</span><br></pre></td></tr></table></figure>  <figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span> %&gt;</span><br><span class="line">pageEncoding=<span class="string">&quot;UTF-8&quot;</span> 表示设置响应时采用的字符集。</span><br></pre></td></tr></table></figure>  <figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> <span class="keyword">import</span>=<span class="string">&quot;java.util.List, java.util.Date, java.util.ArrayList&quot;</span> %&gt;</span><br><span class="line">&lt;%<span class="meta">@page</span> <span class="keyword">import</span>=<span class="string">&quot;java.util.*&quot;</span> %&gt;</span><br><span class="line"><span class="keyword">import</span>语句，导包。</span><br></pre></td></tr></table></figure>  <figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> errorPage=<span class="string">&quot;/error.jsp&quot;</span> %&gt;</span><br><span class="line">当前页面出现异常之后，跳转到error.jsp页面。</span><br><span class="line">errorPage属性用来指定出错之后的跳转位置。</span><br></pre></td></tr></table></figure>  <figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> isErrorPage=<span class="string">&quot;true&quot;</span> %&gt;</span><br><span class="line">表示启用JSP九大内置对象之一：exception</span><br><span class="line">默认值是<span class="literal">false</span>。</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h1 id="5-JSP的九大内置对象"><a href="#5-JSP的九大内置对象" class="headerlink" title="5. JSP的九大内置对象"></a>5. JSP的九大内置对象</h1><ul><li><p>jakarta.servlet.jsp.PageContext pageContext       页面作用域</p></li><li><p>jakarta.servlet.http.HttpServletRequest request 请求作用域</p></li><li><p>jakarta.servlet.http.HttpSession session  会话作用域</p></li><li><p>jakarta.servlet.ServletContext application 应用作用域</p><ul><li>pageContext &lt; request &lt; session &lt; application</li><li>以上四个作用域都有：setAttribute、getAttribute、removeAttribute方法。</li><li>以上作用域的使用原则：尽可能使用小的域。</li></ul></li><li><p>java.lang.Throwable exception   </p></li><li><p>jakarta.servlet.ServletConfig config</p></li><li><p>java.lang.Object page  （其实是this，当前的servlet对象）</p></li><li><p>jakarta.servlet.jsp.JspWriter out  （负责输出）</p></li><li><p>jakarta.servlet.http.HttpServletResponse response （负责响应）</p></li></ul>]]></content>
    
    
    <summary type="html">JSP全称Java Server Pages，是一种动态网页开发技术。它使用JSP标签在HTML网页中插入Java代码。标签通常以&lt;%开头以%&gt;结束。JSP是一种Java servlet，主要用于实现Java web应用程序的用户界面部分。网页开发者们通过结合HTML代码、XHTML代码、XML元素以及嵌入JSP操作和命令来编写JSP。</summary>
    
    
    
    <category term="Java 学习" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/JavaEE/"/>
    
    
    <category term="Java 学习" scheme="http://example.com/tags/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>13. session 和 cookie</title>
    <link href="http://example.com/2022/09/24/JavaEE/13.%20session%20%E5%92%8C%20cookie/"/>
    <id>http://example.com/2022/09/24/JavaEE/13.%20session%20%E5%92%8C%20cookie/</id>
    <published>2022-09-24T15:07:39.054Z</published>
    <updated>2022-09-24T15:57:14.268Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-session"><a href="#1-session" class="headerlink" title="1. session"></a>1. session</h1><ul><li><p><strong>什么是会话？</strong></p><ul><li>会话对应的英语单词：session</li><li>用户打开浏览器，进行一系列操作，然后最终将浏览器关闭，这个整个过程叫做：一次会话。会话在服务器端也有一个对应的java对象，这个java对象叫做：session。</li><li>什么是一次请求：用户在浏览器上点击了一下，然后到页面停下来，可以粗略认为是一次请求。请求对应的服务器端的java对象是：request。</li><li>一个会话当中包含多次请求。（一次会话对应N次请求。）</li></ul></li><li><p>在java的servlet规范当中，session对应的类名：HttpSession（jarkata.servlet.http.HttpSession）</p></li><li><p>session机制属于B&#x2F;S结构的一部分。如果使用php语言开发WEB项目，同样也是有session这种机制的。session机制实际上是一个规范。然后不同的语言对这种会话机制都有实现。</p></li><li><p>session对象最主要的作用是：保存会话状态。（用户登录成功了，这是一种登录成功的状态，你怎么把登录成功的状态一直保存下来呢？使用session对象可以保留会话状态。）</p></li><li><p><strong>为什么需要session对象来保存会话状态呢？</strong></p><ul><li>因为HTTP协议是一种无状态协议。</li><li>什么是无状态：请求的时候，B和S是连接的，但是请求结束之后，连接就断了。为什么要这么做？HTTP协议为什么要设计成这样？因为这样的无状态协议，可以降低服务器的压力。请求的瞬间是连接的，请求结束之后，连接断开，这样服务器压力小。</li><li>只要B和S断开了，那么关闭浏览器这个动作，服务器知道吗？<ul><li>不知道。服务器是不知道浏览器关闭的。</li></ul></li></ul></li><li><p><strong>张三打开一个浏览器A，李四打开一个浏览器B，访问服务器之后，在服务器端会生成：</strong></p><ul><li>张三专属的session对象</li><li>李四专属的session对象</li></ul></li><li><p><strong>为什么不使用request对象保存会话状态？为什么不使用ServletContext对象保存会话状态？</strong></p><ul><li>request.setAttribute()存，request.getAttribute()取，ServletContext也有这个方法。request是请求域。ServletContext是应用域。</li><li>request是一次请求一个对象。</li><li>ServletContext对象是服务器启动的时候创建，服务器关闭的时候销毁，这个ServletContext对象只有一个。</li><li>ServletContext对象的域太大。</li><li>request请求域（HttpServletRequest）、session会话域（HttpSession）、application域（ServletContext）</li><li>request &lt; session &lt; application</li></ul></li><li><p><strong>session对象的实现原理。</strong></p><ul><li>HttpSession session &#x3D; request.getSession();</li><li>这行代码很神奇。张三访问的时候获取的session对象就是张三的。李四访问的时候获取的session对象就是李四的。</li></ul></li><li><p><strong>session的实现原理：</strong></p><ul><li>JSESSIONID&#x3D;xxxxxx  这个是以Cookie的形式保存在浏览器的内存中的。浏览器只要关闭。这个cookie就没有了。</li><li>session列表是一个Map，map的key是sessionid，map的value是session对象。</li><li>用户第一次请求，服务器生成session对象，同时生成id，将id发送给浏览器。</li><li>用户第二次请求，自动将浏览器内存中的id发送给服务器，服务器根据id查找session对象。</li><li>关闭浏览器，内存消失，cookie消失，sessionid消失，会话等同于结束。</li></ul></li><li><p><strong>Cookie禁用了，session还能找到吗？</strong></p><ul><li>cookie禁用是什么意思？服务器正常发送cookie给浏览器，但是浏览器不要了。拒收了。并不是服务器不发了。</li><li>找不到了。每一次请求都会获取到新的session对象。</li><li>cookie禁用了，session机制还能实现吗？<ul><li>可以。需要使用URL重写机制。</li><li><a href="http://localhost:8080/servlet12/test/session;jsessionid=19D1C99560DCBF84839FA43D58F56E16">http://localhost:8080/servlet12/test/session;jsessionid=19D1C99560DCBF84839FA43D58F56E16</a></li><li>URL重写机制会提高开发者的成本。开发人员在编写任何请求路径的时候，后面都要添加一个sessionid，给开发带来了很大的难度，很大的成本。所以大部分的网站都是这样设计的：你要是禁用cookie，你就别用了。</li></ul></li></ul></li><li><p><strong>域对象：</strong></p><ul><li>request（对应的类名：HttpServletRequest）<ul><li>请求域（请求级别的）</li></ul></li><li>session（对应的类名：HttpSession）<ul><li>会话域（用户级别的）</li></ul></li><li>application（对应的类名：ServletContext）<ul><li>应用域（项目级别的，所有用户共享的。）</li></ul></li><li>这三个域对象的大小关系<ul><li>request &lt; session &lt; application</li></ul></li><li>他们三个域对象都有以下三个公共的方法：<ul><li>setAttribute（向域当中绑定数据）</li><li>getAttribute（从域当中获取数据）</li><li>removeAttribute（删除域当中的数据）</li></ul></li><li>使用原则：尽量使用小的域。</li></ul></li><li><p>销毁session对象：</p><p>  <code>session.invalidate();</code></p></li></ul><h1 id="2-Cookie"><a href="#2-Cookie" class="headerlink" title="2. Cookie"></a>2. Cookie</h1><ul><li><p><strong>session的实现原理中，每一个session对象都会关联一个sessionid</strong>，例如：</p><ul><li>JSESSIONID&#x3D;41C481F0224664BDB28E95081D23D5B8</li><li>以上的这个键值对数据其实就是cookie对象。</li><li>对于session关联的cookie来说，这个cookie是被保存在浏览器的“运行内存”当中。</li><li>只要浏览器不关闭，用户再次发送请求的时候，会自动将运行内存中的cookie发送给服务器。</li><li>例如，这个Cookie: JSESSIONID&#x3D;41C481F0224664BDB28E95081D23D5B8就会再次发送给服务器。</li><li>服务器就是根据41C481F0224664BDB28E95081D23D5B8这个值来找到对应的session对象的。</li></ul></li><li><p><strong>cookie最终是保存在浏览器客户端上的</strong>。</p><ul><li>可以保存在运行内存中。（浏览器只要关闭cookie就消失了。）</li><li>也可以保存在硬盘文件中。（永久保存。）</li></ul></li><li><p><strong>cookie有啥用呢</strong>？</p><ul><li>cookie和session机制其实都是为了保存会话的状态。</li><li>cookie是将会话的状态保存在浏览器客户端上。（cookie数据存储在浏览器客户端上的。）</li><li>session是将会话的状态保存在服务器端上。（session对象是存储在服务器上。）</li><li>为什么要有cookie和session机制呢？因为HTTP协议是无状态 无连接协议。</li></ul></li><li><p><strong>cookie的经典案例</strong></p><ul><li>京东商城，在未登录的情况下，向购物车中放几件商品。然后关闭商城，再次打开浏览器，访问京东商城的时候，购物车中的商品还在，这是怎么做的？我没有登录，为什么购物车中还有商品呢？<ul><li>将购物车中的商品编号放到cookie当中，cookie保存在硬盘文件当中。这样即使关闭浏览器。硬盘上的cookie还在。下一次再打开京东商城的时候，查看购物车的时候，会自动读取本地硬盘中存储的cookie，拿到商品编号，动态展示购物车中的商品。<ul><li>京东存储购物车中商品的cookie可能是这样的：productIds&#x3D;xxxxx,yyyy,zzz,kkkk</li><li>注意：cookie如果清除掉，购物车中的商品就消失了。</li></ul></li></ul></li><li>126邮箱中有一个功能：十天内免登录<ul><li>这个功能也是需要cookie来实现的。</li><li>怎么实现的呢？<ul><li>用户输入正确的用户名和密码，并且同时选择十天内免登录。登录成功后。浏览器客户端会保存一个cookie，这个cookie中保存了用户名和密码等信息，这个cookie是保存在硬盘文件当中的，十天有效。在十天内用户再次访问126的时候，浏览器自动提交126的关联的cookie给服务器，服务器接收到cookie之后，获取用户名和密码，验证，通过之后，自动登录成功。</li><li>怎么让cookie失效？<ul><li>十天过后自动失效。</li><li>或者改密码。</li><li>或者在客户端浏览器上清除cookie。</li></ul></li></ul></li></ul></li></ul></li><li><p>cookie机制和session机制其实都不属于java中的机制，实际上cookie机制和session机制都是HTTP协议的一部分。php开发中也有cookie和session机制，只要是你是做web开发，不管是什么编程语言，cookie和session机制都是需要的。</p></li><li><p>HTTP协议中规定：任何一个cookie都是由name和value组成的。name和value都是字符串类型的。</p></li><li><p>在java的servlet中，对cookie提供了哪些支持呢？</p><ul><li>提供了一个Cookie类来专门表示cookie数据。jakarta.servlet.http.Cookie;</li><li>java程序怎么把cookie数据发送给浏览器呢？response.addCookie(cookie);</li></ul></li><li><p>在HTTP协议中是这样规定的：当浏览器发送请求的时候，会自动携带该path下的cookie数据给服务器。（URL。）</p></li><li><p>关于cookie的有效时间</p><ul><li>怎么用java设置cookie的有效时间<ul><li>cookie.setMaxAge(60 * 60); 设置cookie在一小时之后失效。</li></ul></li><li>没有设置有效时间：默认保存在浏览器的运行内存中，浏览器关闭则cookie消失。</li><li>只要设置cookie的有效时间 &gt; 0，这个cookie一定会存储到硬盘文件当中。</li><li>设置cookie的有效时间 &#x3D; 0 呢？<ul><li>cookie被删除，同名cookie被删除。</li></ul></li><li>设置cookie的有效时间 &lt; 0 呢？<ul><li>保存在运行内存中。和不设置一样。</li></ul></li></ul></li><li><p>关于cookie的path，cookie关联的路径：</p><ul><li>假设现在发送的请求路径是“<a href="http://localhost:8080/servlet13/cookie/generate%E2%80%9D%E7%94%9F%E6%88%90%E7%9A%84cookie%EF%BC%8C%E5%A6%82%E6%9E%9Ccookie%E6%B2%A1%E6%9C%89%E8%AE%BE%E7%BD%AEpath%EF%BC%8C%E9%BB%98%E8%AE%A4%E7%9A%84path%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F">http://localhost:8080/servlet13/cookie/generate”生成的cookie，如果cookie没有设置path，默认的path是什么？</a><ul><li>默认的path是：<a href="http://localhost:8080/servlet13/cookie">http://localhost:8080/servlet13/cookie</a> 以及它的子路径。</li><li>也就是说，以后只要浏览器的请求路径是<a href="http://localhost:8080/servlet13/cookie">http://localhost:8080/servlet13/cookie</a> 这个路径以及这个路径下的子路径，cookie都会被发送到服务器。</li></ul></li><li>手动设置cookie的path<ul><li>cookie.setPath(“&#x2F;servlet13”); 表示只要是这个servlet13项目的请求路径，都会提交这个cookie给服务器。</li></ul></li></ul></li><li><p>浏览器发送cookie给服务器了，服务器中的java程序怎么接收？</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Cookie[] cookies = request.getCookies(); <span class="comment">// 这个方法可能返回null</span></span><br><span class="line"><span class="keyword">if</span>(cookies != <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(Cookie cookie : cookies)&#123;</span><br><span class="line">        <span class="comment">// 获取cookie的name</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> cookie.getName();</span><br><span class="line">        <span class="comment">// 获取cookie的value</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> cookie.getValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">session 就是 B/S 结构系统的会话机制,用户打开浏览器,进行一系列的操作后,再关闭浏览器,这一整个过程叫做一次会话.</summary>
    
    
    
    <category term="Java 学习" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/JavaEE/"/>
    
    
    <category term="Java 学习" scheme="http://example.com/tags/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>12. Servlet注解开发与优化</title>
    <link href="http://example.com/2022/09/24/JavaEE/12.%20Servlet%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91%E4%B8%8E%E4%BC%98%E5%8C%96/"/>
    <id>http://example.com/2022/09/24/JavaEE/12.%20Servlet%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91%E4%B8%8E%E4%BC%98%E5%8C%96/</id>
    <published>2022-09-24T15:01:45.131Z</published>
    <updated>2022-09-24T15:57:17.063Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Servlet注解开发"><a href="#1-Servlet注解开发" class="headerlink" title="1. Servlet注解开发"></a>1. Servlet注解开发</h1><ul><li><p>分析oa项目中的web.xml文件</p><ul><li>现在只是一个单标的CRUD，没有复杂的业务逻辑，很简单的一丢丢功能。web.xml文件中就有如此多的配置信息。如果采用这种方式，对于一个大的项目来说，这样的话web.xml文件会非常庞大，有可能最终会达到几十兆。</li><li>在web.xml文件中进行servlet信息的配置，显然开发效率比较低，每一个都需要配置一下。</li><li>而且在web.xml文件中的配置是很少被修改的，所以这种配置信息能不能直接写到java类当中呢？可以的。</li></ul></li><li><p>Servlet3.0版本之后，推出了各种Servlet基于注解式开发。优点是什么？</p><ul><li>开发效率高，不需要编写大量的配置信息。直接在java类上使用注解进行标注。</li><li>web.xml文件体积变小了。</li></ul></li><li><p>并不是说注解有了之后，web.xml文件就不需要了：</p><ul><li>有一些需要变化的信息，还是要配置到web.xml文件中。一般都是 注解+配置文件 的开发模式。</li><li>一些不会经常变化修改的配置建议使用注解。一些可能会被修改的建议写到配置文件中。</li></ul></li><li><p>我们的第一个注解：</p><ul><li><pre><code class="java">  jakarta.servlet.annotation.WebServlet</code></pre></li><li><p>在Servlet类上使用：@WebServlet，WebServlet注解中有哪些属性呢？</p><ul><li>name属性：用来指定Servlet的名字。等同于：<servlet-name></li><li>urlPatterns属性：用来指定Servlet的映射路径。可以指定多个字符串。<url-pattern></li><li>loadOnStartUp属性：用来指定在服务器启动阶段是否加载该Servlet。等同于：<load-on-startup></li><li>value属性：当注解的属性名是value的时候，使用注解的时候，value属性名是可以省略的。</li><li>注意：不是必须将所有属性都写上，只需要提供需要的。（需要什么用什么。）</li><li>注意：属性是一个数组，如果数组中只有一个元素，使用该注解的时候，属性值的大括号可以省略。</li></ul></li></ul></li><li><p>注解对象的使用格式：</p><ul><li>@注解名称(属性名&#x3D;属性值, 属性名&#x3D;属性值, 属性名&#x3D;属性值….)</li></ul></li></ul><h1 id="2-使用模板方法设计模式优化oa项目"><a href="#2-使用模板方法设计模式优化oa项目" class="headerlink" title="2. 使用模板方法设计模式优化oa项目"></a>2. 使用模板方法设计模式优化oa项目</h1><ul><li>上面的注解解决了配置文件的问题。但是现在的oa项目仍然存在一个比较臃肿的问题。<ul><li>一个单标的CRUD，就写了6个Servlet。如果一个复杂的业务系统，这种开发方式，显然会导致类爆炸。（类的数量太大。）</li><li>怎么解决这个类爆炸问题？可以使用模板方法设计模式。</li></ul></li><li>怎么解决类爆炸问题？<ul><li>以前的设计是一个请求一个Servlet类。1000个请求对应1000个Servlet类。导致类爆炸。</li><li>可以这样做：一个请求对应一个方法。一个业务对应一个Servlet类。</li><li>处理部门相关业务的对应一个DeptServlet。处理用户相关业务的对应一个UserServlet。处理银行卡卡片业务对应一个CardServlet。</li></ul></li></ul><h1 id="3-纯粹的Servlet开发Web应用的缺陷"><a href="#3-纯粹的Servlet开发Web应用的缺陷" class="headerlink" title="3. 纯粹的Servlet开发Web应用的缺陷"></a>3. 纯粹的Servlet开发Web应用的缺陷</h1><ul><li>va程序中编写前端代码，编写难度大。麻烦。</li><li>java程序中编写前端代码，显然程序的耦合度非常高。</li><li>java程序中编写前端代码，代码非常不美观。</li><li>java程序中编写前端代码，维护成本太高。（非常难于维护）<ul><li>修改小小的一个前端代码，只要有改动，就需要重新编译java代码，生成新的class文件，打一个新的war包，重新发布。</li></ul></li></ul>]]></content>
    
    
    <summary type="html">Servlet3.0版本之后，推出了各种Servlet基于注解式开发。它使得开发效率高了，不需要编写大量的配置信息。直接在java类上使用注解进行标注。</summary>
    
    
    
    <category term="Java 学习" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/JavaEE/"/>
    
    
    <category term="Java 学习" scheme="http://example.com/tags/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>11. 转发和重定向</title>
    <link href="http://example.com/2022/09/15/JavaEE/11.%20%E8%BD%AC%E5%8F%91%E5%92%8C%E9%87%8D%E5%AE%9A%E5%90%91/"/>
    <id>http://example.com/2022/09/15/JavaEE/11.%20%E8%BD%AC%E5%8F%91%E5%92%8C%E9%87%8D%E5%AE%9A%E5%90%91/</id>
    <published>2022-09-15T13:59:53.278Z</published>
    <updated>2022-09-15T14:03:12.005Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-转发和重定向"><a href="#1-转发和重定向" class="headerlink" title="1. 转发和重定向"></a>1. 转发和重定向</h1><p><strong>转发</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取请求转发器对象</span></span><br><span class="line"><span class="type">RequestDispatcher</span> <span class="variable">dispatcher</span> <span class="operator">=</span> request.getRequestDispatcher(<span class="string">&quot;/dept/list&quot;</span>);</span><br><span class="line"><span class="comment">// 调用请求转发器对象的forward方法完成转发</span></span><br><span class="line">dispatcher.forward(request, response);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并一行代码</span></span><br><span class="line">request.getRequestDispatcher(<span class="string">&quot;/dept/list&quot;</span>).forward(request, response);</span><br><span class="line"><span class="comment">// 转发的时候是一次请求，不管你转发了多少次。都是一次请求。</span></span><br><span class="line"><span class="comment">// AServlet转发到BServlet，再转发到CServlet，再转发到DServlet，不管转发了多少次，都在同一个request当中。</span></span><br><span class="line"><span class="comment">// 这是因为调用forward方法的时候，会将当前的request和response对象传递给下一个Servlet。</span></span><br></pre></td></tr></table></figure><p><strong>重定向</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意：路径上要加一个项目名。为什么？</span></span><br><span class="line"><span class="comment">// 浏览器发送请求，请求路径上是需要添加项目名的。</span></span><br><span class="line"><span class="comment">// 以下这一行代码会将请求路径“/oa/dept/list”发送给浏览器</span></span><br><span class="line"><span class="comment">// 浏览器会自发的向服务器发送一次全新的请求：/oa/dept/list</span></span><br><span class="line">response.sendRedirect(<span class="string">&quot;/oa/dept/list&quot;</span>);</span><br></pre></td></tr></table></figure><h1 id="2-区别"><a href="#2-区别" class="headerlink" title="2. 区别"></a>2. 区别</h1><p><strong>形式上区别</strong></p><ul><li>转发（一次请求）<ul><li>在浏览器地址栏上发送的请求是：<a href="http://localhost:8080/servlet10/a">http://localhost:8080/servlet10/a</a> ，最终请求结束之后，浏览器地址栏上的地址还是这个。没变。</li></ul></li><li>重定向（两次请求）<ul><li>在浏览器地址栏上发送的请求是：<a href="http://localhost:8080/servlet10/a">http://localhost:8080/servlet10/a</a> ，最终在浏览器地址栏上显示的地址是：<a href="http://localhost:8080/servlet10/b">http://localhost:8080/servlet10/b</a></li></ul></li></ul><p><strong>本质区别</strong></p><ul><li>转发：是由WEB服务器来控制的。A资源跳转到B资源，这个跳转动作是Tomcat服务器内部完成的。</li><li>重定向：是浏览器完成的。具体跳转到哪个资源，是浏览器说了算。</li></ul><h1 id="3-选择"><a href="#3-选择" class="headerlink" title="3. 选择"></a>3. 选择</h1><ul><li><p>如果在上一个Servlet当中向request域当中绑定了数据，希望从下一个Servlet当中把request域里面的数据取出来，使用转发机制。</p></li><li><p>剩下所有的请求均使用重定向。（重定向使用较多。）</p></li><li><p>跳转的下一个资源有没有要求呢？必须是一个Servlet吗？</p><ul><li>不一定，跳转的资源只要是服务器内部合法的资源即可。包括：Servlet、JSP、HTML…..</li></ul></li><li><p>转发会存在浏览器的刷新问题。</p></li></ul>]]></content>
    
    
    <summary type="html">在一个web应用中通过两种方式，可以完成资源的跳转：1. 转发 2. 重定向</summary>
    
    
    
    <category term="Java 学习" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/JavaEE/"/>
    
    
    <category term="Java 学习" scheme="http://example.com/tags/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>10. 纯Servlet单表CRUD操作</title>
    <link href="http://example.com/2022/09/15/JavaEE/10.%20%E7%BA%AFServlet%E5%8D%95%E8%A1%A8CRUD%E6%93%8D%E4%BD%9C/"/>
    <id>http://example.com/2022/09/15/JavaEE/10.%20%E7%BA%AFServlet%E5%8D%95%E8%A1%A8CRUD%E6%93%8D%E4%BD%9C/</id>
    <published>2022-09-15T12:41:36.126Z</published>
    <updated>2022-09-24T15:57:21.209Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-准备"><a href="#1-准备" class="headerlink" title="1. 准备"></a>1. 准备</h1><p><strong>数据库</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 部门表</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> dept;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dept(</span><br><span class="line">deptno <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">    dname <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    loc <span class="type">varchar</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept(deptno, dname, loc) <span class="keyword">values</span>(<span class="number">10</span>, <span class="string">&#x27;XiaoShouBu&#x27;</span>, <span class="string">&#x27;BEIJING&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept(deptno, dname, loc) <span class="keyword">values</span>(<span class="number">20</span>, <span class="string">&#x27;YanFaBu&#x27;</span>, <span class="string">&#x27;SHANGHAI&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept(deptno, dname, loc) <span class="keyword">values</span>(<span class="number">30</span>, <span class="string">&#x27;JiShuBu&#x27;</span>, <span class="string">&#x27;GUANGZHOU&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept(deptno, dname, loc) <span class="keyword">values</span>(<span class="number">40</span>, <span class="string">&#x27;MeiTiBu&#x27;</span>, <span class="string">&#x27;SHENZHEN&#x27;</span>);</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept;</span><br></pre></td></tr></table></figure><h1 id="2-实现代码"><a href="#2-实现代码" class="headerlink" title="2. 实现代码"></a>2. 实现代码</h1><h2 id="1-Servlet"><a href="#1-Servlet" class="headerlink" title="1. Servlet"></a>1. Servlet</h2><p><strong>DeptListServlet</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.utils.JDBCUtils;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptListServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        out.println(<span class="string">&quot;&lt;!DOCTYPE html &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;html lang = &#x27;en&#x27; &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;head &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;    &lt;meta charset = &#x27;UTF-8&#x27; &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;    &lt;title &gt; 部门列表 &lt;/title &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/head &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;body &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;h1 align = &#x27; center&#x27; &gt; 部门列表 &lt;/h1 &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;br / &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;div align = &#x27;center&#x27;&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;   &lt;a href=&#x27;/add&#x27; &gt;添加部门&lt;/a&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/div&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;table align = &#x27;center&#x27; width = &#x27;50%&#x27; border = &#x27;1px&#x27; &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;    &lt;tr &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;        &lt;th &gt; 序号 &lt;/th &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;        &lt;th &gt; 部门编号 &lt;/th &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;        &lt;th &gt; 部门名称 &lt;/th &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;        &lt;th &gt; 部门地址 &lt;/th &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;        &lt;th &gt; 操作 &lt;/th &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;   &lt;/tr &gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 连接MySql数据库</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">// 查询数据库中 Dept中的数据</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from dept&quot;</span>;</span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            rs = ps.executeQuery();</span><br><span class="line"></span><br><span class="line">            System.out.println(rs.next());</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">deptno</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;deptno&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">dname</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;dname&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">loc</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;location&quot;</span>);</span><br><span class="line"></span><br><span class="line">                out.print(<span class="string">&quot;&lt;tr&gt;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;&lt;td&gt;&quot;</span> + (++i) + <span class="string">&quot;&lt;/td&gt;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;&lt;td&gt;&quot;</span> + deptno + <span class="string">&quot;&lt;/td&gt;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;&lt;td&gt;&quot;</span> + dname + <span class="string">&quot;&lt;/td&gt;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;&lt;td&gt;&quot;</span> + loc + <span class="string">&quot;&lt;/td&gt;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;&lt;td&gt;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;&lt;a href=&#x27;javascript:void(0)&#x27; onclick=&#x27;del(&quot;</span> + deptno + <span class="string">&quot;)&#x27; &gt;删除&lt;/a&gt;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;&lt;a href=&#x27;/edit?deptno=&quot;</span> + deptno + <span class="string">&quot;&amp;dname=&quot;</span> + dname + <span class="string">&quot;&amp;location=&quot;</span> + loc + <span class="string">&quot;&#x27;&gt;修改&lt;/a&gt;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;&lt;a href=&#x27;/detail?deptno=&quot;</span> + deptno + <span class="string">&quot; &#x27;&gt;详情&lt;/a&gt;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;&lt;/td&gt;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;&lt;/tr&gt;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;&lt;script type = &#x27;text/javascript&#x27; &gt;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;        function del(dno) &#123;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;   if (window.confirm(&#x27;亲，删了不可恢复哦！&#x27;)) &#123;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;        document.location.href = &#x27;/delete?deptno=&#x27; + dno;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;   &#125;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;&lt;/script &gt;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.close(conn, ps, rs);</span><br><span class="line">        &#125;</span><br><span class="line">        out.print(<span class="string">&quot;&lt;/table&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;&lt;/body &gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;&lt;/html &gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>DeptAddServlet</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.utils.JDBCUtils;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptAddServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        out.println(<span class="string">&quot;&lt;!DOCTYPE html &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;html lang = &#x27;en&#x27; &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;head &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;    &lt;meta charset = &#x27;UTF-8&#x27; &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;    &lt;title &gt; 部门添加 &lt;/title &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/head &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;body &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;h1 align = &#x27; center&#x27; &gt; 部门添加 &lt;/h1 &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;br / &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;form action = &#x27;/add&#x27; method = &#x27;post&#x27; &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;    &lt;table align = &#x27;center&#x27; width = &#x27;50%&#x27; border = &#x27;1px&#x27; &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;        &lt;tr &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;            &lt;td &gt; 部门编号 &lt;/td &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;            &lt;td &gt; &lt;input type = &#x27;text&#x27; name = &#x27;deptno&#x27; /&gt; &lt;/td &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;        &lt;/tr &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;        &lt;tr &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;            &lt;td &gt; 部门名称 &lt;/td &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;            &lt;td &gt; &lt;input type = &#x27;text&#x27; name = &#x27;dname&#x27; /&gt; &lt;/td &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;        &lt;/tr &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;        &lt;tr &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;            &lt;td &gt; 部门地址 &lt;/td &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;            &lt;td &gt; &lt;input type = &#x27;text&#x27; name = &#x27;location&#x27; /&gt; &lt;/td &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;        &lt;/tr &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;        &lt;tr &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;            &lt;td colspan = &#x27;2&#x27; align = &#x27;center&#x27;&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;                &lt;input type = &#x27;submit&#x27; value = &#x27;添加&#x27; /&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;            &lt;/td &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;        &lt;/tr &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;    &lt;/table &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/form &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/body &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/html&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">deptno</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;deptno&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">dname</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;dname&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">loc</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;location&quot;</span>);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JDBCUtils.getConnection();</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into dept values(?,?,?)&quot;</span>;</span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            ps.setString(<span class="number">1</span>, deptno);</span><br><span class="line">            ps.setString(<span class="number">2</span>, dname);</span><br><span class="line">            ps.setString(<span class="number">3</span>, loc);</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> ps.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">                resp.sendRedirect(<span class="string">&quot;/list&quot;</span>); <span class="comment">// 重定向</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                resp.getWriter().print(<span class="string">&quot;出错啦&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.close(conn, ps, rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>DeptDetailServlet</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.utils.JDBCUtils;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptDetailServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        <span class="type">String</span> <span class="variable">deptno</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;deptno&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JDBCUtils.getConnection();</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from dept where deptno = ?&quot;</span>;</span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            ps.setString(<span class="number">1</span>, deptno);</span><br><span class="line">            rs = ps.executeQuery();</span><br><span class="line">            <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">dname</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;dname&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">loc</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;location&quot;</span>);</span><br><span class="line">                out.println(<span class="string">&quot;&lt;!DOCTYPE html &gt;&quot;</span>);</span><br><span class="line">                out.println(<span class="string">&quot;&lt;html lang = &#x27;en&#x27; &gt;&quot;</span>);</span><br><span class="line">                out.println(<span class="string">&quot;&lt;head &gt;&quot;</span>);</span><br><span class="line">                out.println(<span class="string">&quot;    &lt;meta charset = &#x27;UTF-8&#x27; &gt;&quot;</span>);</span><br><span class="line">                out.println(<span class="string">&quot;    &lt;title &gt; 部门详情 &lt;/title &gt;&quot;</span>);</span><br><span class="line">                out.println(<span class="string">&quot;&lt;/head &gt;&quot;</span>);</span><br><span class="line">                out.println(<span class="string">&quot;&lt;body &gt;&quot;</span>);</span><br><span class="line">                out.println(<span class="string">&quot;&lt;h1 align = &#x27; center&#x27; &gt; 部门详情 &lt;/h1 &gt;&quot;</span>);</span><br><span class="line">                out.println(<span class="string">&quot;&lt;br / &gt;&quot;</span>);</span><br><span class="line">                out.println(<span class="string">&quot;&lt;table align = &#x27;center&#x27; width = &#x27;50%&#x27; border = &#x27;1px&#x27; &gt;&quot;</span>);</span><br><span class="line">                out.println(<span class="string">&quot;    &lt;tr &gt;&quot;</span>);</span><br><span class="line">                out.println(<span class="string">&quot;        &lt;th &gt; 部门编号 &lt;/th &gt;&quot;</span>);</span><br><span class="line">                out.println(<span class="string">&quot;        &lt;th &gt; 部门名称 &lt;/th &gt;&quot;</span>);</span><br><span class="line">                out.println(<span class="string">&quot;        &lt;th &gt; 部门地址 &lt;/th &gt;&quot;</span>);</span><br><span class="line">                out.println(<span class="string">&quot;   &lt;/tr &gt;&quot;</span>);</span><br><span class="line">                out.println(<span class="string">&quot;   &lt;tr &gt;&quot;</span>);</span><br><span class="line">                out.println(<span class="string">&quot;        &lt;td &gt;&quot;</span> + deptno + <span class="string">&quot;&lt;/td &gt;&quot;</span>);</span><br><span class="line">                out.println(<span class="string">&quot;        &lt;td &gt;&quot;</span> + dname + <span class="string">&quot;&lt;/td &gt;&quot;</span>);</span><br><span class="line">                out.println(<span class="string">&quot;        &lt;td &gt;&quot;</span> + loc + <span class="string">&quot;&lt;/td &gt;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.close(conn, ps, rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>DeptEditServlet</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.utils.JDBCUtils;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptEditServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        <span class="type">String</span> <span class="variable">deptno</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;deptno&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">dname</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;dname&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">loc</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;location&quot;</span>);</span><br><span class="line">        <span class="comment">// 渲染界面</span></span><br><span class="line">        out.println(<span class="string">&quot;&lt;!DOCTYPE html &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;html lang = &#x27;en&#x27; &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;head &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;    &lt;meta charset = &#x27;UTF-8&#x27; &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;    &lt;title &gt; 部门编辑 &lt;/title &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/head &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;body &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;h1 align = &#x27; center&#x27; &gt; 部门编辑 &lt;/h1 &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;br / &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;form action = &#x27;/edit&#x27; method = &#x27;post&#x27; &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;    &lt;table align = &#x27;center&#x27; width = &#x27;50%&#x27; border = &#x27;1px&#x27; &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;        &lt;tr &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;            &lt;td &gt; 部门编号 &lt;/td &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;            &lt;td &gt; &lt;input type = &#x27;text&#x27; name = &#x27;deptno&#x27; value = &#x27;&quot;</span> + deptno + <span class="string">&quot;&#x27; readonly = &#x27;readonly&#x27; /&gt; &lt;/td &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;        &lt;/tr &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;        &lt;tr &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;            &lt;td &gt; 部门名称 &lt;/td &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;            &lt;td &gt; &lt;input type = &#x27;text&#x27; name = &#x27;dname&#x27; value = &#x27;&quot;</span> + dname + <span class="string">&quot;&#x27; /&gt; &lt;/td &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;        &lt;/tr &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;        &lt;tr &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;            &lt;td &gt; 部门地址 &lt;/td &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;            &lt;td &gt; &lt;input type = &#x27;text&#x27; name = &#x27;location&#x27; value = &#x27;&quot;</span> + loc + <span class="string">&quot;&#x27; /&gt; &lt;/td &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;        &lt;/tr &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;        &lt;tr &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;            &lt;td colspan = &#x27;2&#x27; align = &#x27;center&#x27;&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;                &lt;input type = &#x27;submit&#x27; value = &#x27;修改&#x27; / &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;                &lt;input type = &#x27;reset&#x27; value = &#x27;重置&#x27; / &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;            &lt;/td &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;        &lt;/tr &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;    &lt;/table &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;    &lt;br / &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/form&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/body &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/html &gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">deptno</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;deptno&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">dname</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;dname&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">loc</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;location&quot;</span>);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JDBCUtils.getConnection();</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update dept set dname = ?, location = ? where deptno = ?&quot;</span>;</span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            ps.setString(<span class="number">1</span>, dname);</span><br><span class="line">            ps.setString(<span class="number">2</span>, loc);</span><br><span class="line">            ps.setString(<span class="number">3</span>, deptno);</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> ps.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">                resp.sendRedirect(<span class="string">&quot;/list&quot;</span>); <span class="comment">// 重定向</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                resp.getWriter().print(<span class="string">&quot;出错啦&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.close(conn, ps, rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>DeptDeleteServlet</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.utils.JDBCUtils;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptDeleteServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        <span class="type">String</span> <span class="variable">deptno</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;deptno&quot;</span>);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JDBCUtils.getConnection();</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from dept where deptno = ?&quot;</span>;</span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            ps.setString(<span class="number">1</span>, deptno);</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> ps.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">                req.getRequestDispatcher(<span class="string">&quot;/list&quot;</span>).forward(req, resp);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                out.print(<span class="string">&quot;出错啦&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.close(conn, ps, rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-Utils"><a href="#2-Utils" class="headerlink" title="2. Utils"></a>2. Utils</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String user;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">            properties.load(JDBCUtils.class.getClassLoader().getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>));</span><br><span class="line">            user = properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">            password = properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">            url = properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">            driver = properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">            Class.forName(driver);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放MySQL资源</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(Connection conn, Statement statement, ResultSet resultSet)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (statement != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (resultSet != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>jdbc.properties</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/study</span></span><br><span class="line"><span class="attr">user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure><h2 id="3-xml"><a href="#3-xml" class="headerlink" title="3. xml"></a>3. xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>list<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.servlet.DeptListServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>list<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/list<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>detail<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.servlet.DeptDetailServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>detail<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/detail<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.servlet.DeptDeleteServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/delete<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>edit<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.servlet.DeptEditServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>edit<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/edit<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>add<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.servlet.DeptAddServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>add<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/add<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-欢迎界面"><a href="#4-欢迎界面" class="headerlink" title="4. 欢迎界面"></a>4. 欢迎界面</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>欢迎界面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>欢迎界面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/list&quot;</span>&gt;</span>查看所有学生信息<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">单纯使用Servlet,不使用前端(html,jsp)做一个单表的CRUD操作,理解Servlet工作原理</summary>
    
    
    
    <category term="Java 学习" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/JavaEE/"/>
    
    
    <category term="Java 学习" scheme="http://example.com/tags/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>9. HttpServletRequest接口解析</title>
    <link href="http://example.com/2022/09/14/JavaEE/9.%20HttpServletRequest%20%E6%8E%A5%E5%8F%A3%E8%A7%A3%E6%9E%90/"/>
    <id>http://example.com/2022/09/14/JavaEE/9.%20HttpServletRequest%20%E6%8E%A5%E5%8F%A3%E8%A7%A3%E6%9E%90/</id>
    <published>2022-09-14T08:59:03.038Z</published>
    <updated>2022-09-14T09:27:57.830Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-HttpServletRequest"><a href="#1-HttpServletRequest" class="headerlink" title="1. HttpServletRequest"></a>1. HttpServletRequest</h1><blockquote><p>   HttpServletRequest 是一个接口,全限定名称为 : jakarta.servlet.http.HttpServletRequest, 他是Servlet规范中的一员。</p></blockquote><p><strong>HttpServletRequest接口的父接口:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HttpServletRequest</span> <span class="keyword">extends</span> <span class="title class_">ServletRequest</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>HttpServletRequest接口的实现类谁写的? HttpServletRequest对象是谁给创建的？</strong></p><ul><li><p>通过测试：org.apache.catalina.connector.RequestFacade 实现了 HttpServletRequest接口</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestFacade</span> <span class="keyword">implements</span> <span class="title class_">HttpServletRequest</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试结果说明：Tomcat服务器（WEB服务器、WEB容器）实现了HttpServletRequest接口，还是说明了Tomcat服务器实现了Servlet规范。而对于我们javaweb程序员来说，实际上不需要关心这个，我们只需要面向接口编程即可。我们关心的是HttpServletRequest接口中有哪些方法，这些方法可以完成什么功能！！！！</p></li></ul><p><strong>HttpServletRequest对象中都有什么信息？都包装了什么信息？</strong></p><ul><li>HttpServletRequest对象是Tomcat服务器负责创建的。这个对象中封装了什么信息？封装了HTTP的请求协议。</li><li>实际上是用户发送请求的时候，遵循了HTTP协议，发送的是HTTP的请求协议，Tomcat服务器将HTTP协议中的信息以及数据全部解析出来，然后Tomcat服务器把这些信息封装到HttpServletRequest对象当中，传给了我们javaweb程序员。</li><li>javaweb程序员面向HttpServletRequest接口编程，调用方法就可以获取到请求的信息了。</li></ul><p><strong>request和response对象的生命周期？</strong></p><ul><li>request对象和response对象，一个是请求对象，一个是响应对象。这两个对象只在当前请求中有效。</li><li>一次请求对应一个request。</li><li>两次请求则对应两个request。</li><li>…..</li></ul><p><strong>HttpServletRequest接口中的常用方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,String[]&gt; getParameterMap() 这个是获取Map</span><br><span class="line">Enumeration&lt;String&gt; <span class="title function_">getParameterNames</span><span class="params">()</span> 这个是获取Map集合中所有的key</span><br><span class="line">String[] getParameterValues(String name) 根据key获取Map集合的value</span><br><span class="line">String <span class="title function_">getParameter</span><span class="params">(String name)</span>  获取value这个一维数组当中的第一个元素。这个方法最常用。</span><br><span class="line"><span class="comment">// 以上的4个方法，和获取用户提交的数据有关系。</span></span><br></pre></td></tr></table></figure><h1 id="2-请求域-request"><a href="#2-请求域-request" class="headerlink" title="2. 请求域 - request"></a>2. 请求域 - request</h1><blockquote><p>   request实际上是一个请求域对象,相比于ServletContext的应用域,请求域范围就小的多了,生命周期也很短,请求域只在一次请求之内有效。</p></blockquote><p><strong>请求域对象的方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">setAttribute</span><span class="params">(String name, Object obj)</span>; <span class="comment">// 向域当中绑定数据。</span></span><br><span class="line">Object <span class="title function_">getAttribute</span><span class="params">(String name)</span>; <span class="comment">// 从域当中根据name获取数据。</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">removeAttribute</span><span class="params">(String name)</span>; <span class="comment">// 将域当中绑定的数据移除</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><p>在使用过程中尽量使用小的域对象，因为小的域对象占用的资源较少。</p><h1 id="3-转发"><a href="#3-转发" class="headerlink" title="3. 转发"></a>3. 转发</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一步：获取请求转发器对象</span></span><br><span class="line"><span class="type">RequestDispatcher</span> <span class="variable">dispatcher</span> <span class="operator">=</span> request.getRequestDispatcher(<span class="string">&quot;/b&quot;</span>);</span><br><span class="line"><span class="comment">// 第二步：调用转发器的forward方法完成跳转/转发</span></span><br><span class="line">dispatcher.forward(request,response);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一步和第二步代码可以联合在一起。</span></span><br><span class="line">request.getRequestDispatcher(<span class="string">&quot;/b&quot;</span>).forward(request,response);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>两个Servlet怎么共享数据</strong></p><ul><li>将数据放到ServletContext应用域当中，当然是可以的，但是应用域范围太大，占用资源太多。不建议使用。</li><li>可以将数据放到request域当中，然后AServlet转发到BServlet，保证AServlet和BServlet在同一次请求当中，这样就可以做到两个Servlet，或者多个Servlet共享同一份数据。</li></ul><p><strong>转发的下一个资源必须是一个Servlet吗？</strong></p><ul><li>不一定，只要是Tomcat服务器当中的合法资源，都是可以转发的。例如：html….</li><li>注意：转发的时候，路径的写法要注意，转发的路径以“&#x2F;”开始，不加项目名。</li></ul><h1 id="4-getParameter-和-getAttribute-区分"><a href="#4-getParameter-和-getAttribute-区分" class="headerlink" title="4. getParameter() 和 getAttribute() 区分"></a>4. getParameter() 和 getAttribute() 区分</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// uri?username=zhangsan&amp;userpwd=123&amp;sex=1</span></span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 之前一定是执行过：request.setAttribute(&quot;name&quot;, new Object())</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> request.getAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以上两个方法的区别是什么？</span></span><br><span class="line"><span class="comment">// 第一个方法：获取的是用户在浏览器上提交的数据。</span></span><br><span class="line"><span class="comment">// 第二个方法：获取的是请求域当中绑定的数据。</span></span><br></pre></td></tr></table></figure><h1 id="5-HttpServletRequest-接口的其他常用方法"><a href="#5-HttpServletRequest-接口的其他常用方法" class="headerlink" title="5. HttpServletRequest 接口的其他常用方法"></a>5. HttpServletRequest 接口的其他常用方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取客户端的IP地址</span></span><br><span class="line"><span class="type">String</span> <span class="variable">remoteAddr</span> <span class="operator">=</span> request.getRemoteAddr();</span><br><span class="line"></span><br><span class="line"><span class="comment">// get请求在请求行上提交数据。</span></span><br><span class="line"><span class="comment">// post请求在请求体中提交数据。</span></span><br><span class="line"><span class="comment">// 设置请求体的字符集。（显然这个方法是处理POST请求的乱码问题。这种方式并不能解决get请求的乱码问题。）</span></span><br><span class="line"><span class="comment">// Tomcat10之后，request请求体当中的字符集默认就是UTF-8，不需要设置字符集，不会出现乱码问题。</span></span><br><span class="line"><span class="comment">// Tomcat9前（包括9在内），如果前端请求体提交的是中文，后端获取之后出现乱码，怎么解决这个乱码？执行以下代码。</span></span><br><span class="line">request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在Tomcat9之前（包括9），响应中文也是有乱码的，怎么解决这个响应的乱码？</span></span><br><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"><span class="comment">// 在Tomcat10之后，包括10在内，响应中文的时候就不在出现乱码问题了。以上代码就不需要设置UTF-8了。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意一个细节</span></span><br><span class="line"><span class="comment">// 在Tomcat10包括10在内之后的版本，中文将不再出现乱码。（这也体现了中文地位的提升。）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// get请求乱码问题怎么解决？</span></span><br><span class="line"><span class="comment">// get请求发送的时候，数据是在请求行上提交的，不是在请求体当中提交的。</span></span><br><span class="line"><span class="comment">// get请求乱码怎么解决</span></span><br><span class="line"><span class="comment">// 方案：修改CATALINA_HOME/conf/server.xml配置文件</span></span><br><span class="line">&lt;Connector URIEncoding=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="line"><span class="comment">// 注意：从Tomcat8之后，URIEncoding的默认值就是UTF-8，所以GET请求也没有乱码问题了。</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 获取应用的根路径</span></span><br><span class="line"><span class="type">String</span> <span class="variable">contextPath</span> <span class="operator">=</span> request.getContextPath();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取请求方式</span></span><br><span class="line"><span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> request.getMethod();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取请求的URI</span></span><br><span class="line"><span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> request.getRequestURI();  <span class="comment">// /aaa/testRequest</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取servlet path</span></span><br><span class="line"><span class="type">String</span> <span class="variable">servletPath</span> <span class="operator">=</span> request.getServletPath(); <span class="comment">//   /testRequest</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">HttpServletRequest是一个接口,全限定名称为:jakarta.servlet.http.HttpServletRequest,他是Servlet规范中的一员。</summary>
    
    
    
    <category term="Java 学习" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/JavaEE/"/>
    
    
    <category term="Java 学习" scheme="http://example.com/tags/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>8. Web站点的欢迎界面和WEB-INF目录</title>
    <link href="http://example.com/2022/09/14/JavaEE/8.%20Web%E7%AB%99%E7%82%B9%E7%9A%84%E6%AC%A2%E8%BF%8E%E7%95%8C%E9%9D%A2%E5%92%8CWEB-INF%E7%9B%AE%E5%BD%95/"/>
    <id>http://example.com/2022/09/14/JavaEE/8.%20Web%E7%AB%99%E7%82%B9%E7%9A%84%E6%AC%A2%E8%BF%8E%E7%95%8C%E9%9D%A2%E5%92%8CWEB-INF%E7%9B%AE%E5%BD%95/</id>
    <published>2022-09-14T08:47:14.058Z</published>
    <updated>2022-09-14T09:21:51.867Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Web站点的欢迎界面"><a href="#1-Web站点的欢迎界面" class="headerlink" title="1. Web站点的欢迎界面"></a>1. Web站点的欢迎界面</h1><ul><li><p>什么是一个web站点的欢迎页面？</p><ul><li>对于一个webapp来说，我们是可以设置它的欢迎页面的。</li><li>设置了欢迎页面之后，当你访问这个webapp的时候，或者访问这个web站点的时候，没有指定任何“资源路径”，这个时候会默认访问你的欢迎页面。</li><li>我们一般的访问方式是：<ul><li><a href="http://localhost:8080/servlet06/login.html">http://localhost:8080/servlet06/login.html</a> 这种方式是指定了要访问的就是login.html资源。</li></ul></li><li>如果我们访问的方式是：<ul><li><a href="http://localhost:8080/servlet06">http://localhost:8080/servlet06</a> 如果我们访问的就是这个站点，没有指定具体的资源路径。它默认会访问谁呢？</li><li>默认会访问你设置的欢迎页面。</li></ul></li></ul></li><li><p>怎么设置欢迎页面呢？ </p><ul><li><p>第一步：我在IDEA工具的web目录下新建了一个文件login.html</p></li><li><p>第二步：在web.xml文件中进行了以下的配置</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>login.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注意：设置欢迎页面的时候，这个路径不需要以“/”开始。并且这个路径默认是从webapp的根下开始查找。 --&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>第三步：启动服务器，浏览器地址栏输入地址</p><ul><li><a href="http://localhost:8080/servlet07">http://localhost:8080/servlet07</a></li></ul></li></ul></li><li><p>如果在webapp的根下新建一个目录，目录中再给一个文件，那么这个欢迎页该如何设置呢？</p><ul><li><p>在webapp根下新建page1</p></li><li><p>在page1下新建page2目录</p></li><li><p>在page2目录下新建page.html页面</p></li><li><p>在web.xml文件中应该这样配置</p></li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>page1/page2/page.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注意：设置欢迎页面的时候，这个路径不需要以“/”开始。并且这个路径默认是从webapp的根下开始查找。 --&gt;</span></span><br></pre></td></tr></table></figure><p><strong>欢迎页面有两个地方可以配置：</strong></p><ul><li><p>一个是在webapp内部的web.xml文件中。（在这个地方配置的属于局部配置）</p></li><li><p>一个是在CATALINA_HOME&#x2F;conf&#x2F;web.xml文件中进行配置。（在这个地方配置的属于全局配置）</p><ul><li><pre><code class="xml">  &lt;welcome-file-list&gt;      &lt;welcome-file&gt;index.html&lt;/welcome-file&gt;      &lt;welcome-file&gt;index.htm&lt;/welcome-file&gt;      &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;  &lt;/welcome-file-list&gt;  <figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    - <span class="type">Tomcat</span>服务器的全局欢迎页面是：index.html index.htm index.jsp。如果你一个web站点没有设置局部的欢迎页面，<span class="type">Tomcat</span>服务器就会以index.html index.htm index.jsp作为一个web站点的欢迎页面。</span><br><span class="line"></span><br><span class="line">- 注意原则：局部优先原则。（就近原则）</span><br><span class="line"></span><br><span class="line">**欢迎页可以是一个<span class="type">Servlet</span>吗？**</span><br><span class="line"></span><br><span class="line">- 当然可以。</span><br><span class="line"></span><br><span class="line">- 你不要多想，欢迎页就是一个资源，既然是一个资源，那么可以是静态资源，也可以是动态资源。</span><br><span class="line"></span><br><span class="line">- 静态资源：index.html welcome.html .....</span><br><span class="line"></span><br><span class="line">- 动态资源：<span class="type">Servlet</span>类。</span><br><span class="line"></span><br><span class="line">- 步骤：</span><br><span class="line"></span><br><span class="line">    - 第一步：写一个<span class="type">Servlet</span></span><br><span class="line"></span><br><span class="line">        ```java</span><br><span class="line">        public <span class="class"><span class="keyword">class</span> <span class="title">WelcomeServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> void doGet(<span class="type">HttpServletRequest</span> request, <span class="type">HttpServletResponse</span> response) <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</span><br><span class="line">                response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">                <span class="type">PrintWriter</span> out = response.getWriter();</span><br><span class="line">                out.print(<span class="string">&quot;&lt;h1&gt;welcome to bjpowernode!&lt;/h1&gt;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>第二步：在web.xml文件中配置servlet</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>welcomeServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.bjpowernode.javaweb.servlet.WelcomeServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>welcomeServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/fdsa/fds/a/fds/af/ds/af/dsafdsafdsa<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>第三步：在web.xml文件中配置欢迎页</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>fdsa/fds/a/fds/af/ds/af/dsafdsafdsa<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="2-关于WEB-INF目录"><a href="#2-关于WEB-INF目录" class="headerlink" title="2. 关于WEB-INF目录"></a>2. 关于WEB-INF目录</h1><ul><li>在WEB-INF目录下新建了一个文件：welcome.html</li><li>打开浏览器访问：<a href="http://localhost:8080/servlet07/WEB-INF/welcome.html">http://localhost:8080/servlet07/WEB-INF/welcome.html</a> 出现了404错误。</li><li>注意：放在WEB-INF目录下的资源是受保护的。在浏览器上不能够通过路径直接访问。所以像HTML、CSS、JS、image等静态资源一定要放到WEB-INF目录之外。</li></ul>]]></content>
    
    
    <summary type="html">什么是一个web站点的欢迎页面？web站点的欢迎界面是当访问webapp时没有指定资源路径时候,便会默认访问欢迎界面</summary>
    
    
    
    <category term="Java 学习" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/JavaEE/"/>
    
    
    <category term="Java 学习" scheme="http://example.com/tags/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>7. HttpServlet 源码解析</title>
    <link href="http://example.com/2022/09/14/JavaEE/7.%20HttpServlet%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>http://example.com/2022/09/14/JavaEE/7.%20HttpServlet%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</id>
    <published>2022-09-14T08:43:46.122Z</published>
    <updated>2022-09-14T09:21:35.016Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-HttpServlet"><a href="#1-HttpServlet" class="headerlink" title="1. HttpServlet"></a>1. HttpServlet</h1><ul><li><p>HttpServlet类是专门为HTTP协议准备的。比GenericServlet更加适合HTTP协议下的开发。</p></li><li><p>HttpServlet在哪个包下？</p><ul><li>jakarta.servlet.http.HttpServlet</li></ul></li><li><p>到目前为止我们接触了servlet规范中哪些接口？</p><ul><li>jakarta.servlet.Servlet  核心接口（接口）</li><li>jakarta.servlet.ServletConfig Servlet配置信息接口（接口）</li><li>jakarta.servlet.ServletContext Servlet上下文接口（接口）</li><li>jakarta.servlet.ServletRequest Servlet请求接口（接口）</li><li>jakarta.servlet.ServletResponse Servlet响应接口（接口）</li><li>jakarta.servlet.ServletException Servlet异常（类）</li><li>jakarta.servlet.GenericServlet 标准通用的Servlet类（抽象类）</li></ul></li><li><p>http包下都有哪些类和接口呢？jakarta.servlet.http.*;</p><ul><li>jakarta.servlet.http.HttpServlet （HTTP协议专用的Servlet类，抽象类）</li><li>jakarta.servlet.http.HttpServletRequest （HTTP协议专用的请求对象）</li><li>jakarta.servlet.http.HttpServletResponse （HTTP协议专用的响应对象）</li></ul></li><li><p>HttpServletRequest对象中封装了什么信息？</p><ul><li>HttpServletRequest，简称request对象。</li><li>HttpServletRequest中封装了请求协议的全部内容。</li><li>Tomcat服务器（WEB服务器）将“请求协议”中的数据全部解析出来，然后将这些数据全部封装到request对象当中了。</li><li>也就是说，我们只要面向HttpServletRequest，就可以获取请求协议中的数据。</li></ul></li><li><p>HttpServletResponse对象是专门用来响应HTTP协议到浏览器的。</p></li></ul><h1 id="2-源码解析"><a href="#2-源码解析" class="headerlink" title="2. 源码解析"></a>2. 源码解析</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"><span class="comment">// 用户第一次请求，创建HelloServlet对象的时候，会执行这个无参数构造方法。</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HelloServlet</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//override 重写 doGet方法</span></span><br><span class="line">    <span class="comment">//override 重写 doPost方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">GenericServlet</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span>, ServletConfig,</span><br><span class="line">        java.io.Serializable &#123;</span><br><span class="line">           </span><br><span class="line"><span class="comment">// 用户第一次请求的时候，HelloServlet对象第一次被创建之后，这个init方法会执行。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="built_in">this</span>.config = config;</span><br><span class="line">        <span class="built_in">this</span>.init();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 用户第一次请求的时候，带有参数的init(ServletConfig config)执行之后，会执行这个没有参数的init()</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="comment">// NOOP by default</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HttpServlet模板类。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">HttpServlet</span> <span class="keyword">extends</span> <span class="title class_">GenericServlet</span> &#123;</span><br><span class="line">    <span class="comment">// 用户发送第一次请求的时候这个service会执行</span></span><br><span class="line">    <span class="comment">// 用户发送第N次请求的时候，这个service方法还是会执行。</span></span><br><span class="line">    <span class="comment">// 用户只要发送一次请求，这个service方法就会执行一次。</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest req, ServletResponse res)</span></span><br><span class="line">        <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        HttpServletRequest  request;</span><br><span class="line">        HttpServletResponse response;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 将ServletRequest和ServletResponse向下转型为带有Http的HttpServletRequest和HttpServletResponse</span></span><br><span class="line">            request = (HttpServletRequest) req;</span><br><span class="line">            response = (HttpServletResponse) res;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassCastException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServletException</span>(lStrings.getString(<span class="string">&quot;http.non_http&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 调用重载的service方法。</span></span><br><span class="line">        service(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 这个service方法的两个参数都是带有Http的。</span></span><br><span class="line">    <span class="comment">// 这个service是一个模板方法。</span></span><br><span class="line">    <span class="comment">// 在该方法中定义核心算法骨架，具体的实现步骤延迟到子类中去完成。</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span><br><span class="line">        <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 获取请求方式</span></span><br><span class="line">        <span class="comment">// 这个请求方式最终可能是：&quot;&quot;</span></span><br><span class="line">        <span class="comment">// 注意：request.getMethod()方法获取的是请求方式，可能是七种之一：</span></span><br><span class="line">        <span class="comment">// GET POST PUT DELETE HEAD OPTIONS TRACE</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> req.getMethod();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果请求方式是GET请求，则执行doGet方法。</span></span><br><span class="line">        <span class="keyword">if</span> (method.equals(METHOD_GET)) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">lastModified</span> <span class="operator">=</span> getLastModified(req);</span><br><span class="line">            <span class="keyword">if</span> (lastModified == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// servlet doesn&#x27;t support if-modified-since, no reason</span></span><br><span class="line">                <span class="comment">// to go through further expensive logic</span></span><br><span class="line">                doGet(req, resp);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">long</span> ifModifiedSince;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ifModifiedSince = req.getDateHeader(HEADER_IFMODSINCE);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IllegalArgumentException iae) &#123;</span><br><span class="line">                    <span class="comment">// Invalid date header - proceed as if none was set</span></span><br><span class="line">                    ifModifiedSince = -<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (ifModifiedSince &lt; (lastModified / <span class="number">1000</span> * <span class="number">1000</span>)) &#123;</span><br><span class="line">                    <span class="comment">// If the servlet mod time is later, call doGet()</span></span><br><span class="line">                    <span class="comment">// Round down to the nearest second for a proper compare</span></span><br><span class="line">                    <span class="comment">// A ifModifiedSince of -1 will always be less</span></span><br><span class="line">                    maybeSetLastModified(resp, lastModified);</span><br><span class="line">                    doGet(req, resp);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_HEAD)) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">lastModified</span> <span class="operator">=</span> getLastModified(req);</span><br><span class="line">            maybeSetLastModified(resp, lastModified);</span><br><span class="line">            doHead(req, resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_POST)) &#123;</span><br><span class="line">            <span class="comment">// 如果请求方式是POST请求，则执行doPost方法。</span></span><br><span class="line">            doPost(req, resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_PUT)) &#123;</span><br><span class="line">            doPut(req, resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_DELETE)) &#123;</span><br><span class="line">            doDelete(req, resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_OPTIONS)) &#123;</span><br><span class="line">            doOptions(req,resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_TRACE)) &#123;</span><br><span class="line">            doTrace(req,resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            <span class="comment">// Note that this means NO servlet supports whatever</span></span><br><span class="line">            <span class="comment">// method was requested, anywhere on this server.</span></span><br><span class="line">            <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">errMsg</span> <span class="operator">=</span> lStrings.getString(<span class="string">&quot;http.method_not_implemented&quot;</span>);</span><br><span class="line">            Object[] errArgs = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">1</span>];</span><br><span class="line">            errArgs[<span class="number">0</span>] = method;</span><br><span class="line">            errMsg = MessageFormat.format(errMsg, errArgs);</span><br><span class="line"></span><br><span class="line">            resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span><br><span class="line">        <span class="keyword">throws</span> ServletException, IOException&#123;</span><br><span class="line">        <span class="comment">// 报405错误</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> lStrings.getString(<span class="string">&quot;http.method_get_not_supported&quot;</span>);</span><br><span class="line">        sendMethodNotAllowed(req, resp, msg);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span><br><span class="line">        <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 报405错误</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> lStrings.getString(<span class="string">&quot;http.method_post_not_supported&quot;</span>);</span><br><span class="line">        sendMethodNotAllowed(req, resp, msg);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">通过以上源代码分析：</span></span><br><span class="line"><span class="comment">假设前端发送的请求是get请求，后端程序员重写的方法是doPost</span></span><br><span class="line"><span class="comment">假设前端发送的请求是post请求，后端程序员重写的方法是doGet</span></span><br><span class="line"><span class="comment">会发生什么呢？</span></span><br><span class="line"><span class="comment">发生405这样的一个错误。</span></span><br><span class="line"><span class="comment">405表示前端的错误，发送的请求方式不对。和服务器不一致。不是服务器需要的请求方式。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">通过以上源代码可以知道：只要HttpServlet类中的doGet方法或doPost方法执行了，必然405.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">怎么避免405的错误呢？</span></span><br><span class="line"><span class="comment">后端重写了doGet方法，前端一定要发get请求。</span></span><br><span class="line"><span class="comment">后端重写了doPost方法，前端一定要发post请求。</span></span><br><span class="line"><span class="comment">这样可以避免405错误。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">这种前端到底需要发什么样的请求，其实应该后端说了算。后端让发什么方式，前端就得发什么方式。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">有的人，你会看到为了避免405错误，在Servlet类当中，将doGet和doPost方法都进行了重写。</span></span><br><span class="line"><span class="comment">这样，确实可以避免405的发生，但是不建议，405错误还是有用的。该报错的时候就应该让他报错。</span></span><br><span class="line"><span class="comment">如果你要是同时重写了doGet和doPost，那还不如你直接重写service方法好了。这样代码还能</span></span><br><span class="line"><span class="comment">少写一点。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li><p>我们编写的HelloServlet直接继承HttpServlet，直接重写HttpServlet类中的service()方法行吗？</p><ul><li>可以，只不过享受不到405错误。享受不到HTTP协议专属的东西。</li></ul></li><li><p>到今天我们终于得到了最终的一个Servlet类的开发步骤：</p><ul><li>第一步：编写一个Servlet类，直接继承HttpServlet</li><li>第二步：重写doGet方法或者重写doPost方法，到底重写谁，javaweb程序员说了算。</li><li>第三步：将Servlet类配置到web.xml文件当中。</li><li>第四步：准备前端的页面（form表单），form表单中指定请求路径即可。</li></ul></li></ul>]]></content>
    
    
    <summary type="html">HttpServlet类是专门为HTTP协议准备的。比GenericServlet更加适合HTTP协议下的开发。</summary>
    
    
    
    <category term="Java 学习" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/JavaEE/"/>
    
    
    <category term="Java 学习" scheme="http://example.com/tags/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>6. 模板方法设计模式</title>
    <link href="http://example.com/2022/09/13/JavaEE/6.%20%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2022/09/13/JavaEE/6.%20%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-09-13T14:52:52.568Z</published>
    <updated>2022-09-14T09:39:38.521Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-什么是设计模式"><a href="#1-什么是设计模式" class="headerlink" title="1. 什么是设计模式?"></a>1. 什么是设计模式?</h1><blockquote><p>  某个问题的固定的解决方案。(可以被重复使用。) 也就是解决某个问题的固定套路….</p></blockquote><p><strong>你知道哪些设计模式？</strong></p><ul><li>GoF设计模式：<ul><li>通常我们所说的23种设计模式。（Gang of Four：4人组提出的设计模式）</li><li>单例模式</li><li>工厂模式</li><li>代理模式</li><li>门面模式</li><li>责任链设计模式</li><li>观察者模式</li><li>模板方法设计模式</li><li>…..</li></ul></li><li>JavaEE设计模式：<ul><li>DAO</li><li>DTO</li><li>VO</li><li>PO</li><li>pojo</li><li>….</li></ul></li><li>….</li></ul><h1 id="2-什么是模板方法设计模式"><a href="#2-什么是模板方法设计模式" class="headerlink" title="2. 什么是模板方法设计模式"></a>2. 什么是模板方法设计模式</h1><p>模板方法模式（Template Method Pattern）：定义一个操作中的算法的框架， 而将一些步骤延迟到子类中。 使得子类可以不改 变一个算法的结构即可重定义该算法的某些特定步骤。</p><p>说人话：父类模板方法定义不变的流程，子类重写流程中的方法。</p><h1 id="3-模板方法的实现"><a href="#3-模板方法的实现" class="headerlink" title="3. 模板方法的实现"></a>3. 模板方法的实现</h1><p><strong>Person.java (模板类)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.template;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">// 开始一天(定义为final类,让子类必须运行此方法,属于模板方法定义的框架)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">day</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 调用基本方法，完成固定逻辑</span></span><br><span class="line">        getUp();</span><br><span class="line">        eat();</span><br><span class="line">        doMake();</span><br><span class="line">        sleep();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 起床</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUp</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Get up&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 吃饭</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Eat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 做事情 (学生和老师做事情不一样,所以将此方法抽象为模板方法,让子类自己来实现)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">doMake</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 睡觉</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Sleep&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Teacher.java (实现类)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.template;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">// 实现 Person 的模板类, 老师的任务是Teach</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doMake</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Teach&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Student.java (实现类)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.template;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">// 实现 Person 的模板类, 学生的任务是Study</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doMake</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Study&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-优缺点"><a href="#4-优缺点" class="headerlink" title="4. 优缺点"></a>4. 优缺点</h1><p><strong>优点</strong></p><ol><li><p>封装不变部分， 扩展可变部分， 把认为是不变部分的算法封装到父类实现， 而可变部分的则可以通过继承来继续扩展。</p></li><li><p>提取公共部分代码， 便于维护</p></li><li><p>行为由父类控制， 子类实现， 基本方法是由子类实现的， 因此子类可以通过扩展的方式增加相应的功能， 符合开闭原则。</p></li></ol><p><strong>缺点</strong></p><ol><li><p>子类执行的结果影响了父类的结果，这和我们平时设计习惯颠倒了，在复杂项目中，会带来阅读上的难度。</p></li><li><p>可能引起子类泛滥和为了继承而继承的问题</p></li></ol>]]></content>
    
    
    <summary type="html">某个问题的固定的解决方案。(可以被重复使用。) 也就是解决某个问题的固定套路....</summary>
    
    
    
    <category term="Java 学习" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/JavaEE/"/>
    
    
    <category term="Java 学习" scheme="http://example.com/tags/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>5. Http协议</title>
    <link href="http://example.com/2022/09/13/JavaEE/5.%20Http%E5%8D%8F%E8%AE%AE/"/>
    <id>http://example.com/2022/09/13/JavaEE/5.%20Http%E5%8D%8F%E8%AE%AE/</id>
    <published>2022-09-13T14:45:58.834Z</published>
    <updated>2022-09-13T15:15:45.502Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-什么是协议"><a href="#1-什么是协议" class="headerlink" title="1. 什么是协议?"></a>1. 什么是协议?</h1><ul><li>协议实际上是某些人，或者某些组织提前制定好的一套规范，大家都按照这个规范来，这样可以做到沟通无障碍。</li><li>协议就是一套规范，就是一套标准。由其他人或其他组织来负责制定的。</li><li>我说的话你能听懂，你说的话，我也能听懂，这说明我们之间是有一套规范的，一套协议的，这套协议就是：中国普通话协议。我们都遵守这套协议，我们之间就可以沟通无障碍。</li></ul><h1 id="2-什么是Http协议"><a href="#2-什么是Http协议" class="headerlink" title="2. 什么是Http协议?"></a>2. 什么是Http协议?</h1><ul><li>HTTP协议：是W3C制定的一种超文本传输协议。（通信协议：发送消息的模板提前被制定好。）</li><li>W3C：<ul><li>万维网联盟组织</li><li>负责制定标准的：HTTP HTML4.0 HTML5 XML DOM等规范都是W3C制定的。</li><li>万维网之父：蒂姆·伯纳斯·李</li></ul></li><li>什么是超文本？<ul><li>超文本说的就是：不是普通文本，比如流媒体：声音、视频、图片等。</li><li>HTTP协议支持：不但可以传送普通字符串，同样支持传递声音、视频、图片等流媒体信息。</li></ul></li><li>这种协议游走在B和S之间。B向S发数据要遵循HTTP协议。S向B发数据同样需要遵循HTTP协议。这样B和S才能解耦合。</li><li>什么是解耦合？<ul><li>B不依赖S。</li><li>S也不依赖B。</li></ul></li><li>B&#x2F;S表示：B&#x2F;S结构的系统（浏览器访问WEB服务器的系统）</li><li>浏览器   向   WEB服务器发送数据，叫做：请求（request)</li><li>WEB服务器   向   浏览器发送数据，叫做：响应（response）</li><li>HTTP协议包括：<ul><li>请求协议<ul><li>浏览器  向   WEB服务器发送数据的时候，这个发送的数据需要遵循一套标准，这套标准中规定了发送的数据具体格式。</li></ul></li><li>响应协议<ul><li>WEB服务器  向  浏览器发送数据的时候，这个发送的数据需要遵循一套标准，这套标准中规定了发送的数据具体格式。</li></ul></li></ul></li><li>HTTP协议就是提前制定好的一种消息模板。<ul><li>不管你是哪个品牌的浏览器，都是这么发。</li><li>不管你是哪个品牌的WEB服务器，都是这么发。</li><li>FF浏览器  可以向 Tomcat发送请求，也可以向Jetty服务器发送请求。浏览器不依赖具体的服务器品牌。</li><li>WEB服务器也不依赖具体的浏览器品牌。可以是FF浏览器，也可以是Chrome浏览器，可以是IE，都行。</li></ul></li></ul><h1 id="3-Http的请求协议-B-gt-S"><a href="#3-Http的请求协议-B-gt-S" class="headerlink" title="3. Http的请求协议 (B -&gt; S)"></a>3. Http的请求协议 (B -&gt; S)</h1><ul><li><p>HTTP的请求协议包括：4部分</p><ul><li>请求行</li><li>请求头</li><li>空白行</li><li>请求体</li></ul></li><li><p>HTTP请求协议的具体报文：GET请求</p>  <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">GET <span class="regexp">/servlet05/g</span>etServlet?username=lucy&amp;userpwd=<span class="number">1111</span> HTTP/<span class="number">1.1</span>                           请求行</span><br><span class="line">Host: localhost:<span class="number">8080</span>                                                                    请求头</span><br><span class="line">Connection: keep-alive</span><br><span class="line">sec-ch-ua: <span class="string">&quot;Google Chrome&quot;</span>;v=<span class="string">&quot;95&quot;</span>, <span class="string">&quot;Chromium&quot;</span>;v=<span class="string">&quot;95&quot;</span>, <span class="string">&quot;;Not A Brand&quot;</span>;v=<span class="string">&quot;99&quot;</span></span><br><span class="line">sec-ch-ua-mobile: ?<span class="number">0</span></span><br><span class="line">sec-ch-ua-platform: <span class="string">&quot;Windows&quot;</span></span><br><span class="line">Upgrade-Insecure-Requests: <span class="number">1</span></span><br><span class="line">User-Agent: Mozilla<span class="regexp">/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/</span><span class="number">537.36</span> (KHTML, like Gecko) Chrome<span class="regexp">/95.0.4638.54 Safari/</span><span class="number">537.36</span></span><br><span class="line">Accept: text<span class="regexp">/html,application/</span>xhtml+xml,application<span class="regexp">/xml;q=0.9,image/</span>avif,image<span class="regexp">/webp,image/</span>apng,*<span class="regexp">/*;q=0.8,application/</span>signed-exchange;v=b3;q=<span class="number">0.9</span></span><br><span class="line">Sec-Fetch-Site: same-origin</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-User: ?<span class="number">1</span></span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Referer: http:<span class="regexp">//</span>localhost:<span class="number">8080</span><span class="regexp">/servlet05/i</span>ndex.html</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=<span class="number">0.9</span></span><br><span class="line">                                                                                        空白行</span><br><span class="line">                                                                                        请求体</span><br></pre></td></tr></table></figure></li><li><p>HTTP请求协议的具体报文：POST请求</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">POST <span class="regexp">/servlet05/</span>postServlet HTTP/<span class="number">1.1</span>                                                  请求行</span><br><span class="line">Host: localhost:<span class="number">8080</span>                                                                  请求头</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Length: <span class="number">25</span></span><br><span class="line">Cache-Control: max-age=<span class="number">0</span></span><br><span class="line">sec-ch-ua: <span class="string">&quot;Google Chrome&quot;</span>;v=<span class="string">&quot;95&quot;</span>, <span class="string">&quot;Chromium&quot;</span>;v=<span class="string">&quot;95&quot;</span>, <span class="string">&quot;;Not A Brand&quot;</span>;v=<span class="string">&quot;99&quot;</span></span><br><span class="line">sec-ch-ua-mobile: ?<span class="number">0</span></span><br><span class="line">sec-ch-ua-platform: <span class="string">&quot;Windows&quot;</span></span><br><span class="line">Upgrade-Insecure-Requests: <span class="number">1</span></span><br><span class="line">Origin: http:<span class="regexp">//</span>localhost:<span class="number">8080</span></span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">User-Agent: Mozilla<span class="regexp">/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/</span><span class="number">537.36</span> (KHTML, like Gecko) Chrome<span class="regexp">/95.0.4638.54 Safari/</span><span class="number">537.36</span></span><br><span class="line">Accept: text<span class="regexp">/html,application/</span>xhtml+xml,application<span class="regexp">/xml;q=0.9,image/</span>avif,image<span class="regexp">/webp,image/</span>apng,*<span class="regexp">/*;q=0.8,application/</span>signed-exchange;v=b3;q=<span class="number">0.9</span></span><br><span class="line">Sec-Fetch-Site: same-origin</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-User: ?<span class="number">1</span></span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Referer: http:<span class="regexp">//</span>localhost:<span class="number">8080</span><span class="regexp">/servlet05/i</span>ndex.html</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=<span class="number">0.9</span></span><br><span class="line">                                                                                      空白行</span><br><span class="line">username=lisi&amp;userpwd=<span class="number">123</span>                                                             请求体</span><br></pre></td></tr></table></figure></li><li><p>请求行</p><ul><li>包括三部分：<ul><li>第一部分：请求方式（7种）<ul><li>get（常用的）</li><li>post（常用的）</li><li>delete</li><li>put</li><li>head</li><li>options</li><li>trace</li></ul></li><li>第二部分：URI<ul><li>什么是URI？ 统一资源标识符。代表网络中某个资源的名字。但是通过URI是无法定位资源的。</li><li>什么是URL？统一资源定位符。代表网络中某个资源，同时，通过URL是可以定位到该资源的。</li><li>URI和URL什么关系，有什么区别？<ul><li>URL包括URI</li><li><a href="http://localhost:8080/servlet05/index.html">http://localhost:8080/servlet05/index.html</a> 这是URL。</li><li>&#x2F;servlet05&#x2F;index.html 这是URI。</li></ul></li></ul></li><li>第三部分：HTTP协议版本号</li></ul></li></ul></li><li><p>请求头</p><ul><li>请求的主机</li><li>主机的端口</li><li>浏览器信息</li><li>平台信息</li><li>cookie等信息</li><li>….</li></ul></li><li><p>空白行</p><ul><li>空白行是用来区分“请求头”和“请求体”</li></ul></li><li><p>请求体</p><ul><li>向服务器发送的具体数据。</li></ul></li></ul><h1 id="4-HTTP的响应协议（S-–-gt-B）"><a href="#4-HTTP的响应协议（S-–-gt-B）" class="headerlink" title="4. HTTP的响应协议（S –&gt; B）"></a>4. HTTP的响应协议（S –&gt; B）</h1><ul><li><p>HTTP的响应协议包括：4部分</p><ul><li>状态行</li><li>响应头</li><li>空白行</li><li>响应体</li></ul></li><li><p>HTTP响应协议的具体报文：</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 ok                                     状态行</span><br><span class="line">Content-Type: text/html;charset=UTF-8               响应头</span><br><span class="line">Content-Length: 160</span><br><span class="line">Date: Mon, 08 Nov 2021 13:19:32 GMT</span><br><span class="line">Keep-Alive: timeout=20</span><br><span class="line">Connection: keep-alive</span><br><span class="line">                                                    空白行</span><br><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span>                                     响应体</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>from get servlet<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>from get servlet<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>状态行</p><ul><li>三部分组成<ul><li>第一部分：协议版本号（HTTP&#x2F;1.1）</li><li>第二部分：状态码（HTTP协议中规定的响应状态号。不同的响应结果对应不同的号码。）<ul><li>200 表示请求响应成功，正常结束。</li><li>404表示访问的资源不存在，通常是因为要么是你路径写错了，要么是路径写对了，但是服务器中对应的资源并没有启动成功。总之404错误是前端错误。</li><li>405表示前端发送的请求方式与后端请求的处理方式不一致时发生：<ul><li>比如：前端是POST请求，后端的处理方式按照get方式进行处理时，发生405</li><li>比如：前端是GET请求，后端的处理方式按照post方式进行处理时，发生405</li></ul></li><li>500表示服务器端的程序出现了异常。一般会认为是服务器端的错误导致的。</li><li>以4开始的，一般是浏览器端的错误导致的。</li><li>以5开始的，一般是服务器端的错误导致的。</li></ul></li><li>第三部分：状态的描述信息<ul><li>ok 表示正常成功结束。</li><li>not found 表示资源找不到。</li></ul></li></ul></li></ul></li><li><p>响应头：</p><ul><li>响应的内容类型</li><li>响应的内容长度</li><li>响应的时间</li><li>….</li></ul></li><li><p>空白行：</p><ul><li>用来分隔“响应头”和“响应体”的。</li></ul></li><li><p>响应体：</p><ul><li>响应体就是响应的正文，这些内容是一个长的字符串，这个字符串被浏览器渲染，解释并执行，最终展示出效果。</li></ul></li></ul><p><strong>注意</strong></p><ul><li><p>怎么查看的协议内容？</p><ul><li>使用chrome浏览器：F12。然后找到network，通过这个面板可以查看协议的具体内容。</li></ul></li></ul><h1 id="5-GET和POST"><a href="#5-GET和POST" class="headerlink" title="5. GET和POST"></a>5. GET和POST</h1><p><strong>怎么向服务器发送GET请求，怎么向服务器发送POST请求？</strong></p><ul><li>到目前为止，只有一种情况可以发送POST请求：使用form表单，并且form标签中的method属性值为：method&#x3D;”post”。</li><li>其他所有情况一律都是get请求：<ul><li>在浏览器地址栏上直接输入URL，敲回车，属于get请求。</li><li>在浏览器上直接点击超链接，属于get请求。</li><li>使用form表单提交数据时，form标签中没有写method属性，默认就是get</li><li>或者使用form的时候，form标签中method属性值为：method&#x3D;”get”</li><li>….</li></ul></li></ul><p><strong>GET请求和POST请求有什么区别？</strong></p><ul><li>get请求发送数据的时候，数据会挂在URI的后面，并且在URI后面添加一个“?”，”?”后面是数据。这样会导致发送的数据回显在浏览器的地址栏上。（get请求在“请求行”上发送数据）<ul><li><a href="http://localhost:8080/servlet05/getServlet?username=zhangsan&amp;userpwd=1111">http://localhost:8080/servlet05/getServlet?username=zhangsan&amp;userpwd=1111</a></li></ul></li><li>post请求发送数据的时候，在请求体当中发送。不会回显到浏览器的地址栏上。也就是说post发送的数据，在浏览器地址栏上看不到。（post在“请求体”当中发送数据）</li><li>get请求只能发送普通的字符串。并且发送的字符串长度有限制，不同的浏览器限制不同。这个没有明确的规范。</li><li>get请求无法发送大数据量。</li><li>post请求可以发送任何类型的数据，包括普通字符串，流媒体等信息：视频、声音、图片。</li><li>post请求可以发送大数据量，理论上没有长度限制。</li><li>get请求在W3C中是这样说的：get请求比较适合从服务器端获取数据。</li><li>post请求在W3C中是这样说的：post请求比较适合向服务器端传送数据。</li><li>get请求是安全的。get请求是绝对安全的。为什么？因为get请求只是为了从服务器上获取数据。不会对服务器造成威胁。（get本身是安全的，你不要用错了。用错了之后又冤枉人家get不安全，你这样不好（太坏了），那是你自己的问题，不是get请求的问题。）</li><li>post请求是危险的。为什么？因为post请求是向服务器提交数据，如果这些数据通过后门的方式进入到服务器当中，服务器是很危险的。另外post是为了提交数据，所以一般情况下拦截请求的时候，大部分会选择拦截（监听）post请求。</li><li>get请求支持缓存。<ul><li><a href="https://n.sinaimg.cn/finance/590/w240h350/20211101/b40c-b425eb67cabc342ff5b9dc018b4b00cc.jpg">https://n.sinaimg.cn/finance/590/w240h350/20211101/b40c-b425eb67cabc342ff5b9dc018b4b00cc.jpg</a></li><li>任何一个get请求最终的“响应结果”都会被浏览器缓存起来。在浏览器缓存当中：<ul><li>一个get请求的路径a  对应  一个资源。</li><li>一个get请求的路径b  对应  一个资源。</li><li>一个get请求的路径c  对应  一个资源。</li><li>……</li></ul></li><li>实际上，你只要发送get请求，浏览器做的第一件事都是先从本地浏览器缓存中找，找不到的时候才会去服务器上获取。这种缓存机制目的是为了提高用户的体验。</li><li>有没有这样一个需求：我们不希望get请求走缓存，怎么办？怎么避免走缓存？我希望每一次这个get请求都去服务器上找资源，我不想从本地浏览器的缓存中取。<ul><li>只要每一次get请求的请求路径不同即可。</li><li><a href="https://n.sinaimg.cn/finance/590/w240h350/20211101/7cabc342ff5b9dc018b4b00cc.jpg?t=789789787897898">https://n.sinaimg.cn/finance/590/w240h350/20211101/7cabc342ff5b9dc018b4b00cc.jpg?t=789789787897898</a></li><li><a href="https://n.sinaimg.cn/finance/590/w240h350/20211101/7cabc342ff5b9dc018b4b00cc.jpg?t=789789787897899">https://n.sinaimg.cn/finance/590/w240h350/20211101/7cabc342ff5b9dc018b4b00cc.jpg?t=789789787897899</a></li><li><a href="https://n.sinaimg.cn/finance/590/w240h350/20211101/7cabc342ff5b9dc018b4b00cc.jpg?t=%E7%B3%BB%E7%BB%9F%E6%AF%AB%E7%A7%92%E6%95%B0">https://n.sinaimg.cn/finance/590/w240h350/20211101/7cabc342ff5b9dc018b4b00cc.jpg?t=系统毫秒数</a></li><li>怎么解决？可以在路径的后面添加一个每时每刻都在变化的“时间戳”，这样，每一次的请求路径都不一样，浏览器就不走缓存了。</li></ul></li></ul></li><li>post请求不支持缓存。（POST是用来修改服务器端的资源的。）<ul><li>post请求之后，服务器“响应的结果”不会被浏览器缓存起来。因为这个缓存没有意义。</li></ul></li></ul><p><strong>GET请求和POST请求如何选择，什么时候使用GET请求，什么时候使用POST请求？</strong></p><ul><li><p>怎么选择GET请求和POST请求呢？衡量标准是什么呢？你这个请求是想获取服务器端的数据，还是想向服务器发送数据。如果你是想从服务器上获取资源，建议使用GET请求，如果你这个请求是为了向服务器提交数据，建议使用POST请求。</p></li><li><p>大部分的form表单提交，都是post方式，因为form表单中要填写大量的数据，这些数据是收集用户的信息，一般是需要传给服务器，服务器将这些数据保存&#x2F;修改等。</p></li><li><p>如果表单中有敏感信息，还是建议适用post请求，因为get请求会回显敏感信息到浏览器地址栏上。（例如：密码信息）</p></li><li><p>做文件上传，一定是post请求。要传的数据不是普通文本。</p></li><li><p>其他情况都可以使用get请求。</p></li><li><p>不管你是get请求还是post请求，发送的请求数据格式是完全相同的，只不过位置不同，格式都是统一的：</p><ul><li>name&#x3D;value&amp;name&#x3D;value&amp;name&#x3D;value&amp;name&#x3D;value</li><li>name是什么？<ul><li>以form表单为例：form表单中input标签的name。</li></ul></li><li>value是什么？<ul><li>以form表单为例：form表单中input标签的value。</li></ul></li></ul></li></ul>]]></content>
    
    
    <summary type="html">什么是协议？协议实际上是某些人，或者某些组织提前制定好的一套规范，大家都按照这个规范来，这样可以做到沟通无障碍。</summary>
    
    
    
    <category term="Java 学习" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/JavaEE/"/>
    
    
    <category term="Java 学习" scheme="http://example.com/tags/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>4. ServletConfig与ServletContext详解</title>
    <link href="http://example.com/2022/09/13/JavaEE/4.%20ServletConfig%E4%B8%8EServletContext%E8%AF%A6%E8%A7%A3/"/>
    <id>http://example.com/2022/09/13/JavaEE/4.%20ServletConfig%E4%B8%8EServletContext%E8%AF%A6%E8%A7%A3/</id>
    <published>2022-09-13T14:33:36.646Z</published>
    <updated>2022-09-13T15:14:18.146Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-ServletConfig"><a href="#1-ServletConfig" class="headerlink" title="1. ServletConfig"></a>1. ServletConfig</h1><p><strong>什么是ServletConfig?</strong></p><p>ServletConfig是指当前servlet在web.xml文件中的配置信息。ServletConfig对象中封装了<servlet></servlet>标签中的配置信息。（web.xml文件中servlet的配置信息）</p><ul><li><p>一个Servlet对应一个ServletConfig对象。100个Servlet对象则对应100个ServletConfig对象。</p></li><li><p>Servlet对象是Tomcat服务器创建，并且ServletConfig对象也是Tomcat服务器创建。并且默认情况下，他们都是在用户发送第一次请求的时候创建。</p></li><li><p>Tomcat服务器调用Servlet对象的init方法的时候需要传一个ServletConfig对象的参数给init方法。</p></li><li><p>ServletConfig接口的实现类是Tomcat服务器给实现的。（Tomcat服务器说的就是WEB服务器。）</p></li></ul><p><strong>ServletConfig接口有哪些常用的方法？</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getInitParameter</span><span class="params">(String name)</span>; <span class="comment">// 通过初始化参数的name获取value</span></span><br><span class="line"><span class="keyword">public</span> Enumeration&lt;String&gt; <span class="title function_">getInitParameterNames</span><span class="params">()</span>; <span class="comment">// 获取所有的初始化参数的name</span></span><br><span class="line"><span class="keyword">public</span> ServletContext <span class="title function_">getServletContext</span><span class="params">()</span>; <span class="comment">// 获取ServletContext对象</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getServletName</span><span class="params">()</span>; <span class="comment">// 获取Servlet的name</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><p>以上方法在Servlet类当中，都可以使用this去调用。因为GenericServlet实现了ServletConfig接口。</p><h1 id="2-ServletContext"><a href="#2-ServletContext" class="headerlink" title="2. ServletContext"></a>2. ServletContext</h1><p><strong>什么是ServletContext?</strong></p><p>Tomcat服务器中有一个webapps，这个webapps下可以存放webapp，可以存放多个webapp，假设有100个webapp，那么就有100个ServletContext对象。但是，总之，一个应用，一个webapp肯定是只有一个ServletContext对象。ServletContext被称为Servlet上下文对象。（Servlet对象的四周环境对象。）一个ServletContext对象通常对应的是一个web.xml文件。</p><ul><li><p>只要在同一个webapp当中，只要在同一个应用当中，所有的Servlet对象都是共享同一个ServletContext对象的。</p></li><li><p>ServletContext对象在服务器启动阶段创建，在服务器关闭的时候销毁。这就是ServletContext对象的生命周期。ServletContext对象是应用级对象。</p></li><li><p>ServletContext对应显示生活中的什么例子呢？</p><ul><li>一个教室里有多个学生，那么每一个学生就是一个Servlet，这些学生都在同一个教室当中，那么我们可以把这个教室叫做ServletContext对象。那么也就是说放在这个ServletContext对象（环境）当中的数据，在同一个教室当中，物品都是共享的。比如：教室中有一个空调，所有的学生都可以操作。可见，空调是共享的。因为空调放在教室当中。教室就是ServletContext对象。</li></ul></li><li><p>ServletContext是一个接口，Tomcat服务器对ServletContext接口进行了实现。</p><ul><li>ServletContext对象的创建也是Tomcat服务器来完成的。启动webapp的时候创建的。</li></ul></li></ul><p><strong>ServletContext接口中的常用方法</strong></p><ul><li><strong>getInitParameter() 和 getInitParameterNames()</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getInitParameter</span><span class="params">(String name)</span>; <span class="comment">// 通过初始化参数的name获取value</span></span><br><span class="line"><span class="keyword">public</span> Enumeration&lt;String&gt; <span class="title function_">getInitParameterNames</span><span class="params">()</span>; <span class="comment">// 获取所有的初始化参数的name</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--以上两个方法是ServletContext对象的方法，这个方法获取的是什么信息？是以下的配置信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>pageSize<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>10<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>startIndex<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>0<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注意：以上的配置信息属于应用级的配置信息，一般一个项目中共享的配置信息会放到以上的标签当中。--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--如果你的配置信息只是想给某一个servlet作为参考，那么你配置到servlet标签当中即可，使用ServletConfig对象来获取。--&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>getContextPath() 获取应用的根路径</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取应用的根路径（非常重要），因为在java源代码当中有一些地方可能会需要应用的根路径，这个方法可以动态获取应用的根路径</span></span><br><span class="line"><span class="comment">// 在java源码当中，不要将应用的根路径写死，因为你永远都不知道这个应用在最终部署的时候，起一个什么名字。</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getContextPath</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//String contextPath = application.getContextPath();</span></span><br></pre></td></tr></table></figure><ul><li><strong>log() 记录日志</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过ServletContext对象也是可以记录日志的</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">log</span><span class="params">(String message)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">log</span><span class="params">(String message, Throwable t)</span>;</span><br><span class="line"><span class="comment">// 这些日志信息记录到哪里了？</span></span><br><span class="line"><span class="comment">// localhost.2021-11-05.log</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Tomcat服务器的logs目录下都有哪些日志文件？</span></span><br><span class="line"><span class="comment">//catalina.2021-11-05.log 服务器端的java程序运行的控制台信息。</span></span><br><span class="line"><span class="comment">//localhost.2021-11-05.log ServletContext对象的log方法记录的日志信息存储到这个文件中。</span></span><br><span class="line"><span class="comment">//localhost_access_log.2021-11-05.txt 访问日志</span></span><br></pre></td></tr></table></figure><p><strong>应用域 (Servlet中最大的作用域)</strong></p><p>ServletContext对象还有另一个名字：应用域（后面还有其他域，例如：请求域、会话域）</p><p>如果所有的用户共享一份数据，并且这个数据很少的被修改，并且这个数据量很少，可以将这些数据放到ServletContext这个应用域中</p><p><strong>注意</strong></p><p>所有用户共享的数据，如果涉及到修改操作，必然会存在线程并发所带来的安全问题。所以放在ServletContext对象中的数据一般都是只读的。</p><p><strong>相关方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 存（怎么向ServletContext应用域中存数据）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAttribute</span><span class="params">(String name, Object value)</span>; <span class="comment">// map.put(k, v)</span></span><br><span class="line"><span class="comment">// 取（怎么从ServletContext应用域中取数据）</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">getAttribute</span><span class="params">(String name)</span>; <span class="comment">// Object v = map.get(k)</span></span><br><span class="line"><span class="comment">// 删（怎么删除ServletContext应用域中的数据）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeAttribute</span><span class="params">(String name)</span>; <span class="comment">// map.remove(k)</span></span><br></pre></td></tr></table></figure><p>注意：以后我们编写Servlet类的时候，实际上是不会去直接继承GenericServlet类的，因为我们是B&#x2F;S结构的系统，这种系统是基于HTTP超文本传输协议的，在Servlet规范当中，提供了一个类叫做HttpServlet，它是专门为HTTP协议准备的一个Servlet类。我们编写的Servlet类要继承HttpServlet。（HttpServlet是HTTP协议专用的。）使用HttpServlet处理HTTP协议更便捷。但是你需要直到它的继承结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jakarta.servlet.Servlet<span class="comment">//（接口）【爷爷】</span></span><br><span class="line">jakarta.servlet.GenericServlet <span class="keyword">implements</span> <span class="title class_">Servlet</span><span class="comment">//（抽象类）【儿子】</span></span><br><span class="line">jakarta.servlet.http.HttpServlet <span class="keyword">extends</span> <span class="title class_">GenericServlet</span><span class="comment">//（抽象类）【孙子】</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们以后编写的Servlet要继承HttpServlet类。</span></span><br></pre></td></tr></table></figure><p><strong>最后</strong></p><p>向ServletContext应用域中存储数据，实际上等于是将数据存放到缓存cache当中了。</p>]]></content>
    
    
    <summary type="html">什么是ServletConfig?ServletConfig是指当前servlet在web.xml文件中的配置信息。ServletConfig对象中封装了&lt;servlet&gt;&lt;/servlet&gt;标签中的配置信息。（web.xml文件中servlet的配置信息）</summary>
    
    
    
    <category term="Java 学习" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/JavaEE/"/>
    
    
    <category term="Java 学习" scheme="http://example.com/tags/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>3. GenericServlet 源码解析</title>
    <link href="http://example.com/2022/09/12/JavaEE/3.%20GenericServlet%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>http://example.com/2022/09/12/JavaEE/3.%20GenericServlet%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</id>
    <published>2022-09-12T14:34:30.558Z</published>
    <updated>2022-09-13T11:28:00.717Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-为什么会出现-GenericServlet"><a href="#1-为什么会出现-GenericServlet" class="headerlink" title="1. 为什么会出现 GenericServlet"></a>1. 为什么会出现 GenericServlet</h1><p>在我们编写JavaEE程序中,每一个Servlet类都需要直接实现Servlet接口,这样我们就不许实现所有的接口方法,但是其大部分情况下我们只需要使用service方法,对于其他方法是不需要的,就会显得代码过于丑陋,所以就有了 GenericServlet。</p><p><strong>GenericServlet 是用来干什么的?</strong></p><p>为了使得每个业务都可以只实现所需要的方法,就需要GenericServlet从中间适配,就比如手机直接插到220V的电压上，手机直接就报废了。怎么办？可以找一个充电器。这个充电器就是一个适配器。手机连接适配器。适配器连接220V的电压。这样问题就解决了。</p><h1 id="2-如何编写GenericServlet"><a href="#2-如何编写GenericServlet" class="headerlink" title="2. 如何编写GenericServlet"></a>2. 如何编写GenericServlet</h1><p><strong>GenericServlet 的实现过程</strong></p><p>编写一个GenericServlet类，这个类是一个抽象类，其中有一个抽象方法service。</p><ul><li>GenericServlet实现Servlet接口。</li><li>GenericServlet是一个适配器。</li><li>以后编写的所有Servlet类继承GenericServlet，重写service方法即可。</li></ul><p><strong>GenericServlet 改造</strong></p><ul><li><p>思考第一个问题：我提供了一个GenericServlet之后，init方法还会执行吗？</p><ul><li>还会执行。会执行GenericServlet类中的init方法。</li></ul></li><li><p>思考第二个问题：init方法是谁调用的？</p><ul><li>Tomcat服务器调用的。</li></ul></li><li><p>思考第三个问题：init方法中的ServletConfig对象是谁创建的？是谁传过来的？</p><ul><li>都是Tomcat干的。</li><li>Tomcat服务器先创建了ServletConfig对象，然后调用init方法，将ServletConfig对象传给了init方法。</li></ul></li><li><p>思考一下Tomcat服务器伪代码：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tomcat</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">// .....</span></span><br><span class="line">        <span class="comment">// Tomcat服务器伪代码</span></span><br><span class="line">        <span class="comment">// 创建LoginServlet对象（通过反射机制，调用无参数构造方法来实例化LoginServlet对象）</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.bjpowernode.javaweb.servlet.LoginServlet&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> clazz.newInstance();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 向下转型</span></span><br><span class="line">        <span class="type">Servlet</span> <span class="variable">servlet</span> <span class="operator">=</span> (Servlet)obj;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建ServletConfig对象</span></span><br><span class="line">        <span class="comment">// Tomcat服务器负责将ServletConfig对象实例化出来。</span></span><br><span class="line">        <span class="comment">// 多态（Tomcat服务器完全实现了Servlet规范）</span></span><br><span class="line">        <span class="type">ServletConfig</span> <span class="variable">servletConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">org</span>.apache.catalina.core.StandardWrapperFacade();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 调用Servlet的init方法</span></span><br><span class="line">        servlet.init(servletConfig);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 调用Servlet的service方法</span></span><br><span class="line">        <span class="comment">// ....</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对此改造GenericServlet:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">GenericServlet</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span>, ServletConfig, Serializable &#123;</span><br><span class="line">    <span class="comment">// 将 ServletConfig 设置为成员变量,方便其其他方法和子类调用</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> ServletConfig config;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GenericServlet</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInitParameter</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getServletConfig().getInitParameter(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.config;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ServletContext <span class="title function_">getServletContext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getServletConfig().getServletContext();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化 init 将 Tomcat 所实例化的 config 传递给 成员变量 config</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="built_in">this</span>.config = config;</span><br><span class="line">        <span class="built_in">this</span>.init(); <span class="comment">// (重点!!!) 调用下面公开的init方法,给子类重写</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个公开的 init() 方法,可以允许子类重写这个方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest var1, ServletResponse var2)</span> <span class="keyword">throws</span> ServletException, IOException;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意 :</strong>  GenericServlet 方法已经被 jakarta 实现,不需要我们自己手写,并且Oracle 已经为 GenericServlet 实现了更好的子类,我们可能在使用过程中直接调用那些子类。</p>]]></content>
    
    
    <summary type="html">在我们编写JavaEE程序中,每一个Servlet类都需要直接实现Servlet接口,这样我们就不许实现所有的接口方法,但是其大部分情况下我们只需要使用service方法,对于其他方法是不需要的,就会显得代码过于丑陋,所以就有了 GenericServlet。</summary>
    
    
    
    <category term="Java 学习" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/JavaEE/"/>
    
    
    <category term="Java 学习" scheme="http://example.com/tags/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>2. Servlet的生命周期</title>
    <link href="http://example.com/2022/09/12/JavaEE/2.%20Servlet%E7%9A%84%E5%A3%B0%E6%98%8E%E5%91%A8%E6%9C%9F/"/>
    <id>http://example.com/2022/09/12/JavaEE/2.%20Servlet%E7%9A%84%E5%A3%B0%E6%98%8E%E5%91%A8%E6%9C%9F/</id>
    <published>2022-09-12T09:06:10.859Z</published>
    <updated>2022-09-12T14:55:35.981Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-什么是Servlet的生命周期"><a href="#1-什么是Servlet的生命周期" class="headerlink" title="1. 什么是Servlet的生命周期"></a>1. 什么是Servlet的生命周期</h1><ul><li>Servlet对象什么时候被创建。</li><li>Servlet对象什么时候被销毁。</li><li>Servlet对象创建了几个？</li><li>Servlet对象的生命周期表示：一个Servlet对象从出生在最后的死亡，整个过程是怎样的。</li></ul><h1 id="2-Servlet对象是由谁来维护的"><a href="#2-Servlet对象是由谁来维护的" class="headerlink" title="2. Servlet对象是由谁来维护的"></a>2. Servlet对象是由谁来维护的</h1><ul><li>Servlet对象的创建，对象上方法的调用，对象最终的销毁，Javaweb程序员是无权干预的。</li><li>Servlet对象的生命周期是由Tomcat服务器（WEB Server）全权负责的。</li><li>Tomcat服务器通常我们又称为：WEB容器。（这个叫法你要知道【WEB Container】）</li><li>WEB容器来管理Servlet对象的死活。</li></ul><h1 id="3-Servlet-接口的方法详解"><a href="#3-Servlet-接口的方法详解" class="headerlink" title="3. Servlet 接口的方法详解"></a>3. Servlet 接口的方法详解</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoServlet</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 无参构造方法,只会执行一次</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DemoServlet</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// init方法 只会执行一次</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// destroy方法 只会执行一次</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;<span class="keyword">return</span> <span class="literal">null</span>;&#125;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;<span class="keyword">return</span> <span class="literal">null</span>;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>在用户第一次发送请求的时候, 便会实例化Servlet,执行无参数的构造方法</p></li><li><p>在实例化对象被创建出来之后便会执行对象中的init方法,且只会调用这一次(init 方法在执行的时候,对象已经存在了)</p></li><li><p>用户在发送请求的时候,init方法执行之后,Tomcat服务器会马上执行service方法(之后的第二次第三次第四次…请求会只执行servlet方法) <strong>这说明:</strong></p><ul><li>第一：Servlet对象是单例的（单实例的。但是要注意：Servlet对象是单实例的，但是Servlet类并不符合单例模式。我们称之为假单例。之所以单例是因为Servlet对象的创建我们javaweb程序员管不着，这个对象的创建只能是Tomcat来说了算，Tomcat只创建了一个，所以导致了单例，但是属于假单例。真单例模式，构造方法是私有化的。）</li><li>第二：无参数构造方法、init方法只在第一次用户发送请求的时候执行。也就是说无参数构造方法只执行一次。init方法也只被Tomcat服务器调用一次。</li><li>第三：只要用户发送一次请求：service方法必然会被Tomcat服务器调用一次。发送100次请求，service方法会被调用100次。</li></ul></li><li><p>用户在关闭服务器的时候,会执行destroy方法,且在执行destory方法时,对象还在,执行过后再销毁对象</p></li><li><p>Servlet对象更像一个人的一生：</p><ul><li>Servlet的无参数构造方法执行：标志着你出生了。</li><li>Servlet对象的init方法的执行：标志着你正在接受教育。</li><li>Servlet对象的service方法的执行：标志着你已经开始工作了，已经开始为人类提供服务了。</li><li>Servlet对象的destroy方法的执行：标志着临终。有什么遗言，抓紧的。要不然，来不及了。</li></ul></li></ul><p><strong>关于Servlet类中方法的调用次数？</strong></p><ul><li>构造方法只执行一次。</li><li>init方法只执行一次。</li><li>service方法：用户发送一次请求则执行一次，发送N次请求则执行N次。</li><li>destroy方法只执行一次。</li></ul><p><strong>当我们Servlet类中编写一个有参数的构造方法，如果没有手动编写无参数构造方法会出现什么问题？</strong></p><ul><li>报错了：500错误。</li><li>注意：500是一个HTTP协议的错误状态码。</li><li>500一般情况下是因为服务器端的Java程序出现了异常。（服务器端的错误都是500错误：服务器内部错误。）</li><li>如果没有无参数的构造方法，会导致出现500错误，无法实例化Servlet对象。</li><li>所以，一定要注意：在Servlet开发当中，不建议程序员来定义构造方法，因为定义不当，一不小心就会导致无法实例化Servlet对象。</li></ul><p><strong>思考：Servlet的无参数构造方法是在对象第一次创建的时候执行，并且只执行一次。init方法也是在对象第一次创建的时候执行，并且只执行一次。那么这个无参数构造方法可以代替掉init方法吗？</strong></p><ul><li>不能。</li><li>Servlet规范中有要求，作为javaweb程序员，编写Servlet类的时候，不建议手动编写构造方法，因为编写构造方法，很容易让无参数构造方法消失，这个操作可能会导致Servlet对象无法实例化。所以init方法是有存在的必要的。</li></ul><p><strong>init、service、destroy方法中使用最多的是哪个方法？</strong></p><ul><li>使用最多就是service方法，service方法是一定要实现的，因为service方法是处理用户请求的核心方法。</li><li>什么时候使用init方法呢？<ul><li>init方法很少用。</li><li>通常在init方法当中做初始化操作，并且这个初始化操作只需要执行一次。例如：初始化数据库连接池，初始化线程池….</li></ul></li><li>什么时候使用destroy方法呢？<ul><li>destroy方法也很少用。</li><li>通常在destroy方法当中，进行资源的关闭。马上对象要被销毁了，还有什么没有关闭的，抓紧时间关闭资源。还有什么资源没保存的，抓紧时间保存一下。</li></ul></li></ul>]]></content>
    
    
    <summary type="html">对 Servlet 的生命周期详解</summary>
    
    
    
    <category term="Java 学习" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/JavaEE/"/>
    
    
    <category term="Java 学习" scheme="http://example.com/tags/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>1. JavaEE 介绍</title>
    <link href="http://example.com/2022/09/12/JavaEE/1.%20JavaEE%20%E4%BB%8B%E7%BB%8D/"/>
    <id>http://example.com/2022/09/12/JavaEE/1.%20JavaEE%20%E4%BB%8B%E7%BB%8D/</id>
    <published>2022-09-12T08:38:24.620Z</published>
    <updated>2022-09-12T14:55:40.613Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-什么是JavaEE"><a href="#1-什么是JavaEE" class="headerlink" title="1. 什么是JavaEE"></a>1. 什么是JavaEE</h1><p>Java 包括三大板块,分别为JavaSE JavaEE JavaME 其中JavaSE为Java标准版,是别人写好的一套类库,只不过这个类库是标准类库,不管是今后学习JavaME还是JavaEE,JavaSE一定是基础,必须要先行学习,而JavaME是Java微型版,主要用于机顶盒内核程序，吸尘器内核程序，电冰箱内核程序，电饭煲内核程序,JavaEE是Java企业版,也是别人写好的一套类库，只不过这套类库可以帮助我们完成企业级项目的开发，专门为企业内部提供解决方案的一套（多套）类库。<strong>Java比较火爆的就是这个JavaEE方向。</strong></p><h1 id="2-关于JavaEE的版本"><a href="#2-关于JavaEE的版本" class="headerlink" title="2. 关于JavaEE的版本"></a>2. 关于JavaEE的版本</h1><ul><li>JavaEE目前最高版本是 JavaEE8</li><li>JavaEE被Oracle捐献了，Oracle将JavaEE规范捐献给Apache了。</li><li>Apache把JavaEE换名了，以后不叫JavaEE了，以后叫做 jakarta EE。</li><li>以后没有JavaEE了。以后都叫做Jakarta EE。</li><li>JavaEE8版本升级之后的”JavaEE 9”，不再是”JavaEE9”这个名字了，叫做JakartaEE9</li><li>JavaEE8的时候对应的Servlet类名是：javax.servlet.Servlet</li><li>JakartaEE9的时候对应的Servlet类名是：jakarta.servlet.Servlet （包名都换了）</li><li>如果你之前的项目还是在使用javax.servlet.Servlet，那么你的项目无法直接部署到Tomcat10+版本上。你只能部署到Tomcat9-版本上。在Tomcat9以及Tomcat9之前的版本中还是能够识别javax.servlet这个包。</li></ul><h1 id="3-关于系统架构"><a href="#3-关于系统架构" class="headerlink" title="3. 关于系统架构"></a>3. 关于系统架构</h1><p>系统架构包括什么形式？</p><ul><li>C&#x2F;S架构</li><li>B&#x2F;S架构</li></ul><p>C&#x2F;S架构</p><ul><li>Client &#x2F; Server（客户端 &#x2F; 服务器）</li></ul><p>B&#x2F;S架构</p><ul><li>B&#x2F;S（Browser &#x2F; Server，浏览器 &#x2F; 服务器）</li></ul><h1 id="4-IDEA创建开发JavaWeb程序"><a href="#4-IDEA创建开发JavaWeb程序" class="headerlink" title="4. IDEA创建开发JavaWeb程序"></a>4. IDEA创建开发JavaWeb程序</h1><ul><li><p>集成开发工具很多，其中目前使用比较多的是：</p><ul><li>IntelliJ IDEA（这个居多，IDEA在提示功能方面要强于Eclipse，也就是说IDEA使用起来比Eclipse更加智能，更好用。JetBrain公司开发的。收费的。）</li><li>Eclipse（这个少一些），Eclipse目前还是有团队使用，只不过处于减少的趋势，自己从事工作之后，可能会遇到。Eclipse是IBM团队开发的。Eclipse寓意是“日食”。“日食”表示将太阳吃掉。太阳是SUN。IBM团队开发Eclipse的寓意是吞并SUN公司，但是2009年的时候SUN公司被Oracle公司并购了。IBM并没有成功并购SUN公司。</li></ul></li><li><p>使用IDEA集成开发工具开发Servlet</p><ul><li>第一步：New Project（我比较习惯先创建一个Empty Project【空工程】，然后在空工程下新建Module【模块】，这不是必须的，只是一种习惯，你可以直接新建非空的Project），这个Empty Project起名为：javaweb（不是必须的，只是一个名字而已。一般情况下新建的Project的名字最好和目录的名字一致。）</li><li>第二步：新建模块（File –&gt; new –&gt; Module…）<ul><li>这里新建的是一个普通的JavaSE模块（这里先不要新建Java Enterprise模块）</li><li>这个Module自动会被放在javaweb的project下面。</li><li>这个Module起名：servlet01</li></ul></li><li>第三步：让Module变成JavaEE的模块。（让Module变成webapp的模块。符合webapp规范。符合Servlet规范的Module）<ul><li>在Module上点击右键：Add Framework Support…（添加框架支持）</li><li>在弹出的窗口中，选择Web Application（选择的是webapp的支持）</li><li>选择了这个webapp的支持之后，IDEA会自动给你生成一个符合Servlet规范的webpp目录结构。</li><li><strong>重点，需要注意的：在IDEA工具中根据Web Application模板生成的目录中有一个web目录，这个目录就代表webapp的根</strong></li></ul></li><li>第四步（非必须）：根据Web Application生成的资源中有index.jsp文件，这里我选择删除这个index.jsp文件。</li><li>第五步：编写Servlet（StudentServlet）<ul><li>class StudentServlet implements Servlet</li><li>这个时候发现Servlet.class文件没有。怎么办？将CATALINA_HOME&#x2F;lib&#x2F;servlet-api.jar和jsp-api.jar添加到classpath当中（这里的classpath说的是IDEA的classpath）<ul><li>File –&gt; Project Structrue –&gt; Modules –&gt; + 加号 –&gt; Add JARS….</li></ul></li><li>实现jakarta.servlet.Servlet接口中的5个方法。</li></ul></li><li>第六步：在Servlet当中的service方法中编写业务代码（我们这里连接数据库了。）</li><li>第七步：在WEB-INF目录下新建了一个子目录：lib（这个目录名可不能随意，必须是全部小写的lib），并且将连接数据库的驱动jar包放到lib目录下。</li><li>第八步：在web.xml文件中完成StudentServlet类的注册。（请求路径和Servlet之间对应起来）</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;web-app xmlns=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="line">         xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="line">         version=<span class="string">&quot;4.0&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;studentServlet&lt;/servlet-name&gt;</span><br><span class="line">        &lt;servlet-class&gt;com.bjpowernode.javaweb.servlet.StudentServlet&lt;/servlet-class&gt;</span><br><span class="line">    &lt;/servlet&gt;</span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;studentServlet&lt;/servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/servlet/student&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure><p>第九步：给一个html页面，在HTML页面中编写一个超链接，用户点击这个超链接，发送请求，Tomcat执行后台的StudentServlet。</p><ul><li><p>student.html</p></li><li><p>这个文件不能放到WEB-INF目录里面，只能放到WEB-INF目录外面。</p></li><li><p>student.html文件的内容</p></li><li><pre><code class="html">  &lt;!DOCTYPE html&gt;  &lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;      &lt;meta charset=&quot;UTF-8&quot;&gt;      &lt;title&gt;student page&lt;/title&gt;  &lt;/head&gt;  &lt;body&gt;      &lt;!--这里的项目名是 /xmm ，无法动态获取，先写死--&gt;      &lt;a href=&quot;/xmm/servlet/student&quot;&gt;student list&lt;/a&gt;  &lt;/body&gt;  &lt;/html&gt;</code></pre></li><li><p>第十步：让IDEA工具去关联Tomcat服务器。关联的过程当中将webapp部署到Tomcat服务器当中。</p><ul><li>IDEA工具右上角，绿色小锤子右边有一个：Add Configuration</li><li>左上角加号，点击Tomcat Server –&gt; local</li><li>在弹出的界面中设置服务器Server的参数（基本上不用动）</li><li>在当前窗口中有一个Deployment（点击这个用来部署webapp），继续点击加号，部署即可。</li><li>修改 Application context为：&#x2F;xmm</li></ul></li><li><p>第十一步：启动Tomcat服务器</p><ul><li>在右上角有绿色的箭头，或者绿色的小虫子，点击这个绿色的小虫子，可以采用debug的模式启动Tomcat服务器。</li><li>我们开发中建议适用debug模式启动Tomcat</li></ul></li><li><p>第十二步：打开浏览器，在浏览器地址栏上输入：<a href="http://localhost:8080/xmm/student.html">http://localhost:8080/xmm/student.html</a></p></li></ul>]]></content>
    
    
    <summary type="html">Java 包括三大板块,分别为JavaSE JavaEE JavaME 其中JavaSE为Java标准版,是别人写好的一套类库,只不过这个类库是标准类库,不管是今后学习JavaME还是JavaEE,JavaSE一定是基础,必须要先行学习,而JavaME是Java微型版,主要用于机顶盒内核程序，吸尘器内核程序，电冰箱内核程序，电饭煲内核程序,JavaEE是Java企业版,也是别人写好的一套类库，只不过这套类库可以帮助我们完成企业级项目的开发，专门为企业内部提供解决方案的一套（多套）类库。Java比较火爆的就是这个JavaEE方向。</summary>
    
    
    
    <category term="Java 学习" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/JavaEE/"/>
    
    
    <category term="Java 学习" scheme="http://example.com/tags/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/tags/JavaEE/"/>
    
  </entry>
  
</feed>
