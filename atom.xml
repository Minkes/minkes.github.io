<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>安之</title>
  
  <subtitle>临渊羡鱼不如退而结网</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-09-24T15:54:15.697Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>MiK</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>17. Listener监听器</title>
    <link href="http://example.com/2022/09/24/JavaEE/17.%20Listener%E7%9B%91%E5%90%AC%E5%99%A8/"/>
    <id>http://example.com/2022/09/24/JavaEE/17.%20Listener%E7%9B%91%E5%90%AC%E5%99%A8/</id>
    <published>2022-09-24T15:52:00.402Z</published>
    <updated>2022-09-24T15:54:15.697Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Listener监听器"><a href="#Listener监听器" class="headerlink" title="Listener监听器"></a>Listener监听器</h1><ul><li><p>什么是监听器？</p><ul><li>监听器是Servlet规范中的一员。就像Filter一样。Filter也是Servlet规范中的一员。</li><li>在Servlet中，所有的监听器接口都是以“Listener”结尾。</li></ul></li><li><p>监听器有什么用？</p><ul><li>监听器实际上是Servlet规范留给我们javaweb程序员的特殊时机。</li><li>特殊的时刻如果想执行这段代码，你需要想到使用对应的监听器。</li></ul></li><li><p>Servlet规范中提供了哪些监听器？</p><ul><li>jakarta.servlet包下：<ul><li>ServletContextListener</li><li>ServletContextAttributeListener</li><li>ServletRequestListener</li><li>ServletRequestAttributeListener</li></ul></li><li>jakarta.servlet.http包下：<ul><li>HttpSessionListener</li><li>HttpSessionAttributeListener<ul><li>该监听器需要使用@WebListener注解进行标注。</li><li>该监听器监听的是什么？是session域中数据的变化。只要数据变化，则执行相应的方法。主要监测点在session域对象上。</li></ul></li><li>HttpSessionBindingListener<ul><li>该监听器不需要使用@WebListener进行标注。</li><li>假设User类实现了该监听器，那么User对象在被放入session的时候触发bind事件，User对象从session中删除的时候，触发unbind事件。</li><li>假设Customer类没有实现该监听器，那么Customer对象放入session或者从session删除的时候，不会触发bind和unbind事件。</li></ul></li><li>HttpSessionIdListener<ul><li>session的id发生改变的时候，监听器中的唯一一个方法就会被调用。</li></ul></li><li>HttpSessionActivationListener<ul><li>监听session对象的钝化和活化的。</li><li>钝化：session对象从内存存储到硬盘文件。</li><li>活化：从硬盘文件把session恢复到内存。</li></ul></li></ul></li></ul></li><li><p>实现一个监听器的步骤：以ServletContextListener为例。</p><ul><li><p>第一步：编写一个类实现ServletContextListener接口。并且实现里面的方法。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">contextInitialized</span><span class="params">(ServletContextEvent event)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">contextDestroyed</span><span class="params">(ServletContextEvent event)</span></span><br></pre></td></tr></table></figure></li><li><p>第二步：在web.xml文件中对ServletContextListener进行配置，如下：</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.bjpowernode.javaweb.listener.MyServletContextListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>当然，第二步也可以不使用配置文件，也可以用注解，例如：@WebListener</li></ul></li></ul></li><li><p>注意：所有监听器中的方法都是不需要javaweb程序员调用的，由服务器来负责调用？什么时候被调用呢？</p><ul><li>当某个特殊的事件发生（特殊的事件发生其实就是某个时机到了。）之后，被web服务器自动调用。</li></ul></li><li><p>思考一个业务场景：</p><ul><li>请编写一个功能，记录该网站实时的在线用户的个数。</li><li>我们可以通过服务器端有没有分配session对象，因为一个session代表了一个用户。有一个session就代表有一个用户。如果你采用这种逻辑去实现的话，session有多少个，在线用户就有多少个。这种方式的话：HttpSessionListener够用了。session对象只要新建，则count++，然后将count存储到ServletContext域当中，在页面展示在线人数即可。</li><li>业务发生改变了，只统计登录的用户的在线数量，这个该怎么办？<ul><li>session.setAttribute(“user”, userObj); </li><li>用户登录的标志是什么？session中曾经存储过User类型的对象。那么这个时候可以让User类型的对象实现HttpSessionBindingListener监听器，只要User类型对象存储到session域中，则count++，然后将count++存储到ServletContext对象中。页面展示在线人数即可。</li></ul></li></ul></li><li><p>实现oa项目中当前登录在线的人数。</p><ul><li>什么代表着用户登录了？<ul><li>session.setAttribute(“user”, userObj); User类型的对象只要往session中存储过，表示有新用户登录。</li></ul></li><li>什么代表着用户退出了？<ul><li>session.removeAttribute(“user”); User类型的对象从session域中移除了。</li><li>或者有可能是session销毁了。（session超时）</li></ul></li></ul></li></ul>]]></content>
    
    
    <summary type="html">监听器是Servlet规范中的一员。就像Filter一样。Filter也是Servlet规范中的一员。在Servlet中，所有的监听器接口都是以“Listener”结尾。</summary>
    
    
    
    <category term="Java 学习" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/JavaEE/"/>
    
    
    <category term="Java 学习" scheme="http://example.com/tags/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>16. Filter 过滤器</title>
    <link href="http://example.com/2022/09/24/JavaEE/16.%20Filter%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    <id>http://example.com/2022/09/24/JavaEE/16.%20Filter%E8%BF%87%E6%BB%A4%E5%99%A8/</id>
    <published>2022-09-24T15:50:26.903Z</published>
    <updated>2022-09-24T15:54:46.922Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Filter过滤器"><a href="#Filter过滤器" class="headerlink" title="Filter过滤器"></a>Filter过滤器</h1><ul><li><p>Filter是什么，有什么用，执行原理是什么？</p><ul><li>Filter是过滤器。</li><li>Filter可以在Servlet这个目标程序执行之前添加代码。也可以在目标Servlet执行之后添加代码。之前之后都可以添加过滤规则。</li><li>一般情况下，都是在过滤器当中编写公共代码。</li></ul></li><li><p>一个过滤器怎么写呢？</p><ul><li><p>第一步：编写一个Java类实现一个接口：jarkata.servlet.Filter。并且实现这个接口当中所有的方法。</p><ul><li>init方法：在Filter对象第一次被创建之后调用，并且只调用一次。</li><li>doFilter方法：只要用户发送一次请求，则执行一次。发送N次请求，则执行N次。在这个方法中编写过滤规则。</li><li>destroy方法：在Filter对象被释放&#x2F;销毁之前调用，并且只调用一次。</li></ul></li><li><p>第二步：在web.xml文件中对Filter进行配置。这个配置和Servlet很像。</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filter2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.bjpowernode.javaweb.servlet.Filter2<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filter2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>或者使用注解：@WebFilter({“*.do”})</li></ul></li></ul></li><li><p>注意：</p><ul><li>Servlet对象默认情况下，在服务器启动的时候是不会新建对象的。</li><li>Filter对象默认情况下，在服务器启动的时候会新建对象。</li><li>Servlet是单例的。Filter也是单例的。（单实例。）</li></ul></li><li><p>目标Servlet是否执行，取决于两个条件：</p><ul><li>第一：在过滤器当中是否编写了：chain.doFilter(request, response); 代码。</li><li>第二：用户发送的请求路径是否和Servlet的请求路径一致。</li></ul></li><li><p>chain.doFilter(request, response); 这行代码的作用：</p><ul><li>执行下一个过滤器，如果下面没有过滤器了，执行最终的Servlet。</li></ul></li><li><p>注意：Filter的优先级，天生的就比Servlet优先级高。</p><ul><li>&#x2F;a.do 对应一个Filter，也对应一个Servlet。那么一定是先执行Filter，然后再执行Servlet。</li></ul></li><li><p>关于Filter的配置路径：</p><ul><li>&#x2F;a.do、&#x2F;b.do、&#x2F;dept&#x2F;save。这些配置方式都是精确匹配。</li><li>&#x2F;* 匹配所有路径。</li><li>*.do 后缀匹配。不要以 &#x2F; 开始</li><li>&#x2F;dept&#x2F;*  前缀匹配。</li></ul></li><li><p>在web.xml文件中进行配置的时候，Filter的执行顺序是什么？</p><ul><li>依靠filter-mapping标签的配置位置，越靠上优先级越高。</li></ul></li><li><p>过滤器的调用顺序，遵循栈数据结构。</p></li><li><p>使用@WebFilter的时候，Filter的执行顺序是怎样的呢？</p><ul><li>执行顺序是：比较Filter这个类名。</li><li>比如：FilterA和FilterB，则先执行FilterA。</li><li>比如：Filter1和Filter2，则先执行Filter1.</li></ul></li><li><p>Filter的生命周期？</p><ul><li>和Servlet对象生命周期一致。</li><li>唯一的区别：Filter默认情况下，在服务器启动阶段就实例化。Servlet不会。</li></ul></li><li><p>Filter过滤器这里有一个设计模式：</p><ul><li>责任链设计模式。</li><li>过滤器最大的优点：<ul><li>在程序编译阶段不会确定调用顺序。因为Filter的调用顺序是配置到web.xml文件中的，只要修改web.xml配置文件中filter-mapping的顺序就可以调整Filter的执行顺序。显然Filter的执行顺序是在程序运行阶段动态组合的。那么这种设计模式被称为责任链设计模式。</li></ul></li><li>责任链设计模式最大的核心思想：<ul><li>在程序运行阶段，动态的组合程序的调用顺序。</li></ul></li></ul></li></ul>]]></content>
    
    
    <summary type="html">Filter是过滤器。Filter可以在Servlet这个目标程序执行之前添加代码。也可以在目标Servlet执行之后添加代码。之前之后都可以添加过滤规则。一般情况下，都是在过滤器当中编写公共代码。</summary>
    
    
    
    <category term="Java 学习" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/JavaEE/"/>
    
    
    <category term="Java 学习" scheme="http://example.com/tags/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>15. EL表达式和JSTL标签库</title>
    <link href="http://example.com/2022/09/24/JavaEE/15.%20EL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8CJSTL%E6%A0%87%E7%AD%BE%E5%BA%93/"/>
    <id>http://example.com/2022/09/24/JavaEE/15.%20EL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8CJSTL%E6%A0%87%E7%AD%BE%E5%BA%93/</id>
    <published>2022-09-24T15:48:20.499Z</published>
    <updated>2022-09-24T15:56:05.225Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-EL表达式"><a href="#1-EL表达式" class="headerlink" title="1. EL表达式"></a>1. EL表达式</h1><ul><li><p>EL表达式是干什么用的？</p><ul><li>Expression Language（表达式语言）</li><li>EL表达式可以代替JSP中的java代码，让JSP文件中的程序看起来更加整洁，美观。</li><li>JSP中夹杂着各种java代码，例如&lt;% java代码 %&gt;、&lt;%&#x3D;%&gt;等，导致JSP文件很混乱，不好看，不好维护。所以才有了后期的EL表达式。</li><li>EL表达式可以算是JSP语法的一部分。EL表达式归属于JSP。</li></ul></li><li><p>EL表达式出现在JSP中主要是：</p><ul><li>从某个作用域中取数据，然后将其转换成字符串，然后将其输出到浏览器。这就是EL表达式的功效。三大功效：<ul><li>第一功效：从某个域中取数据。<ul><li>四个域：<ul><li>pageContext</li><li>request</li><li>session</li><li>application</li></ul></li></ul></li><li>第二功效：将取出的数据转成字符串。<ul><li>如果是一个java对象，也会自动调用java对象的toString方法将其转换成字符串。</li></ul></li><li>第三功效：将字符串输出到浏览器。<ul><li>和这个一样：&lt;%&#x3D; %&gt;，将其输出到浏览器。</li></ul></li></ul></li></ul></li><li><p>EL表达式很好用，基本的语法格式：</p><ul><li>${表达式}</li></ul></li><li><p>EL表达式的使用：</p>  <figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line"><span class="comment">// 创建User对象</span></span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user.setUsername(<span class="string">&quot;jackson&quot;</span>);</span><br><span class="line">user.setPassword(<span class="string">&quot;1234&quot;</span>);</span><br><span class="line">user.setAge(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将User对象存储到某个域当中。一定要存，因为EL表达式只能从某个范围中取数据。</span></span><br><span class="line"><span class="comment">// 数据是必须存储到四大范围之一的。</span></span><br><span class="line">request.setAttribute(<span class="string">&quot;userObj&quot;</span>, user);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--使用EL表达式取--%&gt;</span><br><span class="line">$&#123;这个位置写什么？？？？这里写的一定是存储到域对象当中时的name&#125;</span><br><span class="line">要这样写：</span><br><span class="line">$&#123;userObj&#125;</span><br><span class="line">等同于java代码：&lt;%=request.getAttribute(<span class="string">&quot;userObj&quot;</span>)%&gt;</span><br><span class="line">你不要这样写：$&#123;<span class="string">&quot;userObj&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">面试题：</span><br><span class="line">$&#123;abc&#125; 和 $&#123;<span class="string">&quot;abc&quot;</span>&#125;的区别是什么？</span><br><span class="line">$&#123;abc&#125;表示从某个域中取出数据，并且被取的这个数据的name是<span class="string">&quot;abc&quot;</span>，之前一定有这样的代码: 域.setAttribute(<span class="string">&quot;abc&quot;</span>, 对象);</span><br><span class="line">$&#123;<span class="string">&quot;abc&quot;</span>&#125; 表示直接将<span class="string">&quot;abc&quot;</span>当做普通字符串输出到浏览器。不会从某个域中取数据了。</span><br><span class="line"></span><br><span class="line">$&#123;userObj&#125; 底层是怎么做的？从域中取数据，取出user对象，然后调用user对象的toString方法，转换成字符串，输出到浏览器。</span><br><span class="line"></span><br><span class="line">&lt;%--如果想输出对象的属性值，怎么办？--%&gt;</span><br><span class="line">$&#123;userObj.username&#125; 使用这个语法的前提是：User对象有getUsername()方法。</span><br><span class="line">$&#123;userObj.password&#125; 使用这个语法的前提是：User对象有getPassword()方法。</span><br><span class="line">$&#123;userObj.age&#125; 使用这个语法的前提是：User对象有getAge()方法。</span><br><span class="line">$&#123;userObj.email&#125; 使用这个语法的前提是：User对象有getEmail()方法。</span><br><span class="line">EL表达式中的. 这个语法，实际上调用了底层的getXxx()方法。</span><br><span class="line">注意：如果没有对应的get方法，则出现异常。报<span class="number">500</span>错误。</span><br><span class="line"></span><br><span class="line">$&#123;userObj.addr222.zipcode&#125;</span><br><span class="line">以上EL表达式对应的java代码：</span><br><span class="line">user.getAddr222().getZipcode()</span><br></pre></td></tr></table></figure><ul><li><p>EL表达式优先从小范围中读取数据。</p><ul><li>pageContext &lt; request &lt; session &lt; application</li></ul></li><li><p>EL表达式中有四个隐含的隐式的范围：</p><ul><li>pageScope 对应的是 pageContext范围。</li><li>requestScope 对应的是 request范围。</li><li>sessionScope 对应的是 session范围。</li><li>applicationScope 对应的是 application范围。</li></ul></li><li><p>EL表达式对null进行了预处理。如果是null，则向浏览器输出一个空字符串。</p></li><li><p>EL表达式取数据的时候有两种形式：</p><ul><li>第一种：.  （大部分使用这种方式）</li><li>第二种：[ ] （如果存储到域的时候，这个name中含有特殊字符，可以使用 [ ]）<ul><li>request.setAttribute(“abc.def”, “zhangsan”);</li><li>${requestScope.abc.def} 这样是无法取值的。</li><li>应该这样：${requestScope[“abc.def”]}</li></ul></li></ul></li><li><p>掌握使用EL表达式，怎么从Map集合中取数据：</p><ul><li>${map.key}</li></ul></li><li><p>掌握使用EL表达式，怎么从数组和List集合中取数据：</p><ul><li>${数组[0]}</li><li>${数组[1]}</li><li>${list[0]}</li></ul></li><li><p>page指令当中，有一个属性，可以忽略EL表达式</p>  <figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> isELIgnored=<span class="string">&quot;true&quot;</span> %&gt;</span><br><span class="line">isELIgnored=<span class="string">&quot;true&quot;</span> 表示忽略EL表达式</span><br><span class="line">isELIgnored=<span class="string">&quot;false&quot;</span> 表示不忽略EL表达式。（这是默认值）</span><br><span class="line"></span><br><span class="line">isELIgnored=<span class="string">&quot;true&quot;</span> 这个是全局的控制。</span><br><span class="line"></span><br><span class="line">可以使用反斜杠进行局部控制：\$&#123;username&#125; 这样也可以忽略EL表达式。</span><br></pre></td></tr></table></figure></li><li><p>通过EL表达式获取应用的根：</p><ul><li>${pageContext.request.contextPath}</li></ul></li><li><p>EL表达式中其他的隐式对象：</p><ul><li>pageContext</li><li>param</li><li>paramValues</li><li>initParam</li></ul></li><li><p>EL表达式的运算符</p><ul><li>算术运算符<ul><li>+、-、*、&#x2F;、%</li></ul></li><li>关系运算符<ul><li><input disabled="" type="checkbox"> &#x3D;&#x3D; eq !&#x3D; &gt; &gt;&#x3D; &lt; &lt;&#x3D;</li></ul></li><li>逻辑运算符<ul><li><input disabled="" type="checkbox"> !  &amp;&amp; ||  not and or</li></ul></li><li>条件运算符<ul><li><input disabled="" type="checkbox"> ? :</li></ul></li><li>取值运算符<ul><li>[ ]和.</li></ul></li><li>empty运算符<ul><li><input disabled="" type="checkbox"> empty运算符的结果是boolean类型</li><li><input disabled="" type="checkbox"> ${empty param.username}</li><li><input disabled="" type="checkbox"> ${not empty param.username}</li><li><input disabled="" type="checkbox"> ${!empty param.password}</li></ul></li></ul></li></ul></li></ul><h1 id="2-JSTL标签库"><a href="#2-JSTL标签库" class="headerlink" title="2. JSTL标签库"></a>2. JSTL标签库</h1><ul><li><p>什么是JSTL标签库？</p><ul><li>Java Standard Tag Lib（Java标准的标签库）</li><li>JSTL标签库通常结合EL表达式一起使用。目的是让JSP中的java代码消失。</li><li>标签是写在JSP当中的，但实际上最终还是要执行对应的java程序。（java程序在jar包当中。）</li></ul></li><li><p>使用JSTL标签库的步骤：</p><ul><li><p>第一步：引入JSTL标签库对应的jar包。</p><ul><li>tomcat10之后引入的jar包是：<ul><li>jakarta.servlet.jsp.jstl-2.0.0.jar</li><li>jakarta.servlet.jsp.jstl-api-2.0.0.jar</li></ul></li><li>在IDEA当中怎么引入？<ul><li>在WEB-INF下新建lib目录，然后将jar包拷贝到lib当中。然后将其“Add Lib…”</li><li>一定是要和mysql的数据库驱动一样，都是放在WEB-INF&#x2F;lib目录下的。</li><li>什么时候需要将jar包放到WEB-INF&#x2F;lib目录下？如果这个jar是tomcat服务器没有的。</li></ul></li></ul></li><li><p>第二步：在JSP中引入要使用标签库。（使用taglib指令引入标签库。）</p><ul><li><p>JSTL提供了很多种标签，你要引入哪个标签？？？？重点掌握核心标签库。</p>  <figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@taglib</span> prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">这个就是核心标签库。</span><br><span class="line">prefix=<span class="string">&quot;这里随便起一个名字就行了，核心标签库，大家默认的叫做c，你随意。&quot;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>第三步：在需要使用标签的位置使用即可。表面使用的是标签，底层实际上还是java程序。</p></li></ul></li><li><p>JSTL标签的原理</p>  <figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@taglib</span> prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">以上uri后面的路径实际上指向了一个xxx.tld文件。</span><br><span class="line">tld文件实际上是一个xml配置文件。</span><br><span class="line">在tld文件中描述了“标签”和“java类”之间的关系。</span><br><span class="line">以上核心标签库对应的tld文件是：c.tld文件。它在哪里。</span><br><span class="line">在jakarta.servlet.jsp.jstl-<span class="number">2.0</span><span class="number">.0</span>.jar里面META-INF目录下，有一个c.tld文件。</span><br></pre></td></tr></table></figure><ul><li><p>源码解析：配置文件tld解析</p>  <figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;tag&gt;</span><br><span class="line">    &lt;description&gt;对该标签的描述&lt;/description&gt;</span><br><span class="line">    &lt;name&gt;<span class="keyword">catch</span>&lt;/name&gt; 标签的名字</span><br><span class="line">    &lt;tag-class&gt;org.apache.taglibs.standard.tag.common.core.CatchTag&lt;/tag-class&gt; 标签对应的java类。</span><br><span class="line">    &lt;body-content&gt;JSP&lt;/body-content&gt; 标签体当中可以出现的内容，如果是JSP，就表示标签体中可以出现符合JSP所有语法的代码。例如EL表达式。</span><br><span class="line">    &lt;attribute&gt;</span><br><span class="line">        &lt;description&gt;</span><br><span class="line">        对这个属性的描述</span><br><span class="line">        &lt;/description&gt;</span><br><span class="line">        &lt;name&gt;<span class="keyword">var</span>&lt;/name&gt; 属性名</span><br><span class="line">        &lt;required&gt;<span class="literal">false</span>&lt;/required&gt; <span class="literal">false</span>表示该属性不是必须的。<span class="literal">true</span>表示该属性是必须的。</span><br><span class="line">        &lt;rtexprvalue&gt;<span class="literal">false</span>&lt;/rtexprvalue&gt; 这个描述说明了该属性是否支持EL表达式。<span class="literal">false</span>表示不支持。<span class="literal">true</span>表示支持EL表达式。</span><br><span class="line">    &lt;/attribute&gt;</span><br><span class="line">  &lt;/tag&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:<span class="keyword">catch</span> <span class="keyword">var</span>=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">JSP....</span><br><span class="line">&lt;/c:<span class="keyword">catch</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>jstl中的核心标签库core当中有哪些常用的标签呢？</p><ul><li><p>c:if</p><ul><li>&lt;c:if test&#x3D;”boolean类型，支持EL表达式”&gt;&lt;&#x2F;c: if&gt;</li></ul></li><li><p>c:forEach</p><ul><li>&lt;c:forEach items&#x3D;”集合，支持EL表达式” var&#x3D;”集合中的元素” varStatus&#x3D;”元素状态对象”&gt; ${元素状态对象.count} &lt;&#x2F;c: forEach&gt;</li><li>&lt;c:forEach var&#x3D;”i” begin&#x3D;”1” end&#x3D;”10” step&#x3D;”2”&gt; ${i} &lt;&#x2F;c: forEach&gt;</li></ul></li><li><p>c:choose c:when c:otherwise</p>  <figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:choose&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;param.age &lt; 18&#125;&quot;</span>&gt;</span><br><span class="line">        青少年</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;param.age &lt; 35&#125;&quot;</span>&gt;</span><br><span class="line">        青年</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;param.age &lt; 55&#125;&quot;</span>&gt;</span><br><span class="line">        中年</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:otherwise&gt;</span><br><span class="line">        老年</span><br><span class="line">    &lt;/c:otherwise&gt;</span><br><span class="line">&lt;/c:choose&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul>]]></content>
    
    
    <summary type="html">EL表达式是干什么用的?</summary>
    
    
    
    <category term="Java 学习" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/JavaEE/"/>
    
    
    <category term="Java 学习" scheme="http://example.com/tags/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>14. JSP详解</title>
    <link href="http://example.com/2022/09/24/JavaEE/14.%20JSP%E8%AF%A6%E8%A7%A3/"/>
    <id>http://example.com/2022/09/24/JavaEE/14.%20JSP%E8%AF%A6%E8%A7%A3/</id>
    <published>2022-09-24T15:33:46.184Z</published>
    <updated>2022-09-24T15:57:00.586Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-什么是JSP"><a href="#1-什么是JSP" class="headerlink" title="1. 什么是JSP"></a>1. 什么是JSP</h1><p>JSP全称Java Server Pages，是一种动态网页开发技术。它使用JSP标签在HTML网页中插入Java代码。标签通常以&lt;%开头以%&gt;结束。</p><p>JSP是一种Java servlet，主要用于实现Java web应用程序的用户界面部分。网页开发者们通过结合HTML代码、XHTML代码、XML元素以及嵌入JSP操作和命令来编写JSP。</p><p>JSP是java程序。（JSP本质还是一个Servlet）</p><p>JSP是：JavaServer Pages的缩写。（基于Java语言实现的服务器端的页面。）</p><p>Servlet是JavaEE的13个子规范之一，那么JSP也是JavaEE的13个子规范之一。</p><p>JSP是一套规范。所有的web容器&#x2F;web服务器都是遵循这套规范的，都是按照这套规范进行的“翻译”</p><p>每一个web容器&#x2F;web服务器都会内置一个JSP翻译引擎。</p><p><strong>关于index.jsp</strong></p><ul><li><p>在WEB-INF目录之外创建一个index.jsp文件，然后这个文件中没有任何内容。</p></li><li><p>将上面的项目部署之后，启动服务器，打开浏览器，访问以下地址：</p><ul><li><a href="http://localhost:8080/jsp/index.jsp">http://localhost:8080/jsp/index.jsp</a> 展现在大家面前的是一个空白。</li><li>实际上访问以上的这个：index.jsp，底层执行的是：index_jsp.class 这个java程序。</li><li>这个index.jsp会被tomcat翻译生成index_jsp.java文件，然后tomcat服务器又会将index_jsp.java编译生成index_jsp.class文件</li><li>访问index.jsp，实际上执行的是index_jsp.class中的方法。</li></ul></li><li><p>JSP实际上就是一个Servlet。</p><ul><li>index.jsp访问的时候，会自动翻译生成index_jsp.java，会自动编译生成index_jsp.class，那么index_jsp 这就是一个类。</li><li>index_jsp 类继承 HttpJspBase，而HttpJspBase类继承的是HttpServlet。所以index_jsp类就是一个Servlet类。</li><li>jsp的生命周期和Servlet的生命周期完全相同。完全就是一个东西。没有任何区别。</li><li>jsp和servlet一样，都是单例的。（假单例。）</li></ul></li></ul><p><strong>为什么第一次访问Jsp会比较慢?</strong></p><ul><li>第一次比较麻烦：<ul><li>要把jsp文件翻译生成java源文件</li><li>java源文件要编译生成class字节码文件</li><li>然后通过class去创建servlet对象</li><li>然后调用servlet对象的init方法</li><li>最后调用servlet对象的service方法。</li></ul></li><li>第二次就比较快了，为什么？<ul><li>因为第二次直接调用单例servlet对象的service方法即可。</li></ul></li></ul><h1 id="2-JSP和Servlet的区别"><a href="#2-JSP和Servlet的区别" class="headerlink" title="2. JSP和Servlet的区别"></a>2. JSP和Servlet的区别</h1><p>职责不同：</p><ul><li>Servlet的职责是什么：收集数据。（Servlet的强项是逻辑处理，业务处理，然后链接数据库，获取&#x2F;收集数据。）</li><li>JSP的职责是什么：展示数据。（JSP的强项是做数据的展示）</li></ul><h1 id="3-JSP的基础语法"><a href="#3-JSP的基础语法" class="headerlink" title="3. JSP的基础语法"></a>3. JSP的基础语法</h1><ul><li>在jsp文件中直接编写文字，都会自动被翻译到哪里？<ul><li>翻译到servlet类的service方法的out.write(“翻译到这里”)，直接翻译到双引号里，被java程序当做普通字符串打印输出到浏览器。</li><li>在JSP中编写的HTML CSS JS代码，这些代码对于JSP来说只是一个普通的字符串。但是JSP把这个普通的字符串一旦输出到浏览器，浏览器就会对HTML CSS JS进行解释执行。展现一个效果。</li></ul></li><li>JSP的page指令（这个指令后面再详细说，这里先解决一下中文乱码问题），解决响应时的中文乱码问题：<ul><li>通过page指令来设置响应的内容类型，在内容类型的最后面添加：charset&#x3D;UTF-8<ul><li>&lt;%@page contentType&#x3D;”text&#x2F;html;charset&#x3D;UTF-8”%&gt;，表示响应的内容类型是text&#x2F;html，采用的字符集UTF-8</li><li>&lt;%@page import&#x3D;”java.util.List,java.util.ArrayList”%&gt;</li></ul></li></ul></li><li>怎么在JSP中编写Java程序：<ul><li>&lt;% java语句; %&gt;<ul><li>在这个符号当中编写的被视为java程序，被翻译到Servlet类的service方法内部。</li><li>这里你要细心点，你要思考，在&lt;% %&gt;这个符号里面写java代码的时候，你要时时刻刻的记住你正在“方法体”当中写代码，方法体中可以写什么，不可以写什么，你心里是否明白呢？</li><li>在service方法当中编写的代码是有顺序的，方法体当中的代码要遵循自上而下的顺序依次逐行执行。</li><li>service方法当中不能写静态代码块，不能写方法，不能定义成员变量。。。。。。</li><li>在同一个JSP当中 &lt;%%&gt; 这个符号可以出现多个。</li></ul></li><li>&lt;%! %&gt;<ul><li>在这个符号当中编写的java程序会自动翻译到service方法之外。</li><li>这个语法很少用，为什么？不建议使用，因为在service方法外面写静态变量和实例变量，都会存在线程安全问题，因为JSP就是servlet，servlet是单例的，多线程并发的环境下，这个静态变量和实例变量一旦有修改操作，必然会存在线程安全问题。</li></ul></li><li>JSP的输出语句<ul><li>怎么向浏览器上输出一个java变量。</li><li>&lt;% String name &#x3D; “jack”;  out.write(“name &#x3D; “ + name); %&gt;</li><li>注意：以上代码中的out是JSP的九大内置对象之一。可以直接拿来用。当然，必须只能在service方法内部使用。</li><li>如果向浏览器上输出的内容中没有“java代码”，例如输出的字符串是一个固定的字符串，可以直接在jsp中编写，不需要写到&lt;%%&gt; 这里。</li><li>如果输出的内容中含有“java代码”，这个时候可以使用以下语法格式：<ul><li>&lt;%&#x3D; %&gt; 注意：在&#x3D;的后面编写要输出的内容。</li><li>&lt;%&#x3D; %&gt; 这个符号会被翻译到哪里？最终翻译成什么？ <ul><li>翻译成了这个java代码：   out.print();</li><li>翻译到service方法当中了。</li></ul></li><li>什么时候使用&lt;%&#x3D;%&gt; 输出呢？输出的内容中含有java的变量，输出的内容是一个动态的内容，不是一个死的字符串。如果输出的是一个固定的字符串，直接在JSP文件中编写即可。</li></ul></li></ul></li></ul></li><li>在JSP中如何编写JSP的专业注释<ul><li>&lt;%–JSP的专业注释，不会被翻译到java源代码当中。–%&gt;</li><li><!--这种注释属于HTML的注释，这个注释信息仍然会被翻译到java源代码当中，不建议。--></li></ul></li><li>JSP基础语法总结：<ul><li>JSP中直接编写普通字符串<ul><li>翻译到service方法的out.write(“这里”)</li></ul></li><li>&lt;%%&gt;<ul><li>翻译到service方法体内部，里面是一条一条的java语句。</li></ul></li><li>&lt;%! %&gt;<ul><li>翻译到service方法之外。</li></ul></li><li>&lt;%&#x3D; %&gt;<ul><li>翻译到service方法体内部，翻译为：out.print();</li></ul></li><li>&lt;%@page  contentType&#x3D;”text&#x2F;html;charset&#x3D;UTF-8”%&gt;<ul><li>page指令，通过contentType属性用来设置响应的内容类型。</li></ul></li></ul></li></ul><h1 id="4-JSP指令"><a href="#4-JSP指令" class="headerlink" title="4. JSP指令"></a>4. JSP指令</h1><ul><li><ul><li><p>指令的作用：指导JSP的翻译引擎如何工作（指导当前的JSP翻译引擎如何翻译JSP文件。）</p><ul><li><p>指令包括哪些呢？</p><ul><li>include指令：包含指令，在JSP中完成静态包含，很少用了。（这里不讲）</li><li>taglib指令：引入标签库的指令。这个到JJSTL标签库的时候再学习。现在先不管。</li><li>page指令：目前重点学习一个page指令。</li></ul></li><li><p>指令的使用语法是什么？</p><ul><li>&lt;%@指令名  属性名&#x3D;属性值  属性名&#x3D;属性值  属性名&#x3D;属性值….%&gt;</li></ul></li><li><p>关于page指令当中都有哪些常用的属性呢？</p>  <figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> session=<span class="string">&quot;true|false&quot;</span> %&gt;</span><br><span class="line"><span class="literal">true</span>表示启用JSP的内置对象session，表示一定启动session对象。没有session对象会创建。</span><br><span class="line">如果没有设置，默认值就是session=<span class="string">&quot;true&quot;</span></span><br><span class="line">session=<span class="string">&quot;false&quot;</span> 表示不启动内置对象session。当前JSP页面中无法使用内置对象session。</span><br></pre></td></tr></table></figure>  <figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> contentType=<span class="string">&quot;text/json&quot;</span> %&gt;</span><br><span class="line">contentType属性用来设置响应的内容类型</span><br><span class="line">但同时也可以设置字符集。</span><br><span class="line">&lt;%<span class="meta">@page</span> contentType=<span class="string">&quot;text/json;charset=UTF-8&quot;</span> %&gt;</span><br></pre></td></tr></table></figure>  <figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span> %&gt;</span><br><span class="line">pageEncoding=<span class="string">&quot;UTF-8&quot;</span> 表示设置响应时采用的字符集。</span><br></pre></td></tr></table></figure>  <figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> <span class="keyword">import</span>=<span class="string">&quot;java.util.List, java.util.Date, java.util.ArrayList&quot;</span> %&gt;</span><br><span class="line">&lt;%<span class="meta">@page</span> <span class="keyword">import</span>=<span class="string">&quot;java.util.*&quot;</span> %&gt;</span><br><span class="line"><span class="keyword">import</span>语句，导包。</span><br></pre></td></tr></table></figure>  <figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> errorPage=<span class="string">&quot;/error.jsp&quot;</span> %&gt;</span><br><span class="line">当前页面出现异常之后，跳转到error.jsp页面。</span><br><span class="line">errorPage属性用来指定出错之后的跳转位置。</span><br></pre></td></tr></table></figure>  <figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> isErrorPage=<span class="string">&quot;true&quot;</span> %&gt;</span><br><span class="line">表示启用JSP九大内置对象之一：exception</span><br><span class="line">默认值是<span class="literal">false</span>。</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h1 id="5-JSP的九大内置对象"><a href="#5-JSP的九大内置对象" class="headerlink" title="5. JSP的九大内置对象"></a>5. JSP的九大内置对象</h1><ul><li><p>jakarta.servlet.jsp.PageContext pageContext       页面作用域</p></li><li><p>jakarta.servlet.http.HttpServletRequest request 请求作用域</p></li><li><p>jakarta.servlet.http.HttpSession session  会话作用域</p></li><li><p>jakarta.servlet.ServletContext application 应用作用域</p><ul><li>pageContext &lt; request &lt; session &lt; application</li><li>以上四个作用域都有：setAttribute、getAttribute、removeAttribute方法。</li><li>以上作用域的使用原则：尽可能使用小的域。</li></ul></li><li><p>java.lang.Throwable exception   </p></li><li><p>jakarta.servlet.ServletConfig config</p></li><li><p>java.lang.Object page  （其实是this，当前的servlet对象）</p></li><li><p>jakarta.servlet.jsp.JspWriter out  （负责输出）</p></li><li><p>jakarta.servlet.http.HttpServletResponse response （负责响应）</p></li></ul>]]></content>
    
    
    <summary type="html">JSP全称Java Server Pages，是一种动态网页开发技术。它使用JSP标签在HTML网页中插入Java代码。标签通常以&lt;%开头以%&gt;结束。JSP是一种Java servlet，主要用于实现Java web应用程序的用户界面部分。网页开发者们通过结合HTML代码、XHTML代码、XML元素以及嵌入JSP操作和命令来编写JSP。</summary>
    
    
    
    <category term="Java 学习" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/JavaEE/"/>
    
    
    <category term="Java 学习" scheme="http://example.com/tags/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>13. session 和 cookie</title>
    <link href="http://example.com/2022/09/24/JavaEE/13.%20session%20%E5%92%8C%20cookie/"/>
    <id>http://example.com/2022/09/24/JavaEE/13.%20session%20%E5%92%8C%20cookie/</id>
    <published>2022-09-24T15:07:39.054Z</published>
    <updated>2022-09-24T15:57:14.268Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-session"><a href="#1-session" class="headerlink" title="1. session"></a>1. session</h1><ul><li><p><strong>什么是会话？</strong></p><ul><li>会话对应的英语单词：session</li><li>用户打开浏览器，进行一系列操作，然后最终将浏览器关闭，这个整个过程叫做：一次会话。会话在服务器端也有一个对应的java对象，这个java对象叫做：session。</li><li>什么是一次请求：用户在浏览器上点击了一下，然后到页面停下来，可以粗略认为是一次请求。请求对应的服务器端的java对象是：request。</li><li>一个会话当中包含多次请求。（一次会话对应N次请求。）</li></ul></li><li><p>在java的servlet规范当中，session对应的类名：HttpSession（jarkata.servlet.http.HttpSession）</p></li><li><p>session机制属于B&#x2F;S结构的一部分。如果使用php语言开发WEB项目，同样也是有session这种机制的。session机制实际上是一个规范。然后不同的语言对这种会话机制都有实现。</p></li><li><p>session对象最主要的作用是：保存会话状态。（用户登录成功了，这是一种登录成功的状态，你怎么把登录成功的状态一直保存下来呢？使用session对象可以保留会话状态。）</p></li><li><p><strong>为什么需要session对象来保存会话状态呢？</strong></p><ul><li>因为HTTP协议是一种无状态协议。</li><li>什么是无状态：请求的时候，B和S是连接的，但是请求结束之后，连接就断了。为什么要这么做？HTTP协议为什么要设计成这样？因为这样的无状态协议，可以降低服务器的压力。请求的瞬间是连接的，请求结束之后，连接断开，这样服务器压力小。</li><li>只要B和S断开了，那么关闭浏览器这个动作，服务器知道吗？<ul><li>不知道。服务器是不知道浏览器关闭的。</li></ul></li></ul></li><li><p><strong>张三打开一个浏览器A，李四打开一个浏览器B，访问服务器之后，在服务器端会生成：</strong></p><ul><li>张三专属的session对象</li><li>李四专属的session对象</li></ul></li><li><p><strong>为什么不使用request对象保存会话状态？为什么不使用ServletContext对象保存会话状态？</strong></p><ul><li>request.setAttribute()存，request.getAttribute()取，ServletContext也有这个方法。request是请求域。ServletContext是应用域。</li><li>request是一次请求一个对象。</li><li>ServletContext对象是服务器启动的时候创建，服务器关闭的时候销毁，这个ServletContext对象只有一个。</li><li>ServletContext对象的域太大。</li><li>request请求域（HttpServletRequest）、session会话域（HttpSession）、application域（ServletContext）</li><li>request &lt; session &lt; application</li></ul></li><li><p><strong>session对象的实现原理。</strong></p><ul><li>HttpSession session &#x3D; request.getSession();</li><li>这行代码很神奇。张三访问的时候获取的session对象就是张三的。李四访问的时候获取的session对象就是李四的。</li></ul></li><li><p><strong>session的实现原理：</strong></p><ul><li>JSESSIONID&#x3D;xxxxxx  这个是以Cookie的形式保存在浏览器的内存中的。浏览器只要关闭。这个cookie就没有了。</li><li>session列表是一个Map，map的key是sessionid，map的value是session对象。</li><li>用户第一次请求，服务器生成session对象，同时生成id，将id发送给浏览器。</li><li>用户第二次请求，自动将浏览器内存中的id发送给服务器，服务器根据id查找session对象。</li><li>关闭浏览器，内存消失，cookie消失，sessionid消失，会话等同于结束。</li></ul></li><li><p><strong>Cookie禁用了，session还能找到吗？</strong></p><ul><li>cookie禁用是什么意思？服务器正常发送cookie给浏览器，但是浏览器不要了。拒收了。并不是服务器不发了。</li><li>找不到了。每一次请求都会获取到新的session对象。</li><li>cookie禁用了，session机制还能实现吗？<ul><li>可以。需要使用URL重写机制。</li><li><a href="http://localhost:8080/servlet12/test/session;jsessionid=19D1C99560DCBF84839FA43D58F56E16">http://localhost:8080/servlet12/test/session;jsessionid=19D1C99560DCBF84839FA43D58F56E16</a></li><li>URL重写机制会提高开发者的成本。开发人员在编写任何请求路径的时候，后面都要添加一个sessionid，给开发带来了很大的难度，很大的成本。所以大部分的网站都是这样设计的：你要是禁用cookie，你就别用了。</li></ul></li></ul></li><li><p><strong>域对象：</strong></p><ul><li>request（对应的类名：HttpServletRequest）<ul><li>请求域（请求级别的）</li></ul></li><li>session（对应的类名：HttpSession）<ul><li>会话域（用户级别的）</li></ul></li><li>application（对应的类名：ServletContext）<ul><li>应用域（项目级别的，所有用户共享的。）</li></ul></li><li>这三个域对象的大小关系<ul><li>request &lt; session &lt; application</li></ul></li><li>他们三个域对象都有以下三个公共的方法：<ul><li>setAttribute（向域当中绑定数据）</li><li>getAttribute（从域当中获取数据）</li><li>removeAttribute（删除域当中的数据）</li></ul></li><li>使用原则：尽量使用小的域。</li></ul></li><li><p>销毁session对象：</p><p>  <code>session.invalidate();</code></p></li></ul><h1 id="2-Cookie"><a href="#2-Cookie" class="headerlink" title="2. Cookie"></a>2. Cookie</h1><ul><li><p><strong>session的实现原理中，每一个session对象都会关联一个sessionid</strong>，例如：</p><ul><li>JSESSIONID&#x3D;41C481F0224664BDB28E95081D23D5B8</li><li>以上的这个键值对数据其实就是cookie对象。</li><li>对于session关联的cookie来说，这个cookie是被保存在浏览器的“运行内存”当中。</li><li>只要浏览器不关闭，用户再次发送请求的时候，会自动将运行内存中的cookie发送给服务器。</li><li>例如，这个Cookie: JSESSIONID&#x3D;41C481F0224664BDB28E95081D23D5B8就会再次发送给服务器。</li><li>服务器就是根据41C481F0224664BDB28E95081D23D5B8这个值来找到对应的session对象的。</li></ul></li><li><p><strong>cookie最终是保存在浏览器客户端上的</strong>。</p><ul><li>可以保存在运行内存中。（浏览器只要关闭cookie就消失了。）</li><li>也可以保存在硬盘文件中。（永久保存。）</li></ul></li><li><p><strong>cookie有啥用呢</strong>？</p><ul><li>cookie和session机制其实都是为了保存会话的状态。</li><li>cookie是将会话的状态保存在浏览器客户端上。（cookie数据存储在浏览器客户端上的。）</li><li>session是将会话的状态保存在服务器端上。（session对象是存储在服务器上。）</li><li>为什么要有cookie和session机制呢？因为HTTP协议是无状态 无连接协议。</li></ul></li><li><p><strong>cookie的经典案例</strong></p><ul><li>京东商城，在未登录的情况下，向购物车中放几件商品。然后关闭商城，再次打开浏览器，访问京东商城的时候，购物车中的商品还在，这是怎么做的？我没有登录，为什么购物车中还有商品呢？<ul><li>将购物车中的商品编号放到cookie当中，cookie保存在硬盘文件当中。这样即使关闭浏览器。硬盘上的cookie还在。下一次再打开京东商城的时候，查看购物车的时候，会自动读取本地硬盘中存储的cookie，拿到商品编号，动态展示购物车中的商品。<ul><li>京东存储购物车中商品的cookie可能是这样的：productIds&#x3D;xxxxx,yyyy,zzz,kkkk</li><li>注意：cookie如果清除掉，购物车中的商品就消失了。</li></ul></li></ul></li><li>126邮箱中有一个功能：十天内免登录<ul><li>这个功能也是需要cookie来实现的。</li><li>怎么实现的呢？<ul><li>用户输入正确的用户名和密码，并且同时选择十天内免登录。登录成功后。浏览器客户端会保存一个cookie，这个cookie中保存了用户名和密码等信息，这个cookie是保存在硬盘文件当中的，十天有效。在十天内用户再次访问126的时候，浏览器自动提交126的关联的cookie给服务器，服务器接收到cookie之后，获取用户名和密码，验证，通过之后，自动登录成功。</li><li>怎么让cookie失效？<ul><li>十天过后自动失效。</li><li>或者改密码。</li><li>或者在客户端浏览器上清除cookie。</li></ul></li></ul></li></ul></li></ul></li><li><p>cookie机制和session机制其实都不属于java中的机制，实际上cookie机制和session机制都是HTTP协议的一部分。php开发中也有cookie和session机制，只要是你是做web开发，不管是什么编程语言，cookie和session机制都是需要的。</p></li><li><p>HTTP协议中规定：任何一个cookie都是由name和value组成的。name和value都是字符串类型的。</p></li><li><p>在java的servlet中，对cookie提供了哪些支持呢？</p><ul><li>提供了一个Cookie类来专门表示cookie数据。jakarta.servlet.http.Cookie;</li><li>java程序怎么把cookie数据发送给浏览器呢？response.addCookie(cookie);</li></ul></li><li><p>在HTTP协议中是这样规定的：当浏览器发送请求的时候，会自动携带该path下的cookie数据给服务器。（URL。）</p></li><li><p>关于cookie的有效时间</p><ul><li>怎么用java设置cookie的有效时间<ul><li>cookie.setMaxAge(60 * 60); 设置cookie在一小时之后失效。</li></ul></li><li>没有设置有效时间：默认保存在浏览器的运行内存中，浏览器关闭则cookie消失。</li><li>只要设置cookie的有效时间 &gt; 0，这个cookie一定会存储到硬盘文件当中。</li><li>设置cookie的有效时间 &#x3D; 0 呢？<ul><li>cookie被删除，同名cookie被删除。</li></ul></li><li>设置cookie的有效时间 &lt; 0 呢？<ul><li>保存在运行内存中。和不设置一样。</li></ul></li></ul></li><li><p>关于cookie的path，cookie关联的路径：</p><ul><li>假设现在发送的请求路径是“<a href="http://localhost:8080/servlet13/cookie/generate%E2%80%9D%E7%94%9F%E6%88%90%E7%9A%84cookie%EF%BC%8C%E5%A6%82%E6%9E%9Ccookie%E6%B2%A1%E6%9C%89%E8%AE%BE%E7%BD%AEpath%EF%BC%8C%E9%BB%98%E8%AE%A4%E7%9A%84path%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F">http://localhost:8080/servlet13/cookie/generate”生成的cookie，如果cookie没有设置path，默认的path是什么？</a><ul><li>默认的path是：<a href="http://localhost:8080/servlet13/cookie">http://localhost:8080/servlet13/cookie</a> 以及它的子路径。</li><li>也就是说，以后只要浏览器的请求路径是<a href="http://localhost:8080/servlet13/cookie">http://localhost:8080/servlet13/cookie</a> 这个路径以及这个路径下的子路径，cookie都会被发送到服务器。</li></ul></li><li>手动设置cookie的path<ul><li>cookie.setPath(“&#x2F;servlet13”); 表示只要是这个servlet13项目的请求路径，都会提交这个cookie给服务器。</li></ul></li></ul></li><li><p>浏览器发送cookie给服务器了，服务器中的java程序怎么接收？</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Cookie[] cookies = request.getCookies(); <span class="comment">// 这个方法可能返回null</span></span><br><span class="line"><span class="keyword">if</span>(cookies != <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(Cookie cookie : cookies)&#123;</span><br><span class="line">        <span class="comment">// 获取cookie的name</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> cookie.getName();</span><br><span class="line">        <span class="comment">// 获取cookie的value</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> cookie.getValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">session 就是 B/S 结构系统的会话机制,用户打开浏览器,进行一系列的操作后,再关闭浏览器,这一整个过程叫做一次会话.</summary>
    
    
    
    <category term="Java 学习" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/JavaEE/"/>
    
    
    <category term="Java 学习" scheme="http://example.com/tags/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>12. Servlet注解开发与优化</title>
    <link href="http://example.com/2022/09/24/JavaEE/12.%20Servlet%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91%E4%B8%8E%E4%BC%98%E5%8C%96/"/>
    <id>http://example.com/2022/09/24/JavaEE/12.%20Servlet%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91%E4%B8%8E%E4%BC%98%E5%8C%96/</id>
    <published>2022-09-24T15:01:45.131Z</published>
    <updated>2022-09-24T15:57:17.063Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Servlet注解开发"><a href="#1-Servlet注解开发" class="headerlink" title="1. Servlet注解开发"></a>1. Servlet注解开发</h1><ul><li><p>分析oa项目中的web.xml文件</p><ul><li>现在只是一个单标的CRUD，没有复杂的业务逻辑，很简单的一丢丢功能。web.xml文件中就有如此多的配置信息。如果采用这种方式，对于一个大的项目来说，这样的话web.xml文件会非常庞大，有可能最终会达到几十兆。</li><li>在web.xml文件中进行servlet信息的配置，显然开发效率比较低，每一个都需要配置一下。</li><li>而且在web.xml文件中的配置是很少被修改的，所以这种配置信息能不能直接写到java类当中呢？可以的。</li></ul></li><li><p>Servlet3.0版本之后，推出了各种Servlet基于注解式开发。优点是什么？</p><ul><li>开发效率高，不需要编写大量的配置信息。直接在java类上使用注解进行标注。</li><li>web.xml文件体积变小了。</li></ul></li><li><p>并不是说注解有了之后，web.xml文件就不需要了：</p><ul><li>有一些需要变化的信息，还是要配置到web.xml文件中。一般都是 注解+配置文件 的开发模式。</li><li>一些不会经常变化修改的配置建议使用注解。一些可能会被修改的建议写到配置文件中。</li></ul></li><li><p>我们的第一个注解：</p><ul><li><pre><code class="java">  jakarta.servlet.annotation.WebServlet</code></pre></li><li><p>在Servlet类上使用：@WebServlet，WebServlet注解中有哪些属性呢？</p><ul><li>name属性：用来指定Servlet的名字。等同于：<servlet-name></li><li>urlPatterns属性：用来指定Servlet的映射路径。可以指定多个字符串。<url-pattern></li><li>loadOnStartUp属性：用来指定在服务器启动阶段是否加载该Servlet。等同于：<load-on-startup></li><li>value属性：当注解的属性名是value的时候，使用注解的时候，value属性名是可以省略的。</li><li>注意：不是必须将所有属性都写上，只需要提供需要的。（需要什么用什么。）</li><li>注意：属性是一个数组，如果数组中只有一个元素，使用该注解的时候，属性值的大括号可以省略。</li></ul></li></ul></li><li><p>注解对象的使用格式：</p><ul><li>@注解名称(属性名&#x3D;属性值, 属性名&#x3D;属性值, 属性名&#x3D;属性值….)</li></ul></li></ul><h1 id="2-使用模板方法设计模式优化oa项目"><a href="#2-使用模板方法设计模式优化oa项目" class="headerlink" title="2. 使用模板方法设计模式优化oa项目"></a>2. 使用模板方法设计模式优化oa项目</h1><ul><li>上面的注解解决了配置文件的问题。但是现在的oa项目仍然存在一个比较臃肿的问题。<ul><li>一个单标的CRUD，就写了6个Servlet。如果一个复杂的业务系统，这种开发方式，显然会导致类爆炸。（类的数量太大。）</li><li>怎么解决这个类爆炸问题？可以使用模板方法设计模式。</li></ul></li><li>怎么解决类爆炸问题？<ul><li>以前的设计是一个请求一个Servlet类。1000个请求对应1000个Servlet类。导致类爆炸。</li><li>可以这样做：一个请求对应一个方法。一个业务对应一个Servlet类。</li><li>处理部门相关业务的对应一个DeptServlet。处理用户相关业务的对应一个UserServlet。处理银行卡卡片业务对应一个CardServlet。</li></ul></li></ul><h1 id="3-纯粹的Servlet开发Web应用的缺陷"><a href="#3-纯粹的Servlet开发Web应用的缺陷" class="headerlink" title="3. 纯粹的Servlet开发Web应用的缺陷"></a>3. 纯粹的Servlet开发Web应用的缺陷</h1><ul><li>va程序中编写前端代码，编写难度大。麻烦。</li><li>java程序中编写前端代码，显然程序的耦合度非常高。</li><li>java程序中编写前端代码，代码非常不美观。</li><li>java程序中编写前端代码，维护成本太高。（非常难于维护）<ul><li>修改小小的一个前端代码，只要有改动，就需要重新编译java代码，生成新的class文件，打一个新的war包，重新发布。</li></ul></li></ul>]]></content>
    
    
    <summary type="html">Servlet3.0版本之后，推出了各种Servlet基于注解式开发。它使得开发效率高了，不需要编写大量的配置信息。直接在java类上使用注解进行标注。</summary>
    
    
    
    <category term="Java 学习" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/JavaEE/"/>
    
    
    <category term="Java 学习" scheme="http://example.com/tags/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>11. 转发和重定向</title>
    <link href="http://example.com/2022/09/15/JavaEE/11.%20%E8%BD%AC%E5%8F%91%E5%92%8C%E9%87%8D%E5%AE%9A%E5%90%91/"/>
    <id>http://example.com/2022/09/15/JavaEE/11.%20%E8%BD%AC%E5%8F%91%E5%92%8C%E9%87%8D%E5%AE%9A%E5%90%91/</id>
    <published>2022-09-15T13:59:53.278Z</published>
    <updated>2022-09-15T14:03:12.005Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-转发和重定向"><a href="#1-转发和重定向" class="headerlink" title="1. 转发和重定向"></a>1. 转发和重定向</h1><p><strong>转发</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取请求转发器对象</span></span><br><span class="line"><span class="type">RequestDispatcher</span> <span class="variable">dispatcher</span> <span class="operator">=</span> request.getRequestDispatcher(<span class="string">&quot;/dept/list&quot;</span>);</span><br><span class="line"><span class="comment">// 调用请求转发器对象的forward方法完成转发</span></span><br><span class="line">dispatcher.forward(request, response);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并一行代码</span></span><br><span class="line">request.getRequestDispatcher(<span class="string">&quot;/dept/list&quot;</span>).forward(request, response);</span><br><span class="line"><span class="comment">// 转发的时候是一次请求，不管你转发了多少次。都是一次请求。</span></span><br><span class="line"><span class="comment">// AServlet转发到BServlet，再转发到CServlet，再转发到DServlet，不管转发了多少次，都在同一个request当中。</span></span><br><span class="line"><span class="comment">// 这是因为调用forward方法的时候，会将当前的request和response对象传递给下一个Servlet。</span></span><br></pre></td></tr></table></figure><p><strong>重定向</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意：路径上要加一个项目名。为什么？</span></span><br><span class="line"><span class="comment">// 浏览器发送请求，请求路径上是需要添加项目名的。</span></span><br><span class="line"><span class="comment">// 以下这一行代码会将请求路径“/oa/dept/list”发送给浏览器</span></span><br><span class="line"><span class="comment">// 浏览器会自发的向服务器发送一次全新的请求：/oa/dept/list</span></span><br><span class="line">response.sendRedirect(<span class="string">&quot;/oa/dept/list&quot;</span>);</span><br></pre></td></tr></table></figure><h1 id="2-区别"><a href="#2-区别" class="headerlink" title="2. 区别"></a>2. 区别</h1><p><strong>形式上区别</strong></p><ul><li>转发（一次请求）<ul><li>在浏览器地址栏上发送的请求是：<a href="http://localhost:8080/servlet10/a">http://localhost:8080/servlet10/a</a> ，最终请求结束之后，浏览器地址栏上的地址还是这个。没变。</li></ul></li><li>重定向（两次请求）<ul><li>在浏览器地址栏上发送的请求是：<a href="http://localhost:8080/servlet10/a">http://localhost:8080/servlet10/a</a> ，最终在浏览器地址栏上显示的地址是：<a href="http://localhost:8080/servlet10/b">http://localhost:8080/servlet10/b</a></li></ul></li></ul><p><strong>本质区别</strong></p><ul><li>转发：是由WEB服务器来控制的。A资源跳转到B资源，这个跳转动作是Tomcat服务器内部完成的。</li><li>重定向：是浏览器完成的。具体跳转到哪个资源，是浏览器说了算。</li></ul><h1 id="3-选择"><a href="#3-选择" class="headerlink" title="3. 选择"></a>3. 选择</h1><ul><li><p>如果在上一个Servlet当中向request域当中绑定了数据，希望从下一个Servlet当中把request域里面的数据取出来，使用转发机制。</p></li><li><p>剩下所有的请求均使用重定向。（重定向使用较多。）</p></li><li><p>跳转的下一个资源有没有要求呢？必须是一个Servlet吗？</p><ul><li>不一定，跳转的资源只要是服务器内部合法的资源即可。包括：Servlet、JSP、HTML…..</li></ul></li><li><p>转发会存在浏览器的刷新问题。</p></li></ul>]]></content>
    
    
    <summary type="html">在一个web应用中通过两种方式，可以完成资源的跳转：1. 转发 2. 重定向</summary>
    
    
    
    <category term="Java 学习" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/JavaEE/"/>
    
    
    <category term="Java 学习" scheme="http://example.com/tags/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>10. 纯Servlet单表CRUD操作</title>
    <link href="http://example.com/2022/09/15/JavaEE/10.%20%E7%BA%AFServlet%E5%8D%95%E8%A1%A8CRUD%E6%93%8D%E4%BD%9C/"/>
    <id>http://example.com/2022/09/15/JavaEE/10.%20%E7%BA%AFServlet%E5%8D%95%E8%A1%A8CRUD%E6%93%8D%E4%BD%9C/</id>
    <published>2022-09-15T12:41:36.126Z</published>
    <updated>2022-09-24T15:57:21.209Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-准备"><a href="#1-准备" class="headerlink" title="1. 准备"></a>1. 准备</h1><p><strong>数据库</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 部门表</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> dept;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dept(</span><br><span class="line">deptno <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">    dname <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    loc <span class="type">varchar</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept(deptno, dname, loc) <span class="keyword">values</span>(<span class="number">10</span>, <span class="string">&#x27;XiaoShouBu&#x27;</span>, <span class="string">&#x27;BEIJING&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept(deptno, dname, loc) <span class="keyword">values</span>(<span class="number">20</span>, <span class="string">&#x27;YanFaBu&#x27;</span>, <span class="string">&#x27;SHANGHAI&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept(deptno, dname, loc) <span class="keyword">values</span>(<span class="number">30</span>, <span class="string">&#x27;JiShuBu&#x27;</span>, <span class="string">&#x27;GUANGZHOU&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept(deptno, dname, loc) <span class="keyword">values</span>(<span class="number">40</span>, <span class="string">&#x27;MeiTiBu&#x27;</span>, <span class="string">&#x27;SHENZHEN&#x27;</span>);</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept;</span><br></pre></td></tr></table></figure><h1 id="2-实现代码"><a href="#2-实现代码" class="headerlink" title="2. 实现代码"></a>2. 实现代码</h1><h2 id="1-Servlet"><a href="#1-Servlet" class="headerlink" title="1. Servlet"></a>1. Servlet</h2><p><strong>DeptListServlet</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.utils.JDBCUtils;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptListServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        out.println(<span class="string">&quot;&lt;!DOCTYPE html &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;html lang = &#x27;en&#x27; &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;head &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;    &lt;meta charset = &#x27;UTF-8&#x27; &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;    &lt;title &gt; 部门列表 &lt;/title &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/head &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;body &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;h1 align = &#x27; center&#x27; &gt; 部门列表 &lt;/h1 &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;br / &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;div align = &#x27;center&#x27;&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;   &lt;a href=&#x27;/add&#x27; &gt;添加部门&lt;/a&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/div&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;table align = &#x27;center&#x27; width = &#x27;50%&#x27; border = &#x27;1px&#x27; &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;    &lt;tr &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;        &lt;th &gt; 序号 &lt;/th &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;        &lt;th &gt; 部门编号 &lt;/th &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;        &lt;th &gt; 部门名称 &lt;/th &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;        &lt;th &gt; 部门地址 &lt;/th &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;        &lt;th &gt; 操作 &lt;/th &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;   &lt;/tr &gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 连接MySql数据库</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">// 查询数据库中 Dept中的数据</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from dept&quot;</span>;</span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            rs = ps.executeQuery();</span><br><span class="line"></span><br><span class="line">            System.out.println(rs.next());</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">deptno</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;deptno&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">dname</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;dname&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">loc</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;location&quot;</span>);</span><br><span class="line"></span><br><span class="line">                out.print(<span class="string">&quot;&lt;tr&gt;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;&lt;td&gt;&quot;</span> + (++i) + <span class="string">&quot;&lt;/td&gt;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;&lt;td&gt;&quot;</span> + deptno + <span class="string">&quot;&lt;/td&gt;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;&lt;td&gt;&quot;</span> + dname + <span class="string">&quot;&lt;/td&gt;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;&lt;td&gt;&quot;</span> + loc + <span class="string">&quot;&lt;/td&gt;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;&lt;td&gt;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;&lt;a href=&#x27;javascript:void(0)&#x27; onclick=&#x27;del(&quot;</span> + deptno + <span class="string">&quot;)&#x27; &gt;删除&lt;/a&gt;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;&lt;a href=&#x27;/edit?deptno=&quot;</span> + deptno + <span class="string">&quot;&amp;dname=&quot;</span> + dname + <span class="string">&quot;&amp;location=&quot;</span> + loc + <span class="string">&quot;&#x27;&gt;修改&lt;/a&gt;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;&lt;a href=&#x27;/detail?deptno=&quot;</span> + deptno + <span class="string">&quot; &#x27;&gt;详情&lt;/a&gt;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;&lt;/td&gt;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;&lt;/tr&gt;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;&lt;script type = &#x27;text/javascript&#x27; &gt;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;        function del(dno) &#123;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;   if (window.confirm(&#x27;亲，删了不可恢复哦！&#x27;)) &#123;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;        document.location.href = &#x27;/delete?deptno=&#x27; + dno;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;   &#125;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">                out.print(<span class="string">&quot;&lt;/script &gt;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.close(conn, ps, rs);</span><br><span class="line">        &#125;</span><br><span class="line">        out.print(<span class="string">&quot;&lt;/table&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;&lt;/body &gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;&lt;/html &gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>DeptAddServlet</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.utils.JDBCUtils;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptAddServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        out.println(<span class="string">&quot;&lt;!DOCTYPE html &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;html lang = &#x27;en&#x27; &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;head &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;    &lt;meta charset = &#x27;UTF-8&#x27; &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;    &lt;title &gt; 部门添加 &lt;/title &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/head &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;body &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;h1 align = &#x27; center&#x27; &gt; 部门添加 &lt;/h1 &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;br / &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;form action = &#x27;/add&#x27; method = &#x27;post&#x27; &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;    &lt;table align = &#x27;center&#x27; width = &#x27;50%&#x27; border = &#x27;1px&#x27; &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;        &lt;tr &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;            &lt;td &gt; 部门编号 &lt;/td &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;            &lt;td &gt; &lt;input type = &#x27;text&#x27; name = &#x27;deptno&#x27; /&gt; &lt;/td &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;        &lt;/tr &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;        &lt;tr &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;            &lt;td &gt; 部门名称 &lt;/td &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;            &lt;td &gt; &lt;input type = &#x27;text&#x27; name = &#x27;dname&#x27; /&gt; &lt;/td &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;        &lt;/tr &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;        &lt;tr &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;            &lt;td &gt; 部门地址 &lt;/td &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;            &lt;td &gt; &lt;input type = &#x27;text&#x27; name = &#x27;location&#x27; /&gt; &lt;/td &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;        &lt;/tr &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;        &lt;tr &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;            &lt;td colspan = &#x27;2&#x27; align = &#x27;center&#x27;&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;                &lt;input type = &#x27;submit&#x27; value = &#x27;添加&#x27; /&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;            &lt;/td &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;        &lt;/tr &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;    &lt;/table &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/form &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/body &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/html&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">deptno</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;deptno&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">dname</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;dname&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">loc</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;location&quot;</span>);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JDBCUtils.getConnection();</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into dept values(?,?,?)&quot;</span>;</span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            ps.setString(<span class="number">1</span>, deptno);</span><br><span class="line">            ps.setString(<span class="number">2</span>, dname);</span><br><span class="line">            ps.setString(<span class="number">3</span>, loc);</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> ps.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">                resp.sendRedirect(<span class="string">&quot;/list&quot;</span>); <span class="comment">// 重定向</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                resp.getWriter().print(<span class="string">&quot;出错啦&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.close(conn, ps, rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>DeptDetailServlet</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.utils.JDBCUtils;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptDetailServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        <span class="type">String</span> <span class="variable">deptno</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;deptno&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JDBCUtils.getConnection();</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from dept where deptno = ?&quot;</span>;</span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            ps.setString(<span class="number">1</span>, deptno);</span><br><span class="line">            rs = ps.executeQuery();</span><br><span class="line">            <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">dname</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;dname&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">loc</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;location&quot;</span>);</span><br><span class="line">                out.println(<span class="string">&quot;&lt;!DOCTYPE html &gt;&quot;</span>);</span><br><span class="line">                out.println(<span class="string">&quot;&lt;html lang = &#x27;en&#x27; &gt;&quot;</span>);</span><br><span class="line">                out.println(<span class="string">&quot;&lt;head &gt;&quot;</span>);</span><br><span class="line">                out.println(<span class="string">&quot;    &lt;meta charset = &#x27;UTF-8&#x27; &gt;&quot;</span>);</span><br><span class="line">                out.println(<span class="string">&quot;    &lt;title &gt; 部门详情 &lt;/title &gt;&quot;</span>);</span><br><span class="line">                out.println(<span class="string">&quot;&lt;/head &gt;&quot;</span>);</span><br><span class="line">                out.println(<span class="string">&quot;&lt;body &gt;&quot;</span>);</span><br><span class="line">                out.println(<span class="string">&quot;&lt;h1 align = &#x27; center&#x27; &gt; 部门详情 &lt;/h1 &gt;&quot;</span>);</span><br><span class="line">                out.println(<span class="string">&quot;&lt;br / &gt;&quot;</span>);</span><br><span class="line">                out.println(<span class="string">&quot;&lt;table align = &#x27;center&#x27; width = &#x27;50%&#x27; border = &#x27;1px&#x27; &gt;&quot;</span>);</span><br><span class="line">                out.println(<span class="string">&quot;    &lt;tr &gt;&quot;</span>);</span><br><span class="line">                out.println(<span class="string">&quot;        &lt;th &gt; 部门编号 &lt;/th &gt;&quot;</span>);</span><br><span class="line">                out.println(<span class="string">&quot;        &lt;th &gt; 部门名称 &lt;/th &gt;&quot;</span>);</span><br><span class="line">                out.println(<span class="string">&quot;        &lt;th &gt; 部门地址 &lt;/th &gt;&quot;</span>);</span><br><span class="line">                out.println(<span class="string">&quot;   &lt;/tr &gt;&quot;</span>);</span><br><span class="line">                out.println(<span class="string">&quot;   &lt;tr &gt;&quot;</span>);</span><br><span class="line">                out.println(<span class="string">&quot;        &lt;td &gt;&quot;</span> + deptno + <span class="string">&quot;&lt;/td &gt;&quot;</span>);</span><br><span class="line">                out.println(<span class="string">&quot;        &lt;td &gt;&quot;</span> + dname + <span class="string">&quot;&lt;/td &gt;&quot;</span>);</span><br><span class="line">                out.println(<span class="string">&quot;        &lt;td &gt;&quot;</span> + loc + <span class="string">&quot;&lt;/td &gt;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.close(conn, ps, rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>DeptEditServlet</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.utils.JDBCUtils;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptEditServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        <span class="type">String</span> <span class="variable">deptno</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;deptno&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">dname</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;dname&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">loc</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;location&quot;</span>);</span><br><span class="line">        <span class="comment">// 渲染界面</span></span><br><span class="line">        out.println(<span class="string">&quot;&lt;!DOCTYPE html &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;html lang = &#x27;en&#x27; &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;head &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;    &lt;meta charset = &#x27;UTF-8&#x27; &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;    &lt;title &gt; 部门编辑 &lt;/title &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/head &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;body &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;h1 align = &#x27; center&#x27; &gt; 部门编辑 &lt;/h1 &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;br / &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;form action = &#x27;/edit&#x27; method = &#x27;post&#x27; &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;    &lt;table align = &#x27;center&#x27; width = &#x27;50%&#x27; border = &#x27;1px&#x27; &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;        &lt;tr &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;            &lt;td &gt; 部门编号 &lt;/td &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;            &lt;td &gt; &lt;input type = &#x27;text&#x27; name = &#x27;deptno&#x27; value = &#x27;&quot;</span> + deptno + <span class="string">&quot;&#x27; readonly = &#x27;readonly&#x27; /&gt; &lt;/td &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;        &lt;/tr &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;        &lt;tr &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;            &lt;td &gt; 部门名称 &lt;/td &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;            &lt;td &gt; &lt;input type = &#x27;text&#x27; name = &#x27;dname&#x27; value = &#x27;&quot;</span> + dname + <span class="string">&quot;&#x27; /&gt; &lt;/td &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;        &lt;/tr &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;        &lt;tr &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;            &lt;td &gt; 部门地址 &lt;/td &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;            &lt;td &gt; &lt;input type = &#x27;text&#x27; name = &#x27;location&#x27; value = &#x27;&quot;</span> + loc + <span class="string">&quot;&#x27; /&gt; &lt;/td &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;        &lt;/tr &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;        &lt;tr &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;            &lt;td colspan = &#x27;2&#x27; align = &#x27;center&#x27;&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;                &lt;input type = &#x27;submit&#x27; value = &#x27;修改&#x27; / &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;                &lt;input type = &#x27;reset&#x27; value = &#x27;重置&#x27; / &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;            &lt;/td &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;        &lt;/tr &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;    &lt;/table &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;    &lt;br / &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/form&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/body &gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/html &gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">deptno</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;deptno&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">dname</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;dname&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">loc</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;location&quot;</span>);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JDBCUtils.getConnection();</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update dept set dname = ?, location = ? where deptno = ?&quot;</span>;</span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            ps.setString(<span class="number">1</span>, dname);</span><br><span class="line">            ps.setString(<span class="number">2</span>, loc);</span><br><span class="line">            ps.setString(<span class="number">3</span>, deptno);</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> ps.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">                resp.sendRedirect(<span class="string">&quot;/list&quot;</span>); <span class="comment">// 重定向</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                resp.getWriter().print(<span class="string">&quot;出错啦&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.close(conn, ps, rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>DeptDeleteServlet</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.utils.JDBCUtils;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptDeleteServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        <span class="type">String</span> <span class="variable">deptno</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;deptno&quot;</span>);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JDBCUtils.getConnection();</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from dept where deptno = ?&quot;</span>;</span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            ps.setString(<span class="number">1</span>, deptno);</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> ps.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">                req.getRequestDispatcher(<span class="string">&quot;/list&quot;</span>).forward(req, resp);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                out.print(<span class="string">&quot;出错啦&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.close(conn, ps, rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-Utils"><a href="#2-Utils" class="headerlink" title="2. Utils"></a>2. Utils</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String user;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">            properties.load(JDBCUtils.class.getClassLoader().getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>));</span><br><span class="line">            user = properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">            password = properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">            url = properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">            driver = properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">            Class.forName(driver);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放MySQL资源</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(Connection conn, Statement statement, ResultSet resultSet)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (statement != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (resultSet != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>jdbc.properties</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/study</span></span><br><span class="line"><span class="attr">user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure><h2 id="3-xml"><a href="#3-xml" class="headerlink" title="3. xml"></a>3. xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>list<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.servlet.DeptListServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>list<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/list<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>detail<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.servlet.DeptDetailServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>detail<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/detail<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.servlet.DeptDeleteServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/delete<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>edit<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.servlet.DeptEditServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>edit<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/edit<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>add<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.servlet.DeptAddServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>add<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/add<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-欢迎界面"><a href="#4-欢迎界面" class="headerlink" title="4. 欢迎界面"></a>4. 欢迎界面</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>欢迎界面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>欢迎界面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/list&quot;</span>&gt;</span>查看所有学生信息<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">单纯使用Servlet,不使用前端(html,jsp)做一个单表的CRUD操作,理解Servlet工作原理</summary>
    
    
    
    <category term="Java 学习" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/JavaEE/"/>
    
    
    <category term="Java 学习" scheme="http://example.com/tags/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>9. HttpServletRequest接口解析</title>
    <link href="http://example.com/2022/09/14/JavaEE/9.%20HttpServletRequest%20%E6%8E%A5%E5%8F%A3%E8%A7%A3%E6%9E%90/"/>
    <id>http://example.com/2022/09/14/JavaEE/9.%20HttpServletRequest%20%E6%8E%A5%E5%8F%A3%E8%A7%A3%E6%9E%90/</id>
    <published>2022-09-14T08:59:03.038Z</published>
    <updated>2022-09-14T09:27:57.830Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-HttpServletRequest"><a href="#1-HttpServletRequest" class="headerlink" title="1. HttpServletRequest"></a>1. HttpServletRequest</h1><blockquote><p>   HttpServletRequest 是一个接口,全限定名称为 : jakarta.servlet.http.HttpServletRequest, 他是Servlet规范中的一员。</p></blockquote><p><strong>HttpServletRequest接口的父接口:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HttpServletRequest</span> <span class="keyword">extends</span> <span class="title class_">ServletRequest</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>HttpServletRequest接口的实现类谁写的? HttpServletRequest对象是谁给创建的？</strong></p><ul><li><p>通过测试：org.apache.catalina.connector.RequestFacade 实现了 HttpServletRequest接口</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestFacade</span> <span class="keyword">implements</span> <span class="title class_">HttpServletRequest</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试结果说明：Tomcat服务器（WEB服务器、WEB容器）实现了HttpServletRequest接口，还是说明了Tomcat服务器实现了Servlet规范。而对于我们javaweb程序员来说，实际上不需要关心这个，我们只需要面向接口编程即可。我们关心的是HttpServletRequest接口中有哪些方法，这些方法可以完成什么功能！！！！</p></li></ul><p><strong>HttpServletRequest对象中都有什么信息？都包装了什么信息？</strong></p><ul><li>HttpServletRequest对象是Tomcat服务器负责创建的。这个对象中封装了什么信息？封装了HTTP的请求协议。</li><li>实际上是用户发送请求的时候，遵循了HTTP协议，发送的是HTTP的请求协议，Tomcat服务器将HTTP协议中的信息以及数据全部解析出来，然后Tomcat服务器把这些信息封装到HttpServletRequest对象当中，传给了我们javaweb程序员。</li><li>javaweb程序员面向HttpServletRequest接口编程，调用方法就可以获取到请求的信息了。</li></ul><p><strong>request和response对象的生命周期？</strong></p><ul><li>request对象和response对象，一个是请求对象，一个是响应对象。这两个对象只在当前请求中有效。</li><li>一次请求对应一个request。</li><li>两次请求则对应两个request。</li><li>…..</li></ul><p><strong>HttpServletRequest接口中的常用方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,String[]&gt; getParameterMap() 这个是获取Map</span><br><span class="line">Enumeration&lt;String&gt; <span class="title function_">getParameterNames</span><span class="params">()</span> 这个是获取Map集合中所有的key</span><br><span class="line">String[] getParameterValues(String name) 根据key获取Map集合的value</span><br><span class="line">String <span class="title function_">getParameter</span><span class="params">(String name)</span>  获取value这个一维数组当中的第一个元素。这个方法最常用。</span><br><span class="line"><span class="comment">// 以上的4个方法，和获取用户提交的数据有关系。</span></span><br></pre></td></tr></table></figure><h1 id="2-请求域-request"><a href="#2-请求域-request" class="headerlink" title="2. 请求域 - request"></a>2. 请求域 - request</h1><blockquote><p>   request实际上是一个请求域对象,相比于ServletContext的应用域,请求域范围就小的多了,生命周期也很短,请求域只在一次请求之内有效。</p></blockquote><p><strong>请求域对象的方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">setAttribute</span><span class="params">(String name, Object obj)</span>; <span class="comment">// 向域当中绑定数据。</span></span><br><span class="line">Object <span class="title function_">getAttribute</span><span class="params">(String name)</span>; <span class="comment">// 从域当中根据name获取数据。</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">removeAttribute</span><span class="params">(String name)</span>; <span class="comment">// 将域当中绑定的数据移除</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><p>在使用过程中尽量使用小的域对象，因为小的域对象占用的资源较少。</p><h1 id="3-转发"><a href="#3-转发" class="headerlink" title="3. 转发"></a>3. 转发</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一步：获取请求转发器对象</span></span><br><span class="line"><span class="type">RequestDispatcher</span> <span class="variable">dispatcher</span> <span class="operator">=</span> request.getRequestDispatcher(<span class="string">&quot;/b&quot;</span>);</span><br><span class="line"><span class="comment">// 第二步：调用转发器的forward方法完成跳转/转发</span></span><br><span class="line">dispatcher.forward(request,response);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一步和第二步代码可以联合在一起。</span></span><br><span class="line">request.getRequestDispatcher(<span class="string">&quot;/b&quot;</span>).forward(request,response);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>两个Servlet怎么共享数据</strong></p><ul><li>将数据放到ServletContext应用域当中，当然是可以的，但是应用域范围太大，占用资源太多。不建议使用。</li><li>可以将数据放到request域当中，然后AServlet转发到BServlet，保证AServlet和BServlet在同一次请求当中，这样就可以做到两个Servlet，或者多个Servlet共享同一份数据。</li></ul><p><strong>转发的下一个资源必须是一个Servlet吗？</strong></p><ul><li>不一定，只要是Tomcat服务器当中的合法资源，都是可以转发的。例如：html….</li><li>注意：转发的时候，路径的写法要注意，转发的路径以“&#x2F;”开始，不加项目名。</li></ul><h1 id="4-getParameter-和-getAttribute-区分"><a href="#4-getParameter-和-getAttribute-区分" class="headerlink" title="4. getParameter() 和 getAttribute() 区分"></a>4. getParameter() 和 getAttribute() 区分</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// uri?username=zhangsan&amp;userpwd=123&amp;sex=1</span></span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 之前一定是执行过：request.setAttribute(&quot;name&quot;, new Object())</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> request.getAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以上两个方法的区别是什么？</span></span><br><span class="line"><span class="comment">// 第一个方法：获取的是用户在浏览器上提交的数据。</span></span><br><span class="line"><span class="comment">// 第二个方法：获取的是请求域当中绑定的数据。</span></span><br></pre></td></tr></table></figure><h1 id="5-HttpServletRequest-接口的其他常用方法"><a href="#5-HttpServletRequest-接口的其他常用方法" class="headerlink" title="5. HttpServletRequest 接口的其他常用方法"></a>5. HttpServletRequest 接口的其他常用方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取客户端的IP地址</span></span><br><span class="line"><span class="type">String</span> <span class="variable">remoteAddr</span> <span class="operator">=</span> request.getRemoteAddr();</span><br><span class="line"></span><br><span class="line"><span class="comment">// get请求在请求行上提交数据。</span></span><br><span class="line"><span class="comment">// post请求在请求体中提交数据。</span></span><br><span class="line"><span class="comment">// 设置请求体的字符集。（显然这个方法是处理POST请求的乱码问题。这种方式并不能解决get请求的乱码问题。）</span></span><br><span class="line"><span class="comment">// Tomcat10之后，request请求体当中的字符集默认就是UTF-8，不需要设置字符集，不会出现乱码问题。</span></span><br><span class="line"><span class="comment">// Tomcat9前（包括9在内），如果前端请求体提交的是中文，后端获取之后出现乱码，怎么解决这个乱码？执行以下代码。</span></span><br><span class="line">request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在Tomcat9之前（包括9），响应中文也是有乱码的，怎么解决这个响应的乱码？</span></span><br><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"><span class="comment">// 在Tomcat10之后，包括10在内，响应中文的时候就不在出现乱码问题了。以上代码就不需要设置UTF-8了。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意一个细节</span></span><br><span class="line"><span class="comment">// 在Tomcat10包括10在内之后的版本，中文将不再出现乱码。（这也体现了中文地位的提升。）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// get请求乱码问题怎么解决？</span></span><br><span class="line"><span class="comment">// get请求发送的时候，数据是在请求行上提交的，不是在请求体当中提交的。</span></span><br><span class="line"><span class="comment">// get请求乱码怎么解决</span></span><br><span class="line"><span class="comment">// 方案：修改CATALINA_HOME/conf/server.xml配置文件</span></span><br><span class="line">&lt;Connector URIEncoding=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="line"><span class="comment">// 注意：从Tomcat8之后，URIEncoding的默认值就是UTF-8，所以GET请求也没有乱码问题了。</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 获取应用的根路径</span></span><br><span class="line"><span class="type">String</span> <span class="variable">contextPath</span> <span class="operator">=</span> request.getContextPath();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取请求方式</span></span><br><span class="line"><span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> request.getMethod();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取请求的URI</span></span><br><span class="line"><span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> request.getRequestURI();  <span class="comment">// /aaa/testRequest</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取servlet path</span></span><br><span class="line"><span class="type">String</span> <span class="variable">servletPath</span> <span class="operator">=</span> request.getServletPath(); <span class="comment">//   /testRequest</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">HttpServletRequest是一个接口,全限定名称为:jakarta.servlet.http.HttpServletRequest,他是Servlet规范中的一员。</summary>
    
    
    
    <category term="Java 学习" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/JavaEE/"/>
    
    
    <category term="Java 学习" scheme="http://example.com/tags/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>8. Web站点的欢迎界面和WEB-INF目录</title>
    <link href="http://example.com/2022/09/14/JavaEE/8.%20Web%E7%AB%99%E7%82%B9%E7%9A%84%E6%AC%A2%E8%BF%8E%E7%95%8C%E9%9D%A2%E5%92%8CWEB-INF%E7%9B%AE%E5%BD%95/"/>
    <id>http://example.com/2022/09/14/JavaEE/8.%20Web%E7%AB%99%E7%82%B9%E7%9A%84%E6%AC%A2%E8%BF%8E%E7%95%8C%E9%9D%A2%E5%92%8CWEB-INF%E7%9B%AE%E5%BD%95/</id>
    <published>2022-09-14T08:47:14.058Z</published>
    <updated>2022-09-14T09:21:51.867Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Web站点的欢迎界面"><a href="#1-Web站点的欢迎界面" class="headerlink" title="1. Web站点的欢迎界面"></a>1. Web站点的欢迎界面</h1><ul><li><p>什么是一个web站点的欢迎页面？</p><ul><li>对于一个webapp来说，我们是可以设置它的欢迎页面的。</li><li>设置了欢迎页面之后，当你访问这个webapp的时候，或者访问这个web站点的时候，没有指定任何“资源路径”，这个时候会默认访问你的欢迎页面。</li><li>我们一般的访问方式是：<ul><li><a href="http://localhost:8080/servlet06/login.html">http://localhost:8080/servlet06/login.html</a> 这种方式是指定了要访问的就是login.html资源。</li></ul></li><li>如果我们访问的方式是：<ul><li><a href="http://localhost:8080/servlet06">http://localhost:8080/servlet06</a> 如果我们访问的就是这个站点，没有指定具体的资源路径。它默认会访问谁呢？</li><li>默认会访问你设置的欢迎页面。</li></ul></li></ul></li><li><p>怎么设置欢迎页面呢？ </p><ul><li><p>第一步：我在IDEA工具的web目录下新建了一个文件login.html</p></li><li><p>第二步：在web.xml文件中进行了以下的配置</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>login.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注意：设置欢迎页面的时候，这个路径不需要以“/”开始。并且这个路径默认是从webapp的根下开始查找。 --&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>第三步：启动服务器，浏览器地址栏输入地址</p><ul><li><a href="http://localhost:8080/servlet07">http://localhost:8080/servlet07</a></li></ul></li></ul></li><li><p>如果在webapp的根下新建一个目录，目录中再给一个文件，那么这个欢迎页该如何设置呢？</p><ul><li><p>在webapp根下新建page1</p></li><li><p>在page1下新建page2目录</p></li><li><p>在page2目录下新建page.html页面</p></li><li><p>在web.xml文件中应该这样配置</p></li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>page1/page2/page.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注意：设置欢迎页面的时候，这个路径不需要以“/”开始。并且这个路径默认是从webapp的根下开始查找。 --&gt;</span></span><br></pre></td></tr></table></figure><p><strong>欢迎页面有两个地方可以配置：</strong></p><ul><li><p>一个是在webapp内部的web.xml文件中。（在这个地方配置的属于局部配置）</p></li><li><p>一个是在CATALINA_HOME&#x2F;conf&#x2F;web.xml文件中进行配置。（在这个地方配置的属于全局配置）</p><ul><li><pre><code class="xml">  &lt;welcome-file-list&gt;      &lt;welcome-file&gt;index.html&lt;/welcome-file&gt;      &lt;welcome-file&gt;index.htm&lt;/welcome-file&gt;      &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;  &lt;/welcome-file-list&gt;  <figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    - <span class="type">Tomcat</span>服务器的全局欢迎页面是：index.html index.htm index.jsp。如果你一个web站点没有设置局部的欢迎页面，<span class="type">Tomcat</span>服务器就会以index.html index.htm index.jsp作为一个web站点的欢迎页面。</span><br><span class="line"></span><br><span class="line">- 注意原则：局部优先原则。（就近原则）</span><br><span class="line"></span><br><span class="line">**欢迎页可以是一个<span class="type">Servlet</span>吗？**</span><br><span class="line"></span><br><span class="line">- 当然可以。</span><br><span class="line"></span><br><span class="line">- 你不要多想，欢迎页就是一个资源，既然是一个资源，那么可以是静态资源，也可以是动态资源。</span><br><span class="line"></span><br><span class="line">- 静态资源：index.html welcome.html .....</span><br><span class="line"></span><br><span class="line">- 动态资源：<span class="type">Servlet</span>类。</span><br><span class="line"></span><br><span class="line">- 步骤：</span><br><span class="line"></span><br><span class="line">    - 第一步：写一个<span class="type">Servlet</span></span><br><span class="line"></span><br><span class="line">        ```java</span><br><span class="line">        public <span class="class"><span class="keyword">class</span> <span class="title">WelcomeServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> void doGet(<span class="type">HttpServletRequest</span> request, <span class="type">HttpServletResponse</span> response) <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</span><br><span class="line">                response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">                <span class="type">PrintWriter</span> out = response.getWriter();</span><br><span class="line">                out.print(<span class="string">&quot;&lt;h1&gt;welcome to bjpowernode!&lt;/h1&gt;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>第二步：在web.xml文件中配置servlet</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>welcomeServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.bjpowernode.javaweb.servlet.WelcomeServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>welcomeServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/fdsa/fds/a/fds/af/ds/af/dsafdsafdsa<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>第三步：在web.xml文件中配置欢迎页</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>fdsa/fds/a/fds/af/ds/af/dsafdsafdsa<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="2-关于WEB-INF目录"><a href="#2-关于WEB-INF目录" class="headerlink" title="2. 关于WEB-INF目录"></a>2. 关于WEB-INF目录</h1><ul><li>在WEB-INF目录下新建了一个文件：welcome.html</li><li>打开浏览器访问：<a href="http://localhost:8080/servlet07/WEB-INF/welcome.html">http://localhost:8080/servlet07/WEB-INF/welcome.html</a> 出现了404错误。</li><li>注意：放在WEB-INF目录下的资源是受保护的。在浏览器上不能够通过路径直接访问。所以像HTML、CSS、JS、image等静态资源一定要放到WEB-INF目录之外。</li></ul>]]></content>
    
    
    <summary type="html">什么是一个web站点的欢迎页面？web站点的欢迎界面是当访问webapp时没有指定资源路径时候,便会默认访问欢迎界面</summary>
    
    
    
    <category term="Java 学习" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/JavaEE/"/>
    
    
    <category term="Java 学习" scheme="http://example.com/tags/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>7. HttpServlet 源码解析</title>
    <link href="http://example.com/2022/09/14/JavaEE/7.%20HttpServlet%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>http://example.com/2022/09/14/JavaEE/7.%20HttpServlet%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</id>
    <published>2022-09-14T08:43:46.122Z</published>
    <updated>2022-09-14T09:21:35.016Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-HttpServlet"><a href="#1-HttpServlet" class="headerlink" title="1. HttpServlet"></a>1. HttpServlet</h1><ul><li><p>HttpServlet类是专门为HTTP协议准备的。比GenericServlet更加适合HTTP协议下的开发。</p></li><li><p>HttpServlet在哪个包下？</p><ul><li>jakarta.servlet.http.HttpServlet</li></ul></li><li><p>到目前为止我们接触了servlet规范中哪些接口？</p><ul><li>jakarta.servlet.Servlet  核心接口（接口）</li><li>jakarta.servlet.ServletConfig Servlet配置信息接口（接口）</li><li>jakarta.servlet.ServletContext Servlet上下文接口（接口）</li><li>jakarta.servlet.ServletRequest Servlet请求接口（接口）</li><li>jakarta.servlet.ServletResponse Servlet响应接口（接口）</li><li>jakarta.servlet.ServletException Servlet异常（类）</li><li>jakarta.servlet.GenericServlet 标准通用的Servlet类（抽象类）</li></ul></li><li><p>http包下都有哪些类和接口呢？jakarta.servlet.http.*;</p><ul><li>jakarta.servlet.http.HttpServlet （HTTP协议专用的Servlet类，抽象类）</li><li>jakarta.servlet.http.HttpServletRequest （HTTP协议专用的请求对象）</li><li>jakarta.servlet.http.HttpServletResponse （HTTP协议专用的响应对象）</li></ul></li><li><p>HttpServletRequest对象中封装了什么信息？</p><ul><li>HttpServletRequest，简称request对象。</li><li>HttpServletRequest中封装了请求协议的全部内容。</li><li>Tomcat服务器（WEB服务器）将“请求协议”中的数据全部解析出来，然后将这些数据全部封装到request对象当中了。</li><li>也就是说，我们只要面向HttpServletRequest，就可以获取请求协议中的数据。</li></ul></li><li><p>HttpServletResponse对象是专门用来响应HTTP协议到浏览器的。</p></li></ul><h1 id="2-源码解析"><a href="#2-源码解析" class="headerlink" title="2. 源码解析"></a>2. 源码解析</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"><span class="comment">// 用户第一次请求，创建HelloServlet对象的时候，会执行这个无参数构造方法。</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HelloServlet</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//override 重写 doGet方法</span></span><br><span class="line">    <span class="comment">//override 重写 doPost方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">GenericServlet</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span>, ServletConfig,</span><br><span class="line">        java.io.Serializable &#123;</span><br><span class="line">           </span><br><span class="line"><span class="comment">// 用户第一次请求的时候，HelloServlet对象第一次被创建之后，这个init方法会执行。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="built_in">this</span>.config = config;</span><br><span class="line">        <span class="built_in">this</span>.init();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 用户第一次请求的时候，带有参数的init(ServletConfig config)执行之后，会执行这个没有参数的init()</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="comment">// NOOP by default</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HttpServlet模板类。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">HttpServlet</span> <span class="keyword">extends</span> <span class="title class_">GenericServlet</span> &#123;</span><br><span class="line">    <span class="comment">// 用户发送第一次请求的时候这个service会执行</span></span><br><span class="line">    <span class="comment">// 用户发送第N次请求的时候，这个service方法还是会执行。</span></span><br><span class="line">    <span class="comment">// 用户只要发送一次请求，这个service方法就会执行一次。</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest req, ServletResponse res)</span></span><br><span class="line">        <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        HttpServletRequest  request;</span><br><span class="line">        HttpServletResponse response;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 将ServletRequest和ServletResponse向下转型为带有Http的HttpServletRequest和HttpServletResponse</span></span><br><span class="line">            request = (HttpServletRequest) req;</span><br><span class="line">            response = (HttpServletResponse) res;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassCastException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServletException</span>(lStrings.getString(<span class="string">&quot;http.non_http&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 调用重载的service方法。</span></span><br><span class="line">        service(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 这个service方法的两个参数都是带有Http的。</span></span><br><span class="line">    <span class="comment">// 这个service是一个模板方法。</span></span><br><span class="line">    <span class="comment">// 在该方法中定义核心算法骨架，具体的实现步骤延迟到子类中去完成。</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span><br><span class="line">        <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 获取请求方式</span></span><br><span class="line">        <span class="comment">// 这个请求方式最终可能是：&quot;&quot;</span></span><br><span class="line">        <span class="comment">// 注意：request.getMethod()方法获取的是请求方式，可能是七种之一：</span></span><br><span class="line">        <span class="comment">// GET POST PUT DELETE HEAD OPTIONS TRACE</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> req.getMethod();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果请求方式是GET请求，则执行doGet方法。</span></span><br><span class="line">        <span class="keyword">if</span> (method.equals(METHOD_GET)) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">lastModified</span> <span class="operator">=</span> getLastModified(req);</span><br><span class="line">            <span class="keyword">if</span> (lastModified == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// servlet doesn&#x27;t support if-modified-since, no reason</span></span><br><span class="line">                <span class="comment">// to go through further expensive logic</span></span><br><span class="line">                doGet(req, resp);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">long</span> ifModifiedSince;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ifModifiedSince = req.getDateHeader(HEADER_IFMODSINCE);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IllegalArgumentException iae) &#123;</span><br><span class="line">                    <span class="comment">// Invalid date header - proceed as if none was set</span></span><br><span class="line">                    ifModifiedSince = -<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (ifModifiedSince &lt; (lastModified / <span class="number">1000</span> * <span class="number">1000</span>)) &#123;</span><br><span class="line">                    <span class="comment">// If the servlet mod time is later, call doGet()</span></span><br><span class="line">                    <span class="comment">// Round down to the nearest second for a proper compare</span></span><br><span class="line">                    <span class="comment">// A ifModifiedSince of -1 will always be less</span></span><br><span class="line">                    maybeSetLastModified(resp, lastModified);</span><br><span class="line">                    doGet(req, resp);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_HEAD)) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">lastModified</span> <span class="operator">=</span> getLastModified(req);</span><br><span class="line">            maybeSetLastModified(resp, lastModified);</span><br><span class="line">            doHead(req, resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_POST)) &#123;</span><br><span class="line">            <span class="comment">// 如果请求方式是POST请求，则执行doPost方法。</span></span><br><span class="line">            doPost(req, resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_PUT)) &#123;</span><br><span class="line">            doPut(req, resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_DELETE)) &#123;</span><br><span class="line">            doDelete(req, resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_OPTIONS)) &#123;</span><br><span class="line">            doOptions(req,resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_TRACE)) &#123;</span><br><span class="line">            doTrace(req,resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            <span class="comment">// Note that this means NO servlet supports whatever</span></span><br><span class="line">            <span class="comment">// method was requested, anywhere on this server.</span></span><br><span class="line">            <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">errMsg</span> <span class="operator">=</span> lStrings.getString(<span class="string">&quot;http.method_not_implemented&quot;</span>);</span><br><span class="line">            Object[] errArgs = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">1</span>];</span><br><span class="line">            errArgs[<span class="number">0</span>] = method;</span><br><span class="line">            errMsg = MessageFormat.format(errMsg, errArgs);</span><br><span class="line"></span><br><span class="line">            resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span><br><span class="line">        <span class="keyword">throws</span> ServletException, IOException&#123;</span><br><span class="line">        <span class="comment">// 报405错误</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> lStrings.getString(<span class="string">&quot;http.method_get_not_supported&quot;</span>);</span><br><span class="line">        sendMethodNotAllowed(req, resp, msg);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span><br><span class="line">        <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 报405错误</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> lStrings.getString(<span class="string">&quot;http.method_post_not_supported&quot;</span>);</span><br><span class="line">        sendMethodNotAllowed(req, resp, msg);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">通过以上源代码分析：</span></span><br><span class="line"><span class="comment">假设前端发送的请求是get请求，后端程序员重写的方法是doPost</span></span><br><span class="line"><span class="comment">假设前端发送的请求是post请求，后端程序员重写的方法是doGet</span></span><br><span class="line"><span class="comment">会发生什么呢？</span></span><br><span class="line"><span class="comment">发生405这样的一个错误。</span></span><br><span class="line"><span class="comment">405表示前端的错误，发送的请求方式不对。和服务器不一致。不是服务器需要的请求方式。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">通过以上源代码可以知道：只要HttpServlet类中的doGet方法或doPost方法执行了，必然405.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">怎么避免405的错误呢？</span></span><br><span class="line"><span class="comment">后端重写了doGet方法，前端一定要发get请求。</span></span><br><span class="line"><span class="comment">后端重写了doPost方法，前端一定要发post请求。</span></span><br><span class="line"><span class="comment">这样可以避免405错误。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">这种前端到底需要发什么样的请求，其实应该后端说了算。后端让发什么方式，前端就得发什么方式。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">有的人，你会看到为了避免405错误，在Servlet类当中，将doGet和doPost方法都进行了重写。</span></span><br><span class="line"><span class="comment">这样，确实可以避免405的发生，但是不建议，405错误还是有用的。该报错的时候就应该让他报错。</span></span><br><span class="line"><span class="comment">如果你要是同时重写了doGet和doPost，那还不如你直接重写service方法好了。这样代码还能</span></span><br><span class="line"><span class="comment">少写一点。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li><p>我们编写的HelloServlet直接继承HttpServlet，直接重写HttpServlet类中的service()方法行吗？</p><ul><li>可以，只不过享受不到405错误。享受不到HTTP协议专属的东西。</li></ul></li><li><p>到今天我们终于得到了最终的一个Servlet类的开发步骤：</p><ul><li>第一步：编写一个Servlet类，直接继承HttpServlet</li><li>第二步：重写doGet方法或者重写doPost方法，到底重写谁，javaweb程序员说了算。</li><li>第三步：将Servlet类配置到web.xml文件当中。</li><li>第四步：准备前端的页面（form表单），form表单中指定请求路径即可。</li></ul></li></ul>]]></content>
    
    
    <summary type="html">HttpServlet类是专门为HTTP协议准备的。比GenericServlet更加适合HTTP协议下的开发。</summary>
    
    
    
    <category term="Java 学习" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/JavaEE/"/>
    
    
    <category term="Java 学习" scheme="http://example.com/tags/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>6. 模板方法设计模式</title>
    <link href="http://example.com/2022/09/13/JavaEE/6.%20%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2022/09/13/JavaEE/6.%20%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-09-13T14:52:52.568Z</published>
    <updated>2022-09-14T09:39:38.521Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-什么是设计模式"><a href="#1-什么是设计模式" class="headerlink" title="1. 什么是设计模式?"></a>1. 什么是设计模式?</h1><blockquote><p>  某个问题的固定的解决方案。(可以被重复使用。) 也就是解决某个问题的固定套路….</p></blockquote><p><strong>你知道哪些设计模式？</strong></p><ul><li>GoF设计模式：<ul><li>通常我们所说的23种设计模式。（Gang of Four：4人组提出的设计模式）</li><li>单例模式</li><li>工厂模式</li><li>代理模式</li><li>门面模式</li><li>责任链设计模式</li><li>观察者模式</li><li>模板方法设计模式</li><li>…..</li></ul></li><li>JavaEE设计模式：<ul><li>DAO</li><li>DTO</li><li>VO</li><li>PO</li><li>pojo</li><li>….</li></ul></li><li>….</li></ul><h1 id="2-什么是模板方法设计模式"><a href="#2-什么是模板方法设计模式" class="headerlink" title="2. 什么是模板方法设计模式"></a>2. 什么是模板方法设计模式</h1><p>模板方法模式（Template Method Pattern）：定义一个操作中的算法的框架， 而将一些步骤延迟到子类中。 使得子类可以不改 变一个算法的结构即可重定义该算法的某些特定步骤。</p><p>说人话：父类模板方法定义不变的流程，子类重写流程中的方法。</p><h1 id="3-模板方法的实现"><a href="#3-模板方法的实现" class="headerlink" title="3. 模板方法的实现"></a>3. 模板方法的实现</h1><p><strong>Person.java (模板类)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.template;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">// 开始一天(定义为final类,让子类必须运行此方法,属于模板方法定义的框架)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">day</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 调用基本方法，完成固定逻辑</span></span><br><span class="line">        getUp();</span><br><span class="line">        eat();</span><br><span class="line">        doMake();</span><br><span class="line">        sleep();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 起床</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUp</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Get up&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 吃饭</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Eat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 做事情 (学生和老师做事情不一样,所以将此方法抽象为模板方法,让子类自己来实现)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">doMake</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 睡觉</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Sleep&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Teacher.java (实现类)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.template;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">// 实现 Person 的模板类, 老师的任务是Teach</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doMake</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Teach&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Student.java (实现类)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.template;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">// 实现 Person 的模板类, 学生的任务是Study</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doMake</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Study&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-优缺点"><a href="#4-优缺点" class="headerlink" title="4. 优缺点"></a>4. 优缺点</h1><p><strong>优点</strong></p><ol><li><p>封装不变部分， 扩展可变部分， 把认为是不变部分的算法封装到父类实现， 而可变部分的则可以通过继承来继续扩展。</p></li><li><p>提取公共部分代码， 便于维护</p></li><li><p>行为由父类控制， 子类实现， 基本方法是由子类实现的， 因此子类可以通过扩展的方式增加相应的功能， 符合开闭原则。</p></li></ol><p><strong>缺点</strong></p><ol><li><p>子类执行的结果影响了父类的结果，这和我们平时设计习惯颠倒了，在复杂项目中，会带来阅读上的难度。</p></li><li><p>可能引起子类泛滥和为了继承而继承的问题</p></li></ol>]]></content>
    
    
    <summary type="html">某个问题的固定的解决方案。(可以被重复使用。) 也就是解决某个问题的固定套路....</summary>
    
    
    
    <category term="Java 学习" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/JavaEE/"/>
    
    
    <category term="Java 学习" scheme="http://example.com/tags/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>5. Http协议</title>
    <link href="http://example.com/2022/09/13/JavaEE/5.%20Http%E5%8D%8F%E8%AE%AE/"/>
    <id>http://example.com/2022/09/13/JavaEE/5.%20Http%E5%8D%8F%E8%AE%AE/</id>
    <published>2022-09-13T14:45:58.834Z</published>
    <updated>2022-09-13T15:15:45.502Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-什么是协议"><a href="#1-什么是协议" class="headerlink" title="1. 什么是协议?"></a>1. 什么是协议?</h1><ul><li>协议实际上是某些人，或者某些组织提前制定好的一套规范，大家都按照这个规范来，这样可以做到沟通无障碍。</li><li>协议就是一套规范，就是一套标准。由其他人或其他组织来负责制定的。</li><li>我说的话你能听懂，你说的话，我也能听懂，这说明我们之间是有一套规范的，一套协议的，这套协议就是：中国普通话协议。我们都遵守这套协议，我们之间就可以沟通无障碍。</li></ul><h1 id="2-什么是Http协议"><a href="#2-什么是Http协议" class="headerlink" title="2. 什么是Http协议?"></a>2. 什么是Http协议?</h1><ul><li>HTTP协议：是W3C制定的一种超文本传输协议。（通信协议：发送消息的模板提前被制定好。）</li><li>W3C：<ul><li>万维网联盟组织</li><li>负责制定标准的：HTTP HTML4.0 HTML5 XML DOM等规范都是W3C制定的。</li><li>万维网之父：蒂姆·伯纳斯·李</li></ul></li><li>什么是超文本？<ul><li>超文本说的就是：不是普通文本，比如流媒体：声音、视频、图片等。</li><li>HTTP协议支持：不但可以传送普通字符串，同样支持传递声音、视频、图片等流媒体信息。</li></ul></li><li>这种协议游走在B和S之间。B向S发数据要遵循HTTP协议。S向B发数据同样需要遵循HTTP协议。这样B和S才能解耦合。</li><li>什么是解耦合？<ul><li>B不依赖S。</li><li>S也不依赖B。</li></ul></li><li>B&#x2F;S表示：B&#x2F;S结构的系统（浏览器访问WEB服务器的系统）</li><li>浏览器   向   WEB服务器发送数据，叫做：请求（request)</li><li>WEB服务器   向   浏览器发送数据，叫做：响应（response）</li><li>HTTP协议包括：<ul><li>请求协议<ul><li>浏览器  向   WEB服务器发送数据的时候，这个发送的数据需要遵循一套标准，这套标准中规定了发送的数据具体格式。</li></ul></li><li>响应协议<ul><li>WEB服务器  向  浏览器发送数据的时候，这个发送的数据需要遵循一套标准，这套标准中规定了发送的数据具体格式。</li></ul></li></ul></li><li>HTTP协议就是提前制定好的一种消息模板。<ul><li>不管你是哪个品牌的浏览器，都是这么发。</li><li>不管你是哪个品牌的WEB服务器，都是这么发。</li><li>FF浏览器  可以向 Tomcat发送请求，也可以向Jetty服务器发送请求。浏览器不依赖具体的服务器品牌。</li><li>WEB服务器也不依赖具体的浏览器品牌。可以是FF浏览器，也可以是Chrome浏览器，可以是IE，都行。</li></ul></li></ul><h1 id="3-Http的请求协议-B-gt-S"><a href="#3-Http的请求协议-B-gt-S" class="headerlink" title="3. Http的请求协议 (B -&gt; S)"></a>3. Http的请求协议 (B -&gt; S)</h1><ul><li><p>HTTP的请求协议包括：4部分</p><ul><li>请求行</li><li>请求头</li><li>空白行</li><li>请求体</li></ul></li><li><p>HTTP请求协议的具体报文：GET请求</p>  <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">GET <span class="regexp">/servlet05/g</span>etServlet?username=lucy&amp;userpwd=<span class="number">1111</span> HTTP/<span class="number">1.1</span>                           请求行</span><br><span class="line">Host: localhost:<span class="number">8080</span>                                                                    请求头</span><br><span class="line">Connection: keep-alive</span><br><span class="line">sec-ch-ua: <span class="string">&quot;Google Chrome&quot;</span>;v=<span class="string">&quot;95&quot;</span>, <span class="string">&quot;Chromium&quot;</span>;v=<span class="string">&quot;95&quot;</span>, <span class="string">&quot;;Not A Brand&quot;</span>;v=<span class="string">&quot;99&quot;</span></span><br><span class="line">sec-ch-ua-mobile: ?<span class="number">0</span></span><br><span class="line">sec-ch-ua-platform: <span class="string">&quot;Windows&quot;</span></span><br><span class="line">Upgrade-Insecure-Requests: <span class="number">1</span></span><br><span class="line">User-Agent: Mozilla<span class="regexp">/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/</span><span class="number">537.36</span> (KHTML, like Gecko) Chrome<span class="regexp">/95.0.4638.54 Safari/</span><span class="number">537.36</span></span><br><span class="line">Accept: text<span class="regexp">/html,application/</span>xhtml+xml,application<span class="regexp">/xml;q=0.9,image/</span>avif,image<span class="regexp">/webp,image/</span>apng,*<span class="regexp">/*;q=0.8,application/</span>signed-exchange;v=b3;q=<span class="number">0.9</span></span><br><span class="line">Sec-Fetch-Site: same-origin</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-User: ?<span class="number">1</span></span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Referer: http:<span class="regexp">//</span>localhost:<span class="number">8080</span><span class="regexp">/servlet05/i</span>ndex.html</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=<span class="number">0.9</span></span><br><span class="line">                                                                                        空白行</span><br><span class="line">                                                                                        请求体</span><br></pre></td></tr></table></figure></li><li><p>HTTP请求协议的具体报文：POST请求</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">POST <span class="regexp">/servlet05/</span>postServlet HTTP/<span class="number">1.1</span>                                                  请求行</span><br><span class="line">Host: localhost:<span class="number">8080</span>                                                                  请求头</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Length: <span class="number">25</span></span><br><span class="line">Cache-Control: max-age=<span class="number">0</span></span><br><span class="line">sec-ch-ua: <span class="string">&quot;Google Chrome&quot;</span>;v=<span class="string">&quot;95&quot;</span>, <span class="string">&quot;Chromium&quot;</span>;v=<span class="string">&quot;95&quot;</span>, <span class="string">&quot;;Not A Brand&quot;</span>;v=<span class="string">&quot;99&quot;</span></span><br><span class="line">sec-ch-ua-mobile: ?<span class="number">0</span></span><br><span class="line">sec-ch-ua-platform: <span class="string">&quot;Windows&quot;</span></span><br><span class="line">Upgrade-Insecure-Requests: <span class="number">1</span></span><br><span class="line">Origin: http:<span class="regexp">//</span>localhost:<span class="number">8080</span></span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">User-Agent: Mozilla<span class="regexp">/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/</span><span class="number">537.36</span> (KHTML, like Gecko) Chrome<span class="regexp">/95.0.4638.54 Safari/</span><span class="number">537.36</span></span><br><span class="line">Accept: text<span class="regexp">/html,application/</span>xhtml+xml,application<span class="regexp">/xml;q=0.9,image/</span>avif,image<span class="regexp">/webp,image/</span>apng,*<span class="regexp">/*;q=0.8,application/</span>signed-exchange;v=b3;q=<span class="number">0.9</span></span><br><span class="line">Sec-Fetch-Site: same-origin</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-User: ?<span class="number">1</span></span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Referer: http:<span class="regexp">//</span>localhost:<span class="number">8080</span><span class="regexp">/servlet05/i</span>ndex.html</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=<span class="number">0.9</span></span><br><span class="line">                                                                                      空白行</span><br><span class="line">username=lisi&amp;userpwd=<span class="number">123</span>                                                             请求体</span><br></pre></td></tr></table></figure></li><li><p>请求行</p><ul><li>包括三部分：<ul><li>第一部分：请求方式（7种）<ul><li>get（常用的）</li><li>post（常用的）</li><li>delete</li><li>put</li><li>head</li><li>options</li><li>trace</li></ul></li><li>第二部分：URI<ul><li>什么是URI？ 统一资源标识符。代表网络中某个资源的名字。但是通过URI是无法定位资源的。</li><li>什么是URL？统一资源定位符。代表网络中某个资源，同时，通过URL是可以定位到该资源的。</li><li>URI和URL什么关系，有什么区别？<ul><li>URL包括URI</li><li><a href="http://localhost:8080/servlet05/index.html">http://localhost:8080/servlet05/index.html</a> 这是URL。</li><li>&#x2F;servlet05&#x2F;index.html 这是URI。</li></ul></li></ul></li><li>第三部分：HTTP协议版本号</li></ul></li></ul></li><li><p>请求头</p><ul><li>请求的主机</li><li>主机的端口</li><li>浏览器信息</li><li>平台信息</li><li>cookie等信息</li><li>….</li></ul></li><li><p>空白行</p><ul><li>空白行是用来区分“请求头”和“请求体”</li></ul></li><li><p>请求体</p><ul><li>向服务器发送的具体数据。</li></ul></li></ul><h1 id="4-HTTP的响应协议（S-–-gt-B）"><a href="#4-HTTP的响应协议（S-–-gt-B）" class="headerlink" title="4. HTTP的响应协议（S –&gt; B）"></a>4. HTTP的响应协议（S –&gt; B）</h1><ul><li><p>HTTP的响应协议包括：4部分</p><ul><li>状态行</li><li>响应头</li><li>空白行</li><li>响应体</li></ul></li><li><p>HTTP响应协议的具体报文：</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 ok                                     状态行</span><br><span class="line">Content-Type: text/html;charset=UTF-8               响应头</span><br><span class="line">Content-Length: 160</span><br><span class="line">Date: Mon, 08 Nov 2021 13:19:32 GMT</span><br><span class="line">Keep-Alive: timeout=20</span><br><span class="line">Connection: keep-alive</span><br><span class="line">                                                    空白行</span><br><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span>                                     响应体</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>from get servlet<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>from get servlet<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>状态行</p><ul><li>三部分组成<ul><li>第一部分：协议版本号（HTTP&#x2F;1.1）</li><li>第二部分：状态码（HTTP协议中规定的响应状态号。不同的响应结果对应不同的号码。）<ul><li>200 表示请求响应成功，正常结束。</li><li>404表示访问的资源不存在，通常是因为要么是你路径写错了，要么是路径写对了，但是服务器中对应的资源并没有启动成功。总之404错误是前端错误。</li><li>405表示前端发送的请求方式与后端请求的处理方式不一致时发生：<ul><li>比如：前端是POST请求，后端的处理方式按照get方式进行处理时，发生405</li><li>比如：前端是GET请求，后端的处理方式按照post方式进行处理时，发生405</li></ul></li><li>500表示服务器端的程序出现了异常。一般会认为是服务器端的错误导致的。</li><li>以4开始的，一般是浏览器端的错误导致的。</li><li>以5开始的，一般是服务器端的错误导致的。</li></ul></li><li>第三部分：状态的描述信息<ul><li>ok 表示正常成功结束。</li><li>not found 表示资源找不到。</li></ul></li></ul></li></ul></li><li><p>响应头：</p><ul><li>响应的内容类型</li><li>响应的内容长度</li><li>响应的时间</li><li>….</li></ul></li><li><p>空白行：</p><ul><li>用来分隔“响应头”和“响应体”的。</li></ul></li><li><p>响应体：</p><ul><li>响应体就是响应的正文，这些内容是一个长的字符串，这个字符串被浏览器渲染，解释并执行，最终展示出效果。</li></ul></li></ul><p><strong>注意</strong></p><ul><li><p>怎么查看的协议内容？</p><ul><li>使用chrome浏览器：F12。然后找到network，通过这个面板可以查看协议的具体内容。</li></ul></li></ul><h1 id="5-GET和POST"><a href="#5-GET和POST" class="headerlink" title="5. GET和POST"></a>5. GET和POST</h1><p><strong>怎么向服务器发送GET请求，怎么向服务器发送POST请求？</strong></p><ul><li>到目前为止，只有一种情况可以发送POST请求：使用form表单，并且form标签中的method属性值为：method&#x3D;”post”。</li><li>其他所有情况一律都是get请求：<ul><li>在浏览器地址栏上直接输入URL，敲回车，属于get请求。</li><li>在浏览器上直接点击超链接，属于get请求。</li><li>使用form表单提交数据时，form标签中没有写method属性，默认就是get</li><li>或者使用form的时候，form标签中method属性值为：method&#x3D;”get”</li><li>….</li></ul></li></ul><p><strong>GET请求和POST请求有什么区别？</strong></p><ul><li>get请求发送数据的时候，数据会挂在URI的后面，并且在URI后面添加一个“?”，”?”后面是数据。这样会导致发送的数据回显在浏览器的地址栏上。（get请求在“请求行”上发送数据）<ul><li><a href="http://localhost:8080/servlet05/getServlet?username=zhangsan&amp;userpwd=1111">http://localhost:8080/servlet05/getServlet?username=zhangsan&amp;userpwd=1111</a></li></ul></li><li>post请求发送数据的时候，在请求体当中发送。不会回显到浏览器的地址栏上。也就是说post发送的数据，在浏览器地址栏上看不到。（post在“请求体”当中发送数据）</li><li>get请求只能发送普通的字符串。并且发送的字符串长度有限制，不同的浏览器限制不同。这个没有明确的规范。</li><li>get请求无法发送大数据量。</li><li>post请求可以发送任何类型的数据，包括普通字符串，流媒体等信息：视频、声音、图片。</li><li>post请求可以发送大数据量，理论上没有长度限制。</li><li>get请求在W3C中是这样说的：get请求比较适合从服务器端获取数据。</li><li>post请求在W3C中是这样说的：post请求比较适合向服务器端传送数据。</li><li>get请求是安全的。get请求是绝对安全的。为什么？因为get请求只是为了从服务器上获取数据。不会对服务器造成威胁。（get本身是安全的，你不要用错了。用错了之后又冤枉人家get不安全，你这样不好（太坏了），那是你自己的问题，不是get请求的问题。）</li><li>post请求是危险的。为什么？因为post请求是向服务器提交数据，如果这些数据通过后门的方式进入到服务器当中，服务器是很危险的。另外post是为了提交数据，所以一般情况下拦截请求的时候，大部分会选择拦截（监听）post请求。</li><li>get请求支持缓存。<ul><li><a href="https://n.sinaimg.cn/finance/590/w240h350/20211101/b40c-b425eb67cabc342ff5b9dc018b4b00cc.jpg">https://n.sinaimg.cn/finance/590/w240h350/20211101/b40c-b425eb67cabc342ff5b9dc018b4b00cc.jpg</a></li><li>任何一个get请求最终的“响应结果”都会被浏览器缓存起来。在浏览器缓存当中：<ul><li>一个get请求的路径a  对应  一个资源。</li><li>一个get请求的路径b  对应  一个资源。</li><li>一个get请求的路径c  对应  一个资源。</li><li>……</li></ul></li><li>实际上，你只要发送get请求，浏览器做的第一件事都是先从本地浏览器缓存中找，找不到的时候才会去服务器上获取。这种缓存机制目的是为了提高用户的体验。</li><li>有没有这样一个需求：我们不希望get请求走缓存，怎么办？怎么避免走缓存？我希望每一次这个get请求都去服务器上找资源，我不想从本地浏览器的缓存中取。<ul><li>只要每一次get请求的请求路径不同即可。</li><li><a href="https://n.sinaimg.cn/finance/590/w240h350/20211101/7cabc342ff5b9dc018b4b00cc.jpg?t=789789787897898">https://n.sinaimg.cn/finance/590/w240h350/20211101/7cabc342ff5b9dc018b4b00cc.jpg?t=789789787897898</a></li><li><a href="https://n.sinaimg.cn/finance/590/w240h350/20211101/7cabc342ff5b9dc018b4b00cc.jpg?t=789789787897899">https://n.sinaimg.cn/finance/590/w240h350/20211101/7cabc342ff5b9dc018b4b00cc.jpg?t=789789787897899</a></li><li><a href="https://n.sinaimg.cn/finance/590/w240h350/20211101/7cabc342ff5b9dc018b4b00cc.jpg?t=%E7%B3%BB%E7%BB%9F%E6%AF%AB%E7%A7%92%E6%95%B0">https://n.sinaimg.cn/finance/590/w240h350/20211101/7cabc342ff5b9dc018b4b00cc.jpg?t=系统毫秒数</a></li><li>怎么解决？可以在路径的后面添加一个每时每刻都在变化的“时间戳”，这样，每一次的请求路径都不一样，浏览器就不走缓存了。</li></ul></li></ul></li><li>post请求不支持缓存。（POST是用来修改服务器端的资源的。）<ul><li>post请求之后，服务器“响应的结果”不会被浏览器缓存起来。因为这个缓存没有意义。</li></ul></li></ul><p><strong>GET请求和POST请求如何选择，什么时候使用GET请求，什么时候使用POST请求？</strong></p><ul><li><p>怎么选择GET请求和POST请求呢？衡量标准是什么呢？你这个请求是想获取服务器端的数据，还是想向服务器发送数据。如果你是想从服务器上获取资源，建议使用GET请求，如果你这个请求是为了向服务器提交数据，建议使用POST请求。</p></li><li><p>大部分的form表单提交，都是post方式，因为form表单中要填写大量的数据，这些数据是收集用户的信息，一般是需要传给服务器，服务器将这些数据保存&#x2F;修改等。</p></li><li><p>如果表单中有敏感信息，还是建议适用post请求，因为get请求会回显敏感信息到浏览器地址栏上。（例如：密码信息）</p></li><li><p>做文件上传，一定是post请求。要传的数据不是普通文本。</p></li><li><p>其他情况都可以使用get请求。</p></li><li><p>不管你是get请求还是post请求，发送的请求数据格式是完全相同的，只不过位置不同，格式都是统一的：</p><ul><li>name&#x3D;value&amp;name&#x3D;value&amp;name&#x3D;value&amp;name&#x3D;value</li><li>name是什么？<ul><li>以form表单为例：form表单中input标签的name。</li></ul></li><li>value是什么？<ul><li>以form表单为例：form表单中input标签的value。</li></ul></li></ul></li></ul>]]></content>
    
    
    <summary type="html">什么是协议？协议实际上是某些人，或者某些组织提前制定好的一套规范，大家都按照这个规范来，这样可以做到沟通无障碍。</summary>
    
    
    
    <category term="Java 学习" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/JavaEE/"/>
    
    
    <category term="Java 学习" scheme="http://example.com/tags/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>4. ServletConfig与ServletContext详解</title>
    <link href="http://example.com/2022/09/13/JavaEE/4.%20ServletConfig%E4%B8%8EServletContext%E8%AF%A6%E8%A7%A3/"/>
    <id>http://example.com/2022/09/13/JavaEE/4.%20ServletConfig%E4%B8%8EServletContext%E8%AF%A6%E8%A7%A3/</id>
    <published>2022-09-13T14:33:36.646Z</published>
    <updated>2022-09-13T15:14:18.146Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-ServletConfig"><a href="#1-ServletConfig" class="headerlink" title="1. ServletConfig"></a>1. ServletConfig</h1><p><strong>什么是ServletConfig?</strong></p><p>ServletConfig是指当前servlet在web.xml文件中的配置信息。ServletConfig对象中封装了<servlet></servlet>标签中的配置信息。（web.xml文件中servlet的配置信息）</p><ul><li><p>一个Servlet对应一个ServletConfig对象。100个Servlet对象则对应100个ServletConfig对象。</p></li><li><p>Servlet对象是Tomcat服务器创建，并且ServletConfig对象也是Tomcat服务器创建。并且默认情况下，他们都是在用户发送第一次请求的时候创建。</p></li><li><p>Tomcat服务器调用Servlet对象的init方法的时候需要传一个ServletConfig对象的参数给init方法。</p></li><li><p>ServletConfig接口的实现类是Tomcat服务器给实现的。（Tomcat服务器说的就是WEB服务器。）</p></li></ul><p><strong>ServletConfig接口有哪些常用的方法？</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getInitParameter</span><span class="params">(String name)</span>; <span class="comment">// 通过初始化参数的name获取value</span></span><br><span class="line"><span class="keyword">public</span> Enumeration&lt;String&gt; <span class="title function_">getInitParameterNames</span><span class="params">()</span>; <span class="comment">// 获取所有的初始化参数的name</span></span><br><span class="line"><span class="keyword">public</span> ServletContext <span class="title function_">getServletContext</span><span class="params">()</span>; <span class="comment">// 获取ServletContext对象</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getServletName</span><span class="params">()</span>; <span class="comment">// 获取Servlet的name</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><p>以上方法在Servlet类当中，都可以使用this去调用。因为GenericServlet实现了ServletConfig接口。</p><h1 id="2-ServletContext"><a href="#2-ServletContext" class="headerlink" title="2. ServletContext"></a>2. ServletContext</h1><p><strong>什么是ServletContext?</strong></p><p>Tomcat服务器中有一个webapps，这个webapps下可以存放webapp，可以存放多个webapp，假设有100个webapp，那么就有100个ServletContext对象。但是，总之，一个应用，一个webapp肯定是只有一个ServletContext对象。ServletContext被称为Servlet上下文对象。（Servlet对象的四周环境对象。）一个ServletContext对象通常对应的是一个web.xml文件。</p><ul><li><p>只要在同一个webapp当中，只要在同一个应用当中，所有的Servlet对象都是共享同一个ServletContext对象的。</p></li><li><p>ServletContext对象在服务器启动阶段创建，在服务器关闭的时候销毁。这就是ServletContext对象的生命周期。ServletContext对象是应用级对象。</p></li><li><p>ServletContext对应显示生活中的什么例子呢？</p><ul><li>一个教室里有多个学生，那么每一个学生就是一个Servlet，这些学生都在同一个教室当中，那么我们可以把这个教室叫做ServletContext对象。那么也就是说放在这个ServletContext对象（环境）当中的数据，在同一个教室当中，物品都是共享的。比如：教室中有一个空调，所有的学生都可以操作。可见，空调是共享的。因为空调放在教室当中。教室就是ServletContext对象。</li></ul></li><li><p>ServletContext是一个接口，Tomcat服务器对ServletContext接口进行了实现。</p><ul><li>ServletContext对象的创建也是Tomcat服务器来完成的。启动webapp的时候创建的。</li></ul></li></ul><p><strong>ServletContext接口中的常用方法</strong></p><ul><li><strong>getInitParameter() 和 getInitParameterNames()</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getInitParameter</span><span class="params">(String name)</span>; <span class="comment">// 通过初始化参数的name获取value</span></span><br><span class="line"><span class="keyword">public</span> Enumeration&lt;String&gt; <span class="title function_">getInitParameterNames</span><span class="params">()</span>; <span class="comment">// 获取所有的初始化参数的name</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--以上两个方法是ServletContext对象的方法，这个方法获取的是什么信息？是以下的配置信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>pageSize<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>10<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>startIndex<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>0<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注意：以上的配置信息属于应用级的配置信息，一般一个项目中共享的配置信息会放到以上的标签当中。--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--如果你的配置信息只是想给某一个servlet作为参考，那么你配置到servlet标签当中即可，使用ServletConfig对象来获取。--&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>getContextPath() 获取应用的根路径</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取应用的根路径（非常重要），因为在java源代码当中有一些地方可能会需要应用的根路径，这个方法可以动态获取应用的根路径</span></span><br><span class="line"><span class="comment">// 在java源码当中，不要将应用的根路径写死，因为你永远都不知道这个应用在最终部署的时候，起一个什么名字。</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getContextPath</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//String contextPath = application.getContextPath();</span></span><br></pre></td></tr></table></figure><ul><li><strong>log() 记录日志</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过ServletContext对象也是可以记录日志的</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">log</span><span class="params">(String message)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">log</span><span class="params">(String message, Throwable t)</span>;</span><br><span class="line"><span class="comment">// 这些日志信息记录到哪里了？</span></span><br><span class="line"><span class="comment">// localhost.2021-11-05.log</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Tomcat服务器的logs目录下都有哪些日志文件？</span></span><br><span class="line"><span class="comment">//catalina.2021-11-05.log 服务器端的java程序运行的控制台信息。</span></span><br><span class="line"><span class="comment">//localhost.2021-11-05.log ServletContext对象的log方法记录的日志信息存储到这个文件中。</span></span><br><span class="line"><span class="comment">//localhost_access_log.2021-11-05.txt 访问日志</span></span><br></pre></td></tr></table></figure><p><strong>应用域 (Servlet中最大的作用域)</strong></p><p>ServletContext对象还有另一个名字：应用域（后面还有其他域，例如：请求域、会话域）</p><p>如果所有的用户共享一份数据，并且这个数据很少的被修改，并且这个数据量很少，可以将这些数据放到ServletContext这个应用域中</p><p><strong>注意</strong></p><p>所有用户共享的数据，如果涉及到修改操作，必然会存在线程并发所带来的安全问题。所以放在ServletContext对象中的数据一般都是只读的。</p><p><strong>相关方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 存（怎么向ServletContext应用域中存数据）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAttribute</span><span class="params">(String name, Object value)</span>; <span class="comment">// map.put(k, v)</span></span><br><span class="line"><span class="comment">// 取（怎么从ServletContext应用域中取数据）</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">getAttribute</span><span class="params">(String name)</span>; <span class="comment">// Object v = map.get(k)</span></span><br><span class="line"><span class="comment">// 删（怎么删除ServletContext应用域中的数据）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeAttribute</span><span class="params">(String name)</span>; <span class="comment">// map.remove(k)</span></span><br></pre></td></tr></table></figure><p>注意：以后我们编写Servlet类的时候，实际上是不会去直接继承GenericServlet类的，因为我们是B&#x2F;S结构的系统，这种系统是基于HTTP超文本传输协议的，在Servlet规范当中，提供了一个类叫做HttpServlet，它是专门为HTTP协议准备的一个Servlet类。我们编写的Servlet类要继承HttpServlet。（HttpServlet是HTTP协议专用的。）使用HttpServlet处理HTTP协议更便捷。但是你需要直到它的继承结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jakarta.servlet.Servlet<span class="comment">//（接口）【爷爷】</span></span><br><span class="line">jakarta.servlet.GenericServlet <span class="keyword">implements</span> <span class="title class_">Servlet</span><span class="comment">//（抽象类）【儿子】</span></span><br><span class="line">jakarta.servlet.http.HttpServlet <span class="keyword">extends</span> <span class="title class_">GenericServlet</span><span class="comment">//（抽象类）【孙子】</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们以后编写的Servlet要继承HttpServlet类。</span></span><br></pre></td></tr></table></figure><p><strong>最后</strong></p><p>向ServletContext应用域中存储数据，实际上等于是将数据存放到缓存cache当中了。</p>]]></content>
    
    
    <summary type="html">什么是ServletConfig?ServletConfig是指当前servlet在web.xml文件中的配置信息。ServletConfig对象中封装了&lt;servlet&gt;&lt;/servlet&gt;标签中的配置信息。（web.xml文件中servlet的配置信息）</summary>
    
    
    
    <category term="Java 学习" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/JavaEE/"/>
    
    
    <category term="Java 学习" scheme="http://example.com/tags/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>3. GenericServlet 源码解析</title>
    <link href="http://example.com/2022/09/12/JavaEE/3.%20GenericServlet%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>http://example.com/2022/09/12/JavaEE/3.%20GenericServlet%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</id>
    <published>2022-09-12T14:34:30.558Z</published>
    <updated>2022-09-13T11:28:00.717Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-为什么会出现-GenericServlet"><a href="#1-为什么会出现-GenericServlet" class="headerlink" title="1. 为什么会出现 GenericServlet"></a>1. 为什么会出现 GenericServlet</h1><p>在我们编写JavaEE程序中,每一个Servlet类都需要直接实现Servlet接口,这样我们就不许实现所有的接口方法,但是其大部分情况下我们只需要使用service方法,对于其他方法是不需要的,就会显得代码过于丑陋,所以就有了 GenericServlet。</p><p><strong>GenericServlet 是用来干什么的?</strong></p><p>为了使得每个业务都可以只实现所需要的方法,就需要GenericServlet从中间适配,就比如手机直接插到220V的电压上，手机直接就报废了。怎么办？可以找一个充电器。这个充电器就是一个适配器。手机连接适配器。适配器连接220V的电压。这样问题就解决了。</p><h1 id="2-如何编写GenericServlet"><a href="#2-如何编写GenericServlet" class="headerlink" title="2. 如何编写GenericServlet"></a>2. 如何编写GenericServlet</h1><p><strong>GenericServlet 的实现过程</strong></p><p>编写一个GenericServlet类，这个类是一个抽象类，其中有一个抽象方法service。</p><ul><li>GenericServlet实现Servlet接口。</li><li>GenericServlet是一个适配器。</li><li>以后编写的所有Servlet类继承GenericServlet，重写service方法即可。</li></ul><p><strong>GenericServlet 改造</strong></p><ul><li><p>思考第一个问题：我提供了一个GenericServlet之后，init方法还会执行吗？</p><ul><li>还会执行。会执行GenericServlet类中的init方法。</li></ul></li><li><p>思考第二个问题：init方法是谁调用的？</p><ul><li>Tomcat服务器调用的。</li></ul></li><li><p>思考第三个问题：init方法中的ServletConfig对象是谁创建的？是谁传过来的？</p><ul><li>都是Tomcat干的。</li><li>Tomcat服务器先创建了ServletConfig对象，然后调用init方法，将ServletConfig对象传给了init方法。</li></ul></li><li><p>思考一下Tomcat服务器伪代码：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tomcat</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">// .....</span></span><br><span class="line">        <span class="comment">// Tomcat服务器伪代码</span></span><br><span class="line">        <span class="comment">// 创建LoginServlet对象（通过反射机制，调用无参数构造方法来实例化LoginServlet对象）</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.bjpowernode.javaweb.servlet.LoginServlet&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> clazz.newInstance();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 向下转型</span></span><br><span class="line">        <span class="type">Servlet</span> <span class="variable">servlet</span> <span class="operator">=</span> (Servlet)obj;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建ServletConfig对象</span></span><br><span class="line">        <span class="comment">// Tomcat服务器负责将ServletConfig对象实例化出来。</span></span><br><span class="line">        <span class="comment">// 多态（Tomcat服务器完全实现了Servlet规范）</span></span><br><span class="line">        <span class="type">ServletConfig</span> <span class="variable">servletConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">org</span>.apache.catalina.core.StandardWrapperFacade();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 调用Servlet的init方法</span></span><br><span class="line">        servlet.init(servletConfig);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 调用Servlet的service方法</span></span><br><span class="line">        <span class="comment">// ....</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对此改造GenericServlet:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">GenericServlet</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span>, ServletConfig, Serializable &#123;</span><br><span class="line">    <span class="comment">// 将 ServletConfig 设置为成员变量,方便其其他方法和子类调用</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> ServletConfig config;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GenericServlet</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInitParameter</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getServletConfig().getInitParameter(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.config;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ServletContext <span class="title function_">getServletContext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getServletConfig().getServletContext();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化 init 将 Tomcat 所实例化的 config 传递给 成员变量 config</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="built_in">this</span>.config = config;</span><br><span class="line">        <span class="built_in">this</span>.init(); <span class="comment">// (重点!!!) 调用下面公开的init方法,给子类重写</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个公开的 init() 方法,可以允许子类重写这个方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest var1, ServletResponse var2)</span> <span class="keyword">throws</span> ServletException, IOException;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意 :</strong>  GenericServlet 方法已经被 jakarta 实现,不需要我们自己手写,并且Oracle 已经为 GenericServlet 实现了更好的子类,我们可能在使用过程中直接调用那些子类。</p>]]></content>
    
    
    <summary type="html">在我们编写JavaEE程序中,每一个Servlet类都需要直接实现Servlet接口,这样我们就不许实现所有的接口方法,但是其大部分情况下我们只需要使用service方法,对于其他方法是不需要的,就会显得代码过于丑陋,所以就有了 GenericServlet。</summary>
    
    
    
    <category term="Java 学习" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/JavaEE/"/>
    
    
    <category term="Java 学习" scheme="http://example.com/tags/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>2. Servlet的生命周期</title>
    <link href="http://example.com/2022/09/12/JavaEE/2.%20Servlet%E7%9A%84%E5%A3%B0%E6%98%8E%E5%91%A8%E6%9C%9F/"/>
    <id>http://example.com/2022/09/12/JavaEE/2.%20Servlet%E7%9A%84%E5%A3%B0%E6%98%8E%E5%91%A8%E6%9C%9F/</id>
    <published>2022-09-12T09:06:10.859Z</published>
    <updated>2022-09-12T14:55:35.981Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-什么是Servlet的生命周期"><a href="#1-什么是Servlet的生命周期" class="headerlink" title="1. 什么是Servlet的生命周期"></a>1. 什么是Servlet的生命周期</h1><ul><li>Servlet对象什么时候被创建。</li><li>Servlet对象什么时候被销毁。</li><li>Servlet对象创建了几个？</li><li>Servlet对象的生命周期表示：一个Servlet对象从出生在最后的死亡，整个过程是怎样的。</li></ul><h1 id="2-Servlet对象是由谁来维护的"><a href="#2-Servlet对象是由谁来维护的" class="headerlink" title="2. Servlet对象是由谁来维护的"></a>2. Servlet对象是由谁来维护的</h1><ul><li>Servlet对象的创建，对象上方法的调用，对象最终的销毁，Javaweb程序员是无权干预的。</li><li>Servlet对象的生命周期是由Tomcat服务器（WEB Server）全权负责的。</li><li>Tomcat服务器通常我们又称为：WEB容器。（这个叫法你要知道【WEB Container】）</li><li>WEB容器来管理Servlet对象的死活。</li></ul><h1 id="3-Servlet-接口的方法详解"><a href="#3-Servlet-接口的方法详解" class="headerlink" title="3. Servlet 接口的方法详解"></a>3. Servlet 接口的方法详解</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoServlet</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 无参构造方法,只会执行一次</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DemoServlet</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// init方法 只会执行一次</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// destroy方法 只会执行一次</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;<span class="keyword">return</span> <span class="literal">null</span>;&#125;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;<span class="keyword">return</span> <span class="literal">null</span>;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>在用户第一次发送请求的时候, 便会实例化Servlet,执行无参数的构造方法</p></li><li><p>在实例化对象被创建出来之后便会执行对象中的init方法,且只会调用这一次(init 方法在执行的时候,对象已经存在了)</p></li><li><p>用户在发送请求的时候,init方法执行之后,Tomcat服务器会马上执行service方法(之后的第二次第三次第四次…请求会只执行servlet方法) <strong>这说明:</strong></p><ul><li>第一：Servlet对象是单例的（单实例的。但是要注意：Servlet对象是单实例的，但是Servlet类并不符合单例模式。我们称之为假单例。之所以单例是因为Servlet对象的创建我们javaweb程序员管不着，这个对象的创建只能是Tomcat来说了算，Tomcat只创建了一个，所以导致了单例，但是属于假单例。真单例模式，构造方法是私有化的。）</li><li>第二：无参数构造方法、init方法只在第一次用户发送请求的时候执行。也就是说无参数构造方法只执行一次。init方法也只被Tomcat服务器调用一次。</li><li>第三：只要用户发送一次请求：service方法必然会被Tomcat服务器调用一次。发送100次请求，service方法会被调用100次。</li></ul></li><li><p>用户在关闭服务器的时候,会执行destroy方法,且在执行destory方法时,对象还在,执行过后再销毁对象</p></li><li><p>Servlet对象更像一个人的一生：</p><ul><li>Servlet的无参数构造方法执行：标志着你出生了。</li><li>Servlet对象的init方法的执行：标志着你正在接受教育。</li><li>Servlet对象的service方法的执行：标志着你已经开始工作了，已经开始为人类提供服务了。</li><li>Servlet对象的destroy方法的执行：标志着临终。有什么遗言，抓紧的。要不然，来不及了。</li></ul></li></ul><p><strong>关于Servlet类中方法的调用次数？</strong></p><ul><li>构造方法只执行一次。</li><li>init方法只执行一次。</li><li>service方法：用户发送一次请求则执行一次，发送N次请求则执行N次。</li><li>destroy方法只执行一次。</li></ul><p><strong>当我们Servlet类中编写一个有参数的构造方法，如果没有手动编写无参数构造方法会出现什么问题？</strong></p><ul><li>报错了：500错误。</li><li>注意：500是一个HTTP协议的错误状态码。</li><li>500一般情况下是因为服务器端的Java程序出现了异常。（服务器端的错误都是500错误：服务器内部错误。）</li><li>如果没有无参数的构造方法，会导致出现500错误，无法实例化Servlet对象。</li><li>所以，一定要注意：在Servlet开发当中，不建议程序员来定义构造方法，因为定义不当，一不小心就会导致无法实例化Servlet对象。</li></ul><p><strong>思考：Servlet的无参数构造方法是在对象第一次创建的时候执行，并且只执行一次。init方法也是在对象第一次创建的时候执行，并且只执行一次。那么这个无参数构造方法可以代替掉init方法吗？</strong></p><ul><li>不能。</li><li>Servlet规范中有要求，作为javaweb程序员，编写Servlet类的时候，不建议手动编写构造方法，因为编写构造方法，很容易让无参数构造方法消失，这个操作可能会导致Servlet对象无法实例化。所以init方法是有存在的必要的。</li></ul><p><strong>init、service、destroy方法中使用最多的是哪个方法？</strong></p><ul><li>使用最多就是service方法，service方法是一定要实现的，因为service方法是处理用户请求的核心方法。</li><li>什么时候使用init方法呢？<ul><li>init方法很少用。</li><li>通常在init方法当中做初始化操作，并且这个初始化操作只需要执行一次。例如：初始化数据库连接池，初始化线程池….</li></ul></li><li>什么时候使用destroy方法呢？<ul><li>destroy方法也很少用。</li><li>通常在destroy方法当中，进行资源的关闭。马上对象要被销毁了，还有什么没有关闭的，抓紧时间关闭资源。还有什么资源没保存的，抓紧时间保存一下。</li></ul></li></ul>]]></content>
    
    
    <summary type="html">对 Servlet 的生命周期详解</summary>
    
    
    
    <category term="Java 学习" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/JavaEE/"/>
    
    
    <category term="Java 学习" scheme="http://example.com/tags/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>1. JavaEE 介绍</title>
    <link href="http://example.com/2022/09/12/JavaEE/1.%20JavaEE%20%E4%BB%8B%E7%BB%8D/"/>
    <id>http://example.com/2022/09/12/JavaEE/1.%20JavaEE%20%E4%BB%8B%E7%BB%8D/</id>
    <published>2022-09-12T08:38:24.620Z</published>
    <updated>2022-09-12T14:55:40.613Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-什么是JavaEE"><a href="#1-什么是JavaEE" class="headerlink" title="1. 什么是JavaEE"></a>1. 什么是JavaEE</h1><p>Java 包括三大板块,分别为JavaSE JavaEE JavaME 其中JavaSE为Java标准版,是别人写好的一套类库,只不过这个类库是标准类库,不管是今后学习JavaME还是JavaEE,JavaSE一定是基础,必须要先行学习,而JavaME是Java微型版,主要用于机顶盒内核程序，吸尘器内核程序，电冰箱内核程序，电饭煲内核程序,JavaEE是Java企业版,也是别人写好的一套类库，只不过这套类库可以帮助我们完成企业级项目的开发，专门为企业内部提供解决方案的一套（多套）类库。<strong>Java比较火爆的就是这个JavaEE方向。</strong></p><h1 id="2-关于JavaEE的版本"><a href="#2-关于JavaEE的版本" class="headerlink" title="2. 关于JavaEE的版本"></a>2. 关于JavaEE的版本</h1><ul><li>JavaEE目前最高版本是 JavaEE8</li><li>JavaEE被Oracle捐献了，Oracle将JavaEE规范捐献给Apache了。</li><li>Apache把JavaEE换名了，以后不叫JavaEE了，以后叫做 jakarta EE。</li><li>以后没有JavaEE了。以后都叫做Jakarta EE。</li><li>JavaEE8版本升级之后的”JavaEE 9”，不再是”JavaEE9”这个名字了，叫做JakartaEE9</li><li>JavaEE8的时候对应的Servlet类名是：javax.servlet.Servlet</li><li>JakartaEE9的时候对应的Servlet类名是：jakarta.servlet.Servlet （包名都换了）</li><li>如果你之前的项目还是在使用javax.servlet.Servlet，那么你的项目无法直接部署到Tomcat10+版本上。你只能部署到Tomcat9-版本上。在Tomcat9以及Tomcat9之前的版本中还是能够识别javax.servlet这个包。</li></ul><h1 id="3-关于系统架构"><a href="#3-关于系统架构" class="headerlink" title="3. 关于系统架构"></a>3. 关于系统架构</h1><p>系统架构包括什么形式？</p><ul><li>C&#x2F;S架构</li><li>B&#x2F;S架构</li></ul><p>C&#x2F;S架构</p><ul><li>Client &#x2F; Server（客户端 &#x2F; 服务器）</li></ul><p>B&#x2F;S架构</p><ul><li>B&#x2F;S（Browser &#x2F; Server，浏览器 &#x2F; 服务器）</li></ul><h1 id="4-IDEA创建开发JavaWeb程序"><a href="#4-IDEA创建开发JavaWeb程序" class="headerlink" title="4. IDEA创建开发JavaWeb程序"></a>4. IDEA创建开发JavaWeb程序</h1><ul><li><p>集成开发工具很多，其中目前使用比较多的是：</p><ul><li>IntelliJ IDEA（这个居多，IDEA在提示功能方面要强于Eclipse，也就是说IDEA使用起来比Eclipse更加智能，更好用。JetBrain公司开发的。收费的。）</li><li>Eclipse（这个少一些），Eclipse目前还是有团队使用，只不过处于减少的趋势，自己从事工作之后，可能会遇到。Eclipse是IBM团队开发的。Eclipse寓意是“日食”。“日食”表示将太阳吃掉。太阳是SUN。IBM团队开发Eclipse的寓意是吞并SUN公司，但是2009年的时候SUN公司被Oracle公司并购了。IBM并没有成功并购SUN公司。</li></ul></li><li><p>使用IDEA集成开发工具开发Servlet</p><ul><li>第一步：New Project（我比较习惯先创建一个Empty Project【空工程】，然后在空工程下新建Module【模块】，这不是必须的，只是一种习惯，你可以直接新建非空的Project），这个Empty Project起名为：javaweb（不是必须的，只是一个名字而已。一般情况下新建的Project的名字最好和目录的名字一致。）</li><li>第二步：新建模块（File –&gt; new –&gt; Module…）<ul><li>这里新建的是一个普通的JavaSE模块（这里先不要新建Java Enterprise模块）</li><li>这个Module自动会被放在javaweb的project下面。</li><li>这个Module起名：servlet01</li></ul></li><li>第三步：让Module变成JavaEE的模块。（让Module变成webapp的模块。符合webapp规范。符合Servlet规范的Module）<ul><li>在Module上点击右键：Add Framework Support…（添加框架支持）</li><li>在弹出的窗口中，选择Web Application（选择的是webapp的支持）</li><li>选择了这个webapp的支持之后，IDEA会自动给你生成一个符合Servlet规范的webpp目录结构。</li><li><strong>重点，需要注意的：在IDEA工具中根据Web Application模板生成的目录中有一个web目录，这个目录就代表webapp的根</strong></li></ul></li><li>第四步（非必须）：根据Web Application生成的资源中有index.jsp文件，这里我选择删除这个index.jsp文件。</li><li>第五步：编写Servlet（StudentServlet）<ul><li>class StudentServlet implements Servlet</li><li>这个时候发现Servlet.class文件没有。怎么办？将CATALINA_HOME&#x2F;lib&#x2F;servlet-api.jar和jsp-api.jar添加到classpath当中（这里的classpath说的是IDEA的classpath）<ul><li>File –&gt; Project Structrue –&gt; Modules –&gt; + 加号 –&gt; Add JARS….</li></ul></li><li>实现jakarta.servlet.Servlet接口中的5个方法。</li></ul></li><li>第六步：在Servlet当中的service方法中编写业务代码（我们这里连接数据库了。）</li><li>第七步：在WEB-INF目录下新建了一个子目录：lib（这个目录名可不能随意，必须是全部小写的lib），并且将连接数据库的驱动jar包放到lib目录下。</li><li>第八步：在web.xml文件中完成StudentServlet类的注册。（请求路径和Servlet之间对应起来）</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;web-app xmlns=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="line">         xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="line">         version=<span class="string">&quot;4.0&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;studentServlet&lt;/servlet-name&gt;</span><br><span class="line">        &lt;servlet-class&gt;com.bjpowernode.javaweb.servlet.StudentServlet&lt;/servlet-class&gt;</span><br><span class="line">    &lt;/servlet&gt;</span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;studentServlet&lt;/servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/servlet/student&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure><p>第九步：给一个html页面，在HTML页面中编写一个超链接，用户点击这个超链接，发送请求，Tomcat执行后台的StudentServlet。</p><ul><li><p>student.html</p></li><li><p>这个文件不能放到WEB-INF目录里面，只能放到WEB-INF目录外面。</p></li><li><p>student.html文件的内容</p></li><li><pre><code class="html">  &lt;!DOCTYPE html&gt;  &lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;      &lt;meta charset=&quot;UTF-8&quot;&gt;      &lt;title&gt;student page&lt;/title&gt;  &lt;/head&gt;  &lt;body&gt;      &lt;!--这里的项目名是 /xmm ，无法动态获取，先写死--&gt;      &lt;a href=&quot;/xmm/servlet/student&quot;&gt;student list&lt;/a&gt;  &lt;/body&gt;  &lt;/html&gt;</code></pre></li><li><p>第十步：让IDEA工具去关联Tomcat服务器。关联的过程当中将webapp部署到Tomcat服务器当中。</p><ul><li>IDEA工具右上角，绿色小锤子右边有一个：Add Configuration</li><li>左上角加号，点击Tomcat Server –&gt; local</li><li>在弹出的界面中设置服务器Server的参数（基本上不用动）</li><li>在当前窗口中有一个Deployment（点击这个用来部署webapp），继续点击加号，部署即可。</li><li>修改 Application context为：&#x2F;xmm</li></ul></li><li><p>第十一步：启动Tomcat服务器</p><ul><li>在右上角有绿色的箭头，或者绿色的小虫子，点击这个绿色的小虫子，可以采用debug的模式启动Tomcat服务器。</li><li>我们开发中建议适用debug模式启动Tomcat</li></ul></li><li><p>第十二步：打开浏览器，在浏览器地址栏上输入：<a href="http://localhost:8080/xmm/student.html">http://localhost:8080/xmm/student.html</a></p></li></ul>]]></content>
    
    
    <summary type="html">Java 包括三大板块,分别为JavaSE JavaEE JavaME 其中JavaSE为Java标准版,是别人写好的一套类库,只不过这个类库是标准类库,不管是今后学习JavaME还是JavaEE,JavaSE一定是基础,必须要先行学习,而JavaME是Java微型版,主要用于机顶盒内核程序，吸尘器内核程序，电冰箱内核程序，电饭煲内核程序,JavaEE是Java企业版,也是别人写好的一套类库，只不过这套类库可以帮助我们完成企业级项目的开发，专门为企业内部提供解决方案的一套（多套）类库。Java比较火爆的就是这个JavaEE方向。</summary>
    
    
    
    <category term="Java 学习" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/JavaEE/"/>
    
    
    <category term="Java 学习" scheme="http://example.com/tags/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaEE" scheme="http://example.com/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>15. IO流</title>
    <link href="http://example.com/2022/09/11/JavaSE/15.%20IO%E6%B5%81/"/>
    <id>http://example.com/2022/09/11/JavaSE/15.%20IO%E6%B5%81/</id>
    <published>2022-09-11T10:59:43.729Z</published>
    <updated>2022-09-12T02:57:39.899Z</updated>
    
    <content type="html"><![CDATA[<h1 id="15-1-文件"><a href="#15-1-文件" class="headerlink" title="15.1 文件"></a>15.1 文件</h1><blockquote><p>文件就是保存数据的地方。<br>文件流：文件 在 程序 中是以 流 的形式来操作的。<br>流：数据在数据源（文件）和程序（内存）之间经历的路径<br>输入流：数据从数据源到程序的路径<br>输出流：数据从程序到数据源的路径</p></blockquote><h2 id="15-1-1-常用的文件操作"><a href="#15-1-1-常用的文件操作" class="headerlink" title="15.1.1 常用的文件操作"></a>15.1.1 常用的文件操作</h2><blockquote><p>Java 提供了 File 类，用于处理文件相关的操作</p></blockquote><ol><li>创建文件对象相关构造器和方法</li></ol><ul><li><p><code>new File(String pathname)</code>：根据路径创建一个 File 对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">path1</span> <span class="operator">=</span> <span class="string">&quot;d:/test.jpg&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">path2</span> <span class="operator">=</span> <span class="string">&quot;d:\\test.jpg&quot;</span>;</span><br><span class="line"><span class="type">File</span> <span class="variable">file1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path1);</span><br><span class="line"><span class="type">File</span> <span class="variable">file2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path2);<span class="comment">//此时只是在内存中产生了一个对象</span></span><br></pre></td></tr></table></figure></li><li><p><code>new File(File parent, String child)</code>：根据父目录文件 + 子路径构建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">parentFile1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:\\&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">fileName1</span> <span class="operator">=</span> <span class="string">&quot;test.txt&quot;</span>;</span><br><span class="line"><span class="type">File</span> <span class="variable">file3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(parentFile1, fileName1);</span><br></pre></td></tr></table></figure></li><li><p><code>new File(String parent, String child)</code>：根据父路径 + 子路径构建</p></li><li><p><code>creatNewFile()</code>：创建新文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"> file.createNewFile();<span class="comment">//这个场合，内存对象才写入磁盘</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"> e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>获取文件相关信息</li></ol><ul><li><code>getName()</code>：获取名称</li><li><code>getAbsolutePath()</code>：获取文件绝对路径</li><li><code>getParent()</code>：获取文件父级目录</li><li><code>long length()</code>：获取文件大小（字节）</li><li><code>exists()</code>：文件是否存在</li><li><code>isFile()</code>：是不是一个文件</li><li><code>isDirectory()</code>：是不是一个目录</li><li><code>isAbsolute()</code>：是不是绝对路径</li><li><code>canRead()</code>：是否可读canWirte()：是否可写</li><li><code>long lastModified()</code>：最后修改时间</li><li><code>String[] list()</code>：列出符合模式的文件名</li></ul><ol start="3"><li>目录的操作和文件删除</li></ol><ul><li><code>mkdir</code>：创建一级目录</li><li><code>mkdirs</code>：创建多级目录</li><li><code>delete</code>：删除空目录或文件</li><li><code>boolean renameTo(File newName)</code>：更改文件名</li></ul><p>其实目录也属于文件<br>注意事项：</p><ul><li>File 类可以获取文件的各种相关属性，可以对其进行改名，甚至删除。但除了文件名外的属性没有修改方法</li><li>File 类可以用来描述一个目录，但不能改变目录名，也不能删除目录</li></ul><h1 id="15-2-IO流"><a href="#15-2-IO流" class="headerlink" title="15.2 IO流"></a>15.2 IO流</h1><ol><li>I &#x2F; O 是 Input &#x2F; Output 的缩写。IO 技术是非常实用的技术，用于处理数据传输。如 读 &#x2F; 写 文件，网络通讯等。</li><li>Java 程序中，对于数据的 输入 &#x2F; 输出 操作以 “流（stream）”的方式进行</li><li>java.io 包下提供了各种 “流” 类和接口，用以获取不同种类的数据，并通过方法输入或输出数据</li><li>输入（input）：读取外部数据（磁盘、光盘、网络数据等）到程序（内存）中</li><li>输出（output）：将程序（内存）数据输出到外部存储</li></ol><h2 id="15-2-1-IO流的分类"><a href="#15-2-1-IO流的分类" class="headerlink" title="15.2.1 IO流的分类"></a>15.2.1 IO流的分类</h2><ul><li>按操作数据单位不同分为：<ul><li>字节流（8 bit）：二进制文件用该方法，能确保文件无损</li><li>字符流（按照字符，字符的字节数由编码决定）：文本文件，效率更高</li></ul></li><li>按数据流的流向不同分为：<ul><li>输入流：读取外部数据（磁盘、光盘、网络数据等）到程序（内存）中</li><li>输出流：将程序（内存）数据输出到外部存储</li></ul></li><li>按流的角色不同分为：<ul><li>节点流</li><li>处理流 &#x2F; 包装流<table><thead><tr><th><strong>Σ(っ °Д °;)っ</strong></th><th><strong>字节流</strong></th><th><strong>字符流</strong></th></tr></thead><tbody><tr><td>输入流</td><td>InputStream</td><td>Reader</td></tr><tr><td>输出流</td><td>OutputStream</td><td>Writer</td></tr></tbody></table></li></ul></li></ul><p>Java 的 IO流 总共涉及 40多个类，实际上都是上述 4 类的抽象基类派生的<br>由这 4 个类派生的子类名称都是以其父类名作为子类名后缀</p><h2 id="15-2-2-IO流的常用类"><a href="#15-2-2-IO流的常用类" class="headerlink" title="15.2.2 IO流的常用类"></a>15.2.2 IO流的常用类</h2><h3 id="15-2-2-1-FileInputStream文件字节输入流"><a href="#15-2-2-1-FileInputStream文件字节输入流" class="headerlink" title="15.2.2.1 FileInputStream文件字节输入流"></a>15.2.2.1 <code>FileInputStream</code>文件字节输入流</h3><ul><li><p>构造器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">FileInputStream</span>(File file);<span class="comment">//通过一个 File 的路径指定创建</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">FileInputStream</span>(String path);<span class="comment">//通过一个路径指定创建</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">FileInputStream</span>(FileDescriptor fdObj);<span class="comment">//通过文件描述符创建</span></span><br></pre></td></tr></table></figure></li><li><p>方法:</p></li><li><p><code>available()</code>：返回目前可以从流中读取的字节数实际操作时，读取的字节数可能大于这个返回值</p></li><li><p><code>close()</code>：关闭文件输入流，释放资源</p></li><li><p><code>finalize()</code>：确保在不引用文件输入流时调用其 close() 方法</p></li><li><p><code>getChannel()</code>：返回与此流有关的唯一的 FileChannel 对象</p></li><li><p><code>getFD()</code>：返回描述符</p></li><li><p><code>read()</code>：从该输入流中读取一个数据字节如果没有输入可用，该方法会被阻止。返回 -1 的场合，说明到达文件的末尾。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:\\test&quot;</span>);</span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">int</span> read;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"> fileInputStream = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line"> <span class="keyword">while</span> ((read = fileInputStream.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">     System.out.print((<span class="type">char</span>) read);</span><br><span class="line"> &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"> e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line">     fileInputStream.close();</span><br><span class="line"> &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">     e.printStackTrace();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;<span class="comment">//真 TM 复杂。throw 了算了</span></span><br></pre></td></tr></table></figure><p><code>read(byte[] b)</code>：从该输入流中把最多 b.length 个字节的数据读入一个 byte 数组<br>读取正常的场合，返回实际读取的字节数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">8</span>];<span class="comment">//一次读取 8 字节</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"> fileInputStream = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line"> <span class="keyword">while</span> ((read = fileInputStream.read(b)) != -<span class="number">1</span>)&#123;</span><br><span class="line">     System.out.print(<span class="keyword">new</span> <span class="title class_">String</span>(b, <span class="number">0</span>, read));</span><br><span class="line">     <span class="comment">//这一句看不懂请看[12.2 - 4]</span></span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">catch</span> </span><br><span class="line">...</span><br><span class="line"><span class="keyword">finally</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p><code>read(byte[] b, int off, int len)</code>：从该输入流中读取 len 字节数据，从数组下标 off 处起写入</p></li><li><p><code>skip(long n)</code>：从该输入流中跳过并去丢弃 n 个字节的数据</p></li><li><p><code>mark(int markArea)</code>：标记数据量的当前位置，并划出一个缓冲区。缓冲区大小至少为 <code>markAreareset()</code>：将输入流重新定位到对此流最后调用 mark() 方法时的位置</p></li><li><p><code>markSupported()</code>：测试数据流是否支持 mark() 和 reset() 操作</p></li></ul><h3 id="15-2-2-2-FileOutputStream-文件字节输出流"><a href="#15-2-2-2-FileOutputStream-文件字节输出流" class="headerlink" title="15.2.2.2 FileOutputStream 文件字节输出流"></a>15.2.2.2 <code>FileOutputStream</code> 文件字节输出流</h3><ul><li><p>构造器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(File file);<span class="comment">//通过一个 File 的路径指定创建</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(File file, <span class="type">boolean</span> append);</span><br><span class="line"><span class="comment">//append = false，写入采用 覆盖原文件 方式</span></span><br><span class="line"><span class="comment">//append = true 的场合，写入采用 末尾追加 方式</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(String path);<span class="comment">//通过一个路径指定创建</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(String path, <span class="type">boolean</span> append);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(FileDescriptor fdObj);<span class="comment">//通过文件描述符创建</span></span><br></pre></td></tr></table></figure></li><li><p>方法：</p></li><li><p><code>close()</code>：关闭文件输入流，释放资源</p></li><li><p><code>flush()</code>：刷新此输出流并强制写出所有缓冲的输出字节</p></li><li><p><code>finalize()</code>：确保在不引用文件输入流时调用其 close() 方法</p></li><li><p><code>getChannel()</code>：返回与此流有关的唯一的 FileChannel 对象</p></li><li><p><code>getFD()</code>：返回描述符</p></li><li><p><code>write(byte[] b)</code>：将 b.length 个字节从指定 byte 数组写入此文件输出流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:\\test1&quot;</span>);</span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"> fileOutputStream = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line"> <span class="comment">//此时，若文件不存在会被创建</span></span><br><span class="line"> fileOutputStream.write(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"> <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Melody&quot;</span>;</span><br><span class="line"> fileOutputStream.write(str.getBytes());</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">catch</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">finally</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p><code>write(byte[] b， int off, int len)</code>：将指定 byte 数组中下标 off 开始的 len 个字节写入此文件输出流</p></li><li><p><code>write(int b)</code>：将指定字节写入此文件输出流</p></li></ul><h3 id="15-2-2-3-FileReader-文件字符输入流"><a href="#15-2-2-3-FileReader-文件字符输入流" class="headerlink" title="15.2.2.3 FileReader 文件字符输入流"></a>15.2.2.3 <code>FileReader</code> 文件字符输入流</h3><blockquote><p>与其他程序设计语言使用 ASCII 码不同，Java 使用 Unicode 码表示字符串和字符。ASCII 码的字符占用 1 字节，可以认为一个字符就是一个字节。但 Unicode 码用 2 字节表示 1 个字符，此时字符流和字节流就不相同。</p></blockquote><ul><li><p>构造器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">FileRaeder</span>(File file);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">FileRaeder</span>(String string);</span><br></pre></td></tr></table></figure></li><li><p>方法：</p></li></ul><p><code>read()</code>：读取单个字符。<br><code>read(char[])</code>：批量读取多个字符到数组。</p><h3 id="15-2-2-3-FileWriter文件字符输出流"><a href="#15-2-2-3-FileWriter文件字符输出流" class="headerlink" title="15.2.2.3 FileWriter文件字符输出流"></a>15.2.2.3 <code>FileWriter</code>文件字符输出流</h3><ul><li><p>构造器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">FileWriter</span>(File path);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">FileWriter</span>(String path2);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">FileWriter</span>(File path3, <span class="type">boolean</span> append);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">FileWriter</span>(String path4, <span class="type">boolean</span> append);</span><br></pre></td></tr></table></figure></li><li><p>方法：</p></li><li><p><code>write(int)</code>：写入单个字符</p></li><li><p><code>write(char[])</code>：写入指定数组</p></li><li><p><code>write(char[], off, len)</code>：写入指定数组的指定部分</p></li><li><p><code>write(string)</code>：写入字符串</p></li><li><p><code>write(string, off, len)</code>：写入字符串的指定部分</p></li><li><p><code>flush()</code>：刷新该流的缓冲。如果没有执行，内容就不会写入文件</p></li><li><p><code>close()</code>：等于 flush() + 关闭</p></li></ul><p><strong>注意！FileWriter 使用后，必须关闭（close）或刷新（flush），否则无法真正写入</strong></p><h3 id="15-2-2-4-转换流InputStreamReader-和-OutputStreamReader"><a href="#15-2-2-4-转换流InputStreamReader-和-OutputStreamReader" class="headerlink" title="15.2.2.4 转换流InputStreamReader 和 OutputStreamReader"></a>15.2.2.4 转换流<code>InputStreamReader</code> 和 <code>OutputStreamReader</code></h3><ol><li>InputStreamReader 是 Reader 的子类。可以把 InputStream（字节流）转换成 Reader（字符流）</li><li>OutputStreamWriter 是 Writer 的子类。可以把 OutputStream（字节流）转换成 Writer（字符流）</li><li>处理纯文本数据时，如果使用字符流效率更高，并能有效解决中文问题，建议将字节流转换成字符流。</li><li>可以在使用时指定编码格式（UTF -8、GBK 等）</li></ol><ul><li>构造器<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(fileInputStream, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"><span class="comment">//传入 字节流 和 编码类型</span></span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bufferedreader</span>(isr);</span><br><span class="line"><span class="comment">//用另一个处理流包装</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="15-2-3-节点流和处理流"><a href="#15-2-3-节点流和处理流" class="headerlink" title="15.2.3 节点流和处理流"></a>15.2.3 节点流和处理流</h2><ol><li>节点流：从一个特定数据源读写数据。</li><li>处理流（包装流）：是 “连接” 在已存在的流（节点流或处理流）上，为程序提供更强大的读写功能。</li></ol><p><strong>节点流和处理流的区别</strong></p><ol><li>节点流是 底层流 &#x2F; 低级流。直接和数据源相接。</li><li>处理流（包装流）包装节点流，既可以消除不同节点流的实现差异，也可以提供更方便的方法完成输入输出</li><li>处理流对节点流进行包装，使用了修饰器设计模式。不会直接与数据源相连</li><li>处理流的功能主要体现在<ul><li>性能的提高：以增加缓冲的方式提高输入输出的效率</li><li>操作的便捷：处理流可能提供了一系列便捷方法来一次性输入大量数据，使用更加灵活方便</li></ul></li><li>关闭时关闭外层流即可</li></ol><h3 id="15-2-3-1-缓冲区流"><a href="#15-2-3-1-缓冲区流" class="headerlink" title="15.2.3.1 缓冲区流"></a>15.2.3.1 缓冲区流</h3><p>缓冲区流是一种包装流。缓冲区字节流有 BufferedInputStream 和 BufferedOutputStream；缓冲区字符流有 BufferedWriter 和 BufferedReader。他们是在数据流上加了一个缓冲区。读写数据时，数据以块为单位进入缓冲区，其后的读写操作则作用于缓冲区。<br>这种方式能降低不同硬件设备间的速度差异，提高 I&#x2F;O 效率。<br>构造器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">BufferedReader</span>(reader);<span class="comment">//传入一个 Reader</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">BufferedReader</span>(reader, <span class="number">1024</span>);<span class="comment">//传入 Reader 并指定缓冲区大小</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(writer);<span class="comment">//传入一个 Writer</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(writer, <span class="number">1024</span>);<span class="comment">//传入 Writer 并指定缓冲区大小</span></span><br><span class="line"><span class="comment">//追加还是覆盖，取决于 writer</span></span><br></pre></td></tr></table></figure><p>方法：<br><code>bufferedReader.readLine()</code>：按行读取（不含换行符）。<br>会返回一个字符串。返回 null 时，表示读取完毕。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String line;</span><br><span class="line"><span class="keyword">while</span> (line = bufferedReader.readLine() != <span class="literal">null</span>)&#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br><span class="line">bufferedReader.close();</span><br></pre></td></tr></table></figure><ul><li><code>bufferedWriter.write(String str)</code>：插入字符串</li><li><code>bufferedWriter.newLine()</code>：插入一个（和系统相关的）换行</li></ul><h3 id="15-2-3-2-数据流"><a href="#15-2-3-2-数据流" class="headerlink" title="15.2.3.2 数据流"></a>15.2.3.2 数据流</h3><blockquote><p>除了字节或字节数组外，处理的数据还有其他类型。为解决此问题，可以使用 DataInputStream 和 DataOutputStream。它们允许通过数据流来读写 Java 基本类型，如布尔型（boolean）、浮点型（float）等</p></blockquote><p>构造器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">DataInputStream</span>(inputStream);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(outputStream);</span><br></pre></td></tr></table></figure><p>方法：</p><ul><li><code>byte readByte()</code>：读取下一个 byte</li><li><code>int readInt()</code>、<code>double readDouble()</code>、<code>String readUTF()</code>……</li><li><code>void writeByte(byte b)</code>：写入一个 byte</li><li><code>void writeInt(int n)</code>、<code>void writeUTF(String str)</code>……虽然有对字符串的读写方法，但应避免使用这些方法，转而使用字符输入&#x2F;输出流。</li></ul><h3 id="15-2-3-3-对象流"><a href="#15-2-3-3-对象流" class="headerlink" title="15.2.3.3 对象流"></a>15.2.3.3 对象流</h3><p>当我们保存数据时，同时也把 数据类型 或 对象 保存。<br>以上要求，就是能够将 基本数据类型 或 对象 进行 序列化·反序列化 操作<br><strong>序列化和反序列化</strong></p><ol><li>把对象转成字符序列的过程称为序列化。保存数据时，保存数据的值和数据类型</li><li>把字符序列转成对象的过程称为反序列化。恢复数据时，恢复数据的值和数据类型</li><li>需要让某个对象支持序列化机制，则必须让其类是 可序列化的。由此，该类必须实现下列接口之一<ul><li><code>Serializable</code>：推荐。因为是标记接口，没有方法</li><li><code>Externalizable</code>：该接口有方法需要实现</li></ul></li></ol><p><strong>transient关键字</strong></p><ol><li>有一些对象状态不具有可持久性（如 Thread 对象或流对象），这样的成员变量必须用 transient 关键字标明。任何标有 transient 关键字的成员变量都不会被保存。</li><li>一些需要保密的数据，不应保存在永久介质中。为保证安全，这些变量前应加上 transient 关键字。</li></ol><ul><li><p>构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(InputStream inputStream);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(OutputStream outputStream);</span><br></pre></td></tr></table></figure></li><li><p>方法：</p></li></ul><p>反序列化顺序需要和序列化顺序一致，否则出现异常。</p><ul><li>writeInt(Integer)：写入一个 int</li><li>readInt()：读取一个 int</li><li>writeBoolean(Boolaen)：写入一个 boolean</li><li>readBoolean()：读取一个 boolean</li><li>writeChar(Character)：写入一个 char</li><li>readChar()：读取一个 char</li><li>writeDouble(Double)：写入一个 double</li><li>readDouble()：读取一个 double</li><li>writeUTF(String)：写入一个 String</li><li>readUTF()：读取一个 String</li><li>writeObject(Serializable)：写入一个 Obj</li><li>readObject()：读取一个 Obj读取的场合，</li><li>如果想要调用方法，需要向下转型。为此，需要该类其引入，或将类的定义拷贝到可以引用的位置。</li></ul><p><strong>注意事项</strong></p><ol><li><p>读写顺序要一致</p></li><li><p>实现序列化或反序列化的对象，要实现 Serializable 或 Externalizable 接口</p></li><li><p>序列化的类中建议添加 SerialVersionUID 以提高版本兼容性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br></pre></td></tr></table></figure><p>有此序列号的场合，后续修改该类，系统会认为只是版本修改，而非新的类</p></li><li><p>序列化对象时，默认将其中所有属性进行序列化（除了 static 和 tansient 修饰的成员）</p></li><li><p>序列化对象时，要求其属性也实现序列化接口</p></li><li><p>序列化具备可继承性。某类若实现可序列化，则其子类也可序列化</p></li></ol><h3 id="15-2-3-4-标准输出-x2F-输入流"><a href="#15-2-3-4-标准输出-x2F-输入流" class="headerlink" title="15.2.3.4 标准输出 &#x2F; 输入流"></a>15.2.3.4 标准输出 &#x2F; 输入流</h3><table><thead><tr><th><strong>Σ( ° △ °lll）</strong></th><th><strong>编译类型</strong></th><th><strong>运行类型</strong></th><th><strong>默认设备</strong></th></tr></thead><tbody><tr><td>System.in：标准输入</td><td>InputStream</td><td>BufferedInputStream</td><td>键盘</td></tr><tr><td>System.out：标准输出</td><td>PaintStream</td><td>PaintStream</td><td>显示器</td></tr></tbody></table><h3 id="15-2-3-5-打印流-PaintStream-和-PaintWriter"><a href="#15-2-3-5-打印流-PaintStream-和-PaintWriter" class="headerlink" title="15.2.3.5 打印流 PaintStream 和 PaintWriter"></a>15.2.3.5 打印流 <code>PaintStream</code> 和 <code>PaintWriter</code></h3><blockquote><p>打印流只有输出流，没有输入流</p></blockquote><ol><li>PaintStream 是 OutputStream 的子类。PaintWriter 是 Writer 的子类。</li><li>默认情况下，System.out 输出位置是 标准输出（即：显示器）修改默认输出位置：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.setOut(<span class="keyword">new</span> <span class="title class_">PrintStream</span>(path));</span><br></pre></td></tr></table></figure></li></ol><h3 id="15-2-3-6-Properties类"><a href="#15-2-3-6-Properties类" class="headerlink" title="15.2.3.6 Properties类"></a>15.2.3.6 <code>Properties</code>类</h3><ol><li><p>Properties 是专门用于读写配置文件的集合类底层维护了一个 Entry 数组</p></li><li><p>配置文件格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">键=值</span><br><span class="line">键=值</span><br><span class="line">…</span><br></pre></td></tr></table></figure><p><strong>注意：键值对不需要空格，值不需要引号（值默认 String）</strong></p></li><li><p>常见方法</p></li></ol><p><code>load(InputStream)</code><br><code>load(Reader)</code>：加载配置文件的键值对到 Properties 对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">properties.load(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;d:\\data.data&quot;</span>));</span><br></pre></td></tr></table></figure><p><code>list(PaintStream)</code><br><code>list(PaintWriter)</code>：将数据显示到指定设备</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">properties.list(System.out);<span class="comment">//在控制台显示</span></span><br></pre></td></tr></table></figure><p><code>getProperty(key)</code>：根据键获取值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">properties.get(<span class="string">&quot;IQ&quot;</span>);</span><br></pre></td></tr></table></figure><p><code>setProperty(key, value)</code>：设置键值对到 Properties 对象<br>如果没有该 key，就是创建。如有，就是替换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">properties.set(<span class="string">&quot;IQ&quot;</span>, <span class="number">0</span>);</span><br><span class="line">properties.set(<span class="string">&quot;Balance&quot;</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p><code>store(Writer, String)</code><br><code>store(OutputStream, String)</code>：把 Properties 中的键值对存储到配置文件。<br>后面的 String 是注释。如有，会被用 # 标记并写在文件最上方。注释可以为 null。<br>IDEA 中，如果含有中文，会储存为 unicode 码</p><h3 id="15-2-3-7-随机访问文件"><a href="#15-2-3-7-随机访问文件" class="headerlink" title="15.2.3.7 随机访问文件"></a>15.2.3.7 随机访问文件</h3><blockquote><p>程序阅读文件时不仅要从头读到尾，还要实现每次在不同位置进行读取。此时可以使用 RandomAccessFile</p></blockquote><p>构造器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(String name, String mode);<span class="comment">//通过文件名</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(File file, String mode);<span class="comment">//通过文件对象</span></span><br></pre></td></tr></table></figure><blockquote><p>参数 mode 决定以只读方式 <code>mode = &quot;r&quot; </code>还是读写方式 <code>mode = &quot;rw&quot;</code> 访问文件。</p></blockquote><p>方法：</p><ul><li><code>long getFilePointer()</code>：返回文档指针的当前位置</li><li><code>void seek(long pos)</code>：将文档指针置于指定的绝对位置 pos文档指针的位置从文档开始的字符处开始计算，pos &#x3D; 0L 表示文档的开始</li><li><code>long length()</code>：返回文件长度</li></ul>]]></content>
    
    
    <summary type="html">IO操作</summary>
    
    
    
    <category term="Java 学习" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaSE (韩顺平)" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/JavaSE-%E9%9F%A9%E9%A1%BA%E5%B9%B3/"/>
    
    
    <category term="Java 学习" scheme="http://example.com/tags/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaSE" scheme="http://example.com/tags/JavaSE/"/>
    
    <category term="韩顺平基础" scheme="http://example.com/tags/%E9%9F%A9%E9%A1%BA%E5%B9%B3%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>14. 多线程(基础)</title>
    <link href="http://example.com/2022/09/11/JavaSE/14.%20%E5%A4%9A%E7%BA%BF%E7%A8%8B(%E5%9F%BA%E7%A1%80%EF%BC%89/"/>
    <id>http://example.com/2022/09/11/JavaSE/14.%20%E5%A4%9A%E7%BA%BF%E7%A8%8B(%E5%9F%BA%E7%A1%80%EF%BC%89/</id>
    <published>2022-09-11T10:59:09.687Z</published>
    <updated>2022-09-12T02:57:30.969Z</updated>
    
    <content type="html"><![CDATA[<h1 id="14-1-线程的概念"><a href="#14-1-线程的概念" class="headerlink" title="14.1 线程的概念"></a>14.1 线程的概念</h1><blockquote><p>对于一般程序而言，其结构大都可以分为一个入口、一个出口、一个顺次执行的语句序列。这样的语句结构称为进程，它是程序的一次动态执行，对应了代码加载、执行至完毕的全过程。<br>进程即是程序在处理机中的一次运行。在这样一个结构中不仅包含程序代码，也包括了系统资源的概念。<br>在单 CPU 计算机内部，微观上讲，同一时间只能有一个线程运行。实现多线程即从宏观上使多个作业同时执行。</p></blockquote><p>程序：为完成特定任务，用某种语言编写的一组指令的集合。<br>进程：运行中的程序。当你运行一个程序，系统就会为该进程分配空间。进程是程序的一次执行过程。是一个动态过程：有其自身产生、存在、消亡的过程。<br>线程：由进程创建的，进程的一个实体。一个进程可以有多个线程。<br>单线程：同一时刻，只允许执行一个线程。<br>多线程：同一时刻，可以执行多个线程。<br>并发：同一时刻，多个任务交替执行，造成一种貌似并行的状态。单核 CPU 实现的多任务就是并发。<br>并行：同一时刻，多个任务同时进行。多核 CPU 可以实现并行。</p><h2 id="14-1-1-线程的结构"><a href="#14-1-1-线程的结构" class="headerlink" title="14.1.1 线程的结构"></a>14.1.1 线程的结构</h2><p>在 Java 中，线程由以下 3 部分组成：</p><ul><li>虚拟 CPU：封装在 java.lang.Thread 类中，控制着整个线程的运行</li><li>执行的代码：传递给 Thread 类，由其控制按序执行</li><li>处理的数据：传递给 Thread 类，是在代码执行过程中需要处理的数据</li></ul><h2 id="14-1-2-线程的状态"><a href="#14-1-2-线程的状态" class="headerlink" title="14.1.2 线程的状态"></a>14.1.2 线程的状态</h2><blockquote><p>Java 的线程是通过包 java.lang 中定义的类 Thread 来实现的。当生成了一个 Thread 类后就产生了一个线程。通过该对象实例，可以启动线程、终止线程，或暂时挂起线程</p></blockquote><p>线程共有 4 种状态：新建（New）、可运行（Runnable）、死亡（Dead）、阻塞（Blocked）</p><ul><li><strong>新建（New）</strong>：线程对象刚刚创建，还未启动（New）。此时还处于不可运行状态，但已有了相应内存空间及其他资源</li><li><strong>可运行（Runnable）</strong>：此时线程已经启动，处于线程的 run() 方法中。这种情况下线程可能正在运行；也可能没有运行，但只要 CPU 空闲就会立刻运行。可以运行但没在运行的线程都排在一个队列中，这个队列称为就绪队列。可运行状态下，运行中的线程处于运行状态（Running），未运行线程处于就绪状态（Ready）。调用 start() 方法可以让线程进入可运行状态。</li><li><strong>死亡（Dead）</strong>：线程死亡（Terminated）的原因有两个：一是 run() 方法最后一个语句执行完毕，二是线程遇到异常退出</li><li><strong>阻塞（Blocked）</strong>：一个正常运行的线程因为特殊原因被暂停执行，就进入阻塞状态（Blocked）。阻塞时线程不能进入就绪对流排队，必须等到引起阻塞的原因消除，才能重新进入队列排队。引起阻塞的方法很多，sleep() 和 wait() 是两个常用的阻塞方法</li><li><strong>中断线程</strong>：<ul><li><code>void interrupt()</code>：向一个线程发送一个中断请求，并把该线程的 interruptd 状态变为 true。中断阻塞线程的场合，会抛出 InterruptException 异常</li><li><code>static boolean interrupted()</code>：检测当前线程是否被中断，并重置状态 interrupted 的值。连续调用该方法的场合，第二次调用会返回 false</li><li><code>boolean isInterrupted()</code>：检测当前线程是否中断。不改变 interrupted 的值</li></ul></li></ul><h1 id="14-2-线程的使用"><a href="#14-2-线程的使用" class="headerlink" title="14.2 线程的使用"></a>14.2 线程的使用</h1><p>在 Java 中线程使用有两种方法：</p><ol><li><p>继承 <code>Thread</code> 类，重写 <code>run</code> 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span><span class="comment">//可见 Thread 也是实现了 Runable 接口</span></span><br></pre></td></tr></table></figure></li><li><p>实现 <code>Runable</code> 接口，重写 <code>run</code> 方法</p></li></ol><h2 id="14-2-1-继承Thread类"><a href="#14-2-1-继承Thread类" class="headerlink" title="14.2.1 继承Thread类"></a>14.2.1 继承Thread类</h2><blockquote><p>Thread 类是 Java 用于表示线程的类。那么，一个类被定义为其子类，则该类也能用来表示线程</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> <span class="type">Type</span> <span class="variable">type</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Type</span>();</span><br><span class="line"> type.start();<span class="comment">//开始线程</span></span><br><span class="line"> <span class="comment">//如果用 run 方法，则还是停留在主线程</span></span><br><span class="line"> <span class="comment">//  那样，相当于 串行。执行完毕才继续</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Type</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;<span class="comment">//先继承 Thread 类</span></span><br><span class="line"> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">         System.out.println(i);</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             Thread.sleep(<span class="number">100</span>);<span class="comment">//休眠 100 毫秒</span></span><br><span class="line">         &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">             e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (i++ == <span class="number">10</span>) &#123;<span class="comment">//i = 10 时停止循环</span></span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>关于<code>start()</code> 方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">...</span><br><span class="line">    start0();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">start0</span><span class="params">()</span>;<span class="comment">//start0 是 native。即，底层方法</span></span><br></pre></td></tr></table></figure><ol><li><code>start()</code> 方法调用了一个 <code>start0()</code> 底层方法</li><li><code>start0()</code> 是本地方法，由 JVM 调用，底层是 c&#x2F;c++ 实现</li><li>真正的多线程效果，是 <code>start0()</code>，而不是 <code>run()</code></li><li><code>start()</code> 方法调用 <code>start0() </code>方法后，该线程不一定会立刻执行，只是将线程变成了可运行状态。具体何时运行，由 CPU 统一调度</li></ol><h2 id="14-2-2-实现Runable接口"><a href="#14-2-2-实现Runable接口" class="headerlink" title="14.2.2 实现Runable接口"></a>14.2.2 实现Runable接口</h2><blockquote><p>Runnable 是 Java 用以实现线程的接口。从根本上将，任何实现线程的类都必须实现该接口。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> <span class="type">Runnable</span> <span class="variable">type</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Type</span>();<span class="comment">//Runable 没有 start()方法</span></span><br><span class="line"> <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(type);<span class="comment">//所以，这里使用了 静态代理</span></span><br><span class="line"> thread.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Type</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;<span class="comment">//这部分和 Thread 相似</span></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">         System.out.println(i &lt;&lt; i);</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             Thread.sleep(<span class="number">100</span>);</span><br><span class="line">         &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">             e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (++i &gt; <span class="number">15</span>)&#123;</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>关于静态代理</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Thread</span> <span class="keyword">implements</span> <span class="title class_">Runable</span> &#123;&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">private</span> Runnable target;</span><br><span class="line">...</span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">Thread</span><span class="params">(Runnable target)</span> &#123;<span class="comment">//构造器</span></span><br><span class="line">     init(<span class="literal">null</span>, target, <span class="string">&quot;Thread-&quot;</span> + nextThreadNum(), <span class="number">0</span>);</span><br><span class="line">     <span class="comment">//这句话可以先理解为 this.target = target;</span></span><br><span class="line"> &#125;</span><br><span class="line">...</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> (target != <span class="literal">null</span>) &#123;</span><br><span class="line">         target.run();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//相当于，先创建了一个新线程，然后在新线程中调用 run 方法</span></span><br></pre></td></tr></table></figure><h2 id="14-2-3-继承Thread和实现Runable的区别"><a href="#14-2-3-继承Thread和实现Runable的区别" class="headerlink" title="14.2.3 继承Thread和实现Runable的区别"></a>14.2.3 继承Thread和实现Runable的区别</h2><ol><li>从 Java 设计来看，两者本质上没有区别。Thread 类本身就实现了 Runable 接口</li><li>实现 Runable 接口的方式更加适合多个线程共享一个资源的情况，且避免了单继承的限制。建议使用。</li></ol><h2 id="14-2-4-线程中止"><a href="#14-2-4-线程中止" class="headerlink" title="14.2.4 线程中止"></a>14.2.4 线程中止</h2><ol><li>当线程结束后，会自动退出</li><li>还可以通过使用变量来控制 <code>run</code> 方法退出的方式来停止线程，即 通知方式。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="keyword">while</span> (active) &#123;<span class="comment">//这个场合，只要外部控制 active 即可</span></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         Thread.sleep(<span class="number">1</span>);</span><br><span class="line">     &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">     &#125;</span><br><span class="line">     move();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="14-2-5-线程的常用方法"><a href="#14-2-5-线程的常用方法" class="headerlink" title="14.2.5 线程的常用方法"></a>14.2.5 线程的常用方法</h2><ul><li>setName(name)：设置线程名称，使之与参数 name 相同</li><li>getName()：返回线程名称</li><li>start()：线程开始执行。JVM 调用 start0 方法该方法会创建新的线程，新线程调用 run。</li><li>run()：到下面玩跑步就是简单的方法调用，不会产生新线程。</li><li>setPriority(int priority)：更改线程优先级getPriority()：获取线程优先级priority 范围：每个线程都有一个优先级。Java 线程调度采用如下优先级策略：<ul><li>MAX_PRIORITY：最高优先级（10）</li><li>MIN_PRIORITY：最低优先级（1）</li><li>NORM_PRIORITY：不高不低，真是好极了的优先级（5）</li><li>优先级高的先执行，优先级低的后执行</li><li>每个线程创建时会被自动分配一个优先级。默认的场合，继承父类优先级</li><li>任务紧急的线程，优先级较高</li><li>同优先级线程按 “先进先出” 原则调度</li></ul></li><li>sleep(int millsecond)：让线程休眠指定的时间该方法是 Thread 类的静态方法，可以直接调用</li><li>interrupt()：中断线程（不是 中止）</li><li>yield()：线程的礼让。让出 CPU 让其他线程执行。因为礼让的时间不确定，所以不一定礼让成功。本质是 RUNNING 切换为 READY，即让当前线程放弃执行权</li><li>wait()：导致当前线程等待直到其他线程调用此对象的 notify() 方法或 notifyAll() 方法才能唤醒此线程notify()、notifyAll()：唤醒因 wait() 阻塞的线程。这些方法（wait()、notify()、notifyAll()）只能在 synchrnized 方法或代码块中调用</li><li>join()：线程的插队。插队的线程一旦插入成功，则必定先执行完插队线程的所有任务将导致其他线程的等待，直到 join() 方法的线程结束join(long timeout)：join，但是时间到后也能结束其他线程的等待</li><li>isAlive()：测试当前线程是否在活动</li><li>Thread.currentThread()：引用当前运行中的线程</li></ul><h2 id="14-2-6-用户线程和守护线程"><a href="#14-2-6-用户线程和守护线程" class="headerlink" title="14.2.6 用户线程和守护线程"></a>14.2.6 用户线程和守护线程</h2><ul><li>用户线程：也叫工作线程。当线程任务执行完毕或通知方式结束</li><li>守护线程：一般是为工作线程服务的。当所有线程结束，守护线程自动结束常见的守护线程：垃圾回收机制<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Thread</span> <span class="variable">thraed</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(bullet);</span><br><span class="line">thread.setDeamon(<span class="literal">true</span>);<span class="comment">//这样，子线程被设置为主线程的守护线程</span></span><br><span class="line">thread.start();</span><br></pre></td></tr></table></figure></li></ul><h2 id="14-2-7-线程的生命周期"><a href="#14-2-7-线程的生命周期" class="headerlink" title="14.2.7 线程的生命周期"></a>14.2.7 线程的生命周期</h2><p>线程的状态有</p><ul><li>NEW：尚未启动</li><li>RUNNABLE：在 JVM 中执行的线程可细分为 READY 和 RUNNING</li><li>BLOCKED：被阻塞等待监视器锁定的线程</li><li>WAITING：正等待另一个线程执行特定动作的线程</li><li>TIMED_WAITING：正等待另一个线程执行特定动作达到等待时间的线程</li><li>TERMINATED：已退出的线程</li></ul><h1 id="14-3-线程的互斥"><a href="#14-3-线程的互斥" class="headerlink" title="14.3 线程的互斥"></a>14.3 线程的互斥</h1><blockquote><p>在多线程编程，一些敏感数据不允许被多个线程同时访问。此时就用同步访问技术，保证数据在任意时刻，最多有一个线程同时访问，以保证数据的完整性。<br>也可以这样理解：线程同步，即当有一个线程对内存进行操作时，其他线程都不能对这个内存地址进行操作（被阻塞），直到该线程完成操作，再让下一线程进行操作。</p></blockquote><h2 id="14-3-1-互斥锁"><a href="#14-3-1-互斥锁" class="headerlink" title="14.3.1 互斥锁"></a>14.3.1 互斥锁</h2><blockquote><p>在 Java 语言中，引入了 “对象互斥锁” 的概念，也称为监视器，来保证共享数据操作的完整性<br>每个对象都对应一个可称为 “互斥锁” 的标记，这个标记用来保证在任一时刻都只能有一个线程访问对象。<br>Java 语言中，有 2 种方式实现互斥锁：</p><ul><li>用关键字 volatile 声明一个共享数据（变量）。一般很少使用该关键字</li><li>用关键字 synchronized 声明共享数据的一个方法或一个代码</li></ul></blockquote><p>同步的局限性：导致程序的执行效率要降低。</p><blockquote><p>非静态的对象，同步方法的锁可以是 this，也可以是其他对象（要求是同一对象）<br>静态对象，同步方法的锁为当前类本身</p></blockquote><ol><li><p>同步代码块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (对象) &#123;<span class="comment">//得到对象的锁，才能操作同步代码</span></span><br><span class="line">需要被同步代码;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在第一个线程持有锁定标记时，如果另一个线程企图执行该代码块语句，将从对象中索取锁定标记。<br>因为此时该标记不可得，古该线程不能继续执行，而是加入等待队列。<br>程序运行完 synchronized 代码块后，锁定标记会被自动返还。即使该同步代码块执行过程中抛出异常也是如此。一个线程多次调用该同步代码块的场合，也会在最外层执行完毕后正确返还。</p></li><li><p>放在方法声明中，表示整个方法为同步方法</p></li></ol><p>因为 synchronized 语句的参数必须是 this，因此允许下面这种简洁的写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">代码;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="14-3-2-线程死锁"><a href="#14-3-2-线程死锁" class="headerlink" title="14.3.2 线程死锁"></a>14.3.2 线程死锁</h2><blockquote><p>多个线程都占用了对方的资源，不肯相让，就导致了死锁。编程时要避免死锁的产生。</p></blockquote><ul><li>以下操作会释放锁<ol><li>当前线程的同步方法、同步代码块执行结束。</li><li>当前线程在同步方法、同步代码块中遇到 break、return</li><li>当前线程在同步方法、同步代码块中出现了未处理的 Error</li><li>当前线程在同步方法、同步代码块中执行了 wait() 方法，当前线程暂停，并释放锁</li></ol></li><li>以下操作不会释放锁<ol><li>执行同步方法、同步代码块时，程序调用 Thread.sleep() 或 Thread.yield() 方法暂停当前线程的执行，不会释放锁</li><li>线程执行同步代码块时，其他线程调用了该线程的 suspend() 方法将该线程挂起，该线程不会释放锁所以，应尽量避免使用 suspend() 和 resume() 来控制线程</li></ol></li></ul><h1 id="14-4-线程的同步"><a href="#14-4-线程的同步" class="headerlink" title="14.4 线程的同步"></a>14.4 线程的同步</h1><blockquote><p>Java 中，可以使用 wait()、notify()、notifyAll() 来协调线程间的运行速度关系。这些方法都被定义在 java.lang.Object 中<br>Java 中的每个对象实例都有两个线程队列和它相连。一个用以实现等待锁定标志的线程，另一个用来实现 wait() 和 notify() 的交互机制</p></blockquote><ul><li>wait()：让当前线程释放所有其持有的 “对象互斥锁”，进入等待队列</li><li>notify()、notifyAll()：唤醒一个或所有在等待队列中等待的线程，并将他们移入同一个等待 “对象互斥锁” 的队列。执行这些方法时如果没有等待中的线程，则其不会生效，也不会被保留到以后再生效<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (key) &#123;</span><br><span class="line">    <span class="keyword">if</span> (key.value == <span class="number">0</span>) key.wait();</span><br><span class="line">    key.value--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (key) &#123;</span><br><span class="line">    key.value++;</span><br><span class="line">    key.nitifyAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>因为调用这些方法时必须持有对象的 “对象互斥锁”，所以上述方法只能在 synhronized 方法或代码块中执行。</li></ul>]]></content>
    
    
    <summary type="html">Java基础的多线程体系</summary>
    
    
    
    <category term="Java 学习" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaSE (韩顺平)" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/JavaSE-%E9%9F%A9%E9%A1%BA%E5%B9%B3/"/>
    
    
    <category term="Java 学习" scheme="http://example.com/tags/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaSE" scheme="http://example.com/tags/JavaSE/"/>
    
    <category term="韩顺平基础" scheme="http://example.com/tags/%E9%9F%A9%E9%A1%BA%E5%B9%B3%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>13. Java数据结构(集合)</title>
    <link href="http://example.com/2022/09/11/JavaSE/13.%20Java%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84(%E9%9B%86%E5%90%88)/"/>
    <id>http://example.com/2022/09/11/JavaSE/13.%20Java%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84(%E9%9B%86%E5%90%88)/</id>
    <published>2022-09-11T10:58:32.321Z</published>
    <updated>2022-09-12T02:57:28.516Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>数据结构分为两种：线性结构、非线性结构</p></blockquote><p><strong>线性结构：</strong></p><ul><li>最常用的数据结构。数据元素间存在一对一线性关系。</li><li>线性结构有 2 种不同的存储结构：顺序储存结构，链式储存结构顺序存储结构中元素存储在连续的内存空间中。链式储存结构中元素储存在非连续的空间中，元素节点中存放数据元素及相邻元素的地址信息</li><li>常见的线性结构有：数组、队列、链表、栈等</li></ul><p><strong>非线性结构：</strong></p><ul><li>非线性结构包括：二维数组、多维数组、广义表、树结构、图结构</li></ul><h1 id="13-1-集合的框架体系"><a href="#13-1-集合的框架体系" class="headerlink" title="13.1 集合的框架体系"></a>13.1 集合的框架体系</h1><blockquote><p>Java 提供了一系列集合容器，以方便程序员动态保存元素。并提供了一系列方便的操作对象的方法。<br>Java 集合主要分为两组：单列集合（Collection）、双列集合（Map）</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28255706/1660366812532-db8915d2-eda5-462b-a8dd-46baa909c19d.png#clientId=u900872a1-d44d-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=uc0f92870&margin=%5Bobject%20Object%5D&name=%E9%9B%86%E5%90%88%E4%BD%93%E7%B3%BB%E5%9B%BE_13.1.png&originHeight=641&originWidth=950&originalType=binary&ratio=1&rotation=0&showTitle=false&size=41859&status=done&style=none&taskId=u3c1c40fc-0853-446d-b334-d8c7813b1af&title=" alt="集合体系图_13.1.png"></p><ul><li><strong>Collection 接口（单列集合）</strong>：可以存放多个元素。每个元素可以是 ObjectCollection 接口有两个重要子接口：List（有序集合）和 Set（无序集合）</li><li><strong>Map 接口（双列集合）</strong>：用于保存具有映射关系的数据：key - value（双列元素）key 和 value 可以是任何类型的引用数据类型。其中 key 不能重复，value 可以重复key 和 value 存在单一对应关系。通过特定的 key 一定能找到指定的 value</li></ul><h1 id="13-2-单列集合接口-Collection"><a href="#13-2-单列集合接口-Collection" class="headerlink" title="13.2 单列集合接口 Collection"></a>13.2 单列集合接口 Collection</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Collection</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">Lterable</span>&lt;E&gt;</span><br></pre></td></tr></table></figure><blockquote><p>Collection 实现子类可以存放多个元素。每个元素可以是 Object<br>有些 Collection 实现子类能存放重复的元素，有些不能<br>有些 Collection 实现子类是有序的（List） ，有些不是（Set）<br>Collection 接口没有直接的实现子类，都是通过其子接口实现的</p></blockquote><p><strong>常用方法：</strong></p><ul><li><p><code>add</code>:添加单个元素**</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ArrayList</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">list.add(<span class="string">&quot;哈哈啊&quot;</span>);</span><br><span class="line">list.add(<span class="number">10</span>);<span class="comment">// 相当于List.add(new Integer(10));</span></span><br><span class="line">list.add(<span class="literal">true</span>);<span class="comment">// 同上</span></span><br></pre></td></tr></table></figure></li><li><p><code>remove</code>: 删除单个元素**</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list.remove(<span class="number">0</span>)<span class="comment">// 删除编号 0 的元素。上例中会删除 &quot;哈哈啊&quot;</span></span><br><span class="line">list.remove((Integer)<span class="number">10</span>);<span class="comment">// 删除上例的 10 要这样写</span></span><br></pre></td></tr></table></figure></li><li><p><code>contains</code>：检查元素是否存在</p></li><li><p><code>size</code>：获取元素个数</p></li><li><p><code>isEmpty</code>：判断是否为空</p></li><li><p><code>clear</code>：清空</p></li><li><p><code>addAll</code>：添加多个元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ArrayList</span> <span class="variable">list2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">list2.add(<span class="number">111</span>);</span><br><span class="line">list2.add(<span class="string">&quot;idea&quot;</span>);</span><br><span class="line">list.addAll(list2);<span class="comment">// 这里可以输入所有实现了 Collection 接口的集合</span></span><br></pre></td></tr></table></figure></li><li><p><code>containsAll</code>: 检查多个元素是否存在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.contaionsAll(list2);<span class="comment">// 同上，放一个实现了 Collection 接口的集合</span></span><br></pre></td></tr></table></figure></li><li><p><code>removeAll</code>: 删除多个元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.removeAll(list2);<span class="comment">// 同上</span></span><br></pre></td></tr></table></figure></li><li><p><code>Iterator iterator()</code>：返回指向集合开始位置的迭代器</p></li></ul><h2 id="13-2-1-迭代器-Iterator"><a href="#13-2-1-迭代器-Iterator" class="headerlink" title="13.2.1 迭代器 Iterator"></a>13.2.1 迭代器 Iterator</h2><blockquote><p>Iterator 对象称为迭代器，主要用于遍历 Collection 集合中的元素。<br>Collection 继承的 Iterable 接口中，提供了 iterator() 方法，会返回一个新的迭代器。<br>Iterator 对象仅用于遍历集合，本身不存放元素<br>IDEA 中，迭代器 while 循环的模板快捷键：itit</p></blockquote><p><strong>常用方法：</strong></p><ul><li><code>boolean hasNext()</code>：该方法判断是否有下一个元素。</li><li><code>T next()</code>：该方法会将指针下移，然后返回下移后的位置上的元素</li></ul><p><strong>用迭代器遍历元素：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Collection&lt;Object&gt; c = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">Iterator&lt;Object&gt; iterator = c.iterator();<span class="comment">// [1]</span></span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext())&#123;<span class="comment">// [2]</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> iterator.next();<span class="comment">// [3]</span></span><br><span class="line">System.out.println(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>获取迭代器</li><li>判断有无下一元素</li><li>将迭代器后移，并返回那个后移位置上的元素while 循环结束后，指针指向最后元素的位置。再次 next() 会报错。如果需要再使用，需要重置迭代器。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iterator = list.iterator();<span class="comment">// 重置了迭代器</span></span><br></pre></td></tr></table></figure><strong>for each（增强 for 循环）：</strong><br>for each 的语法与 for 循环相似，但是可以遍历 Collection 和 数组 中的元素<br>IDEA 中，增强 for 循环的模板快捷键：I<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Object o : list)&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>for each 可在 Collection 集合中使用。</li><li>for each 的底层在本质上也是 Iterator。可以理解为简化版本的迭代器遍历。</li></ul><h1 id="13-3-有序集合接口-List"><a href="#13-3-有序集合接口-List" class="headerlink" title="13.3 有序集合接口 List"></a>13.3 有序集合接口 List</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">List</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">Collection</span>&lt;E&gt;</span><br></pre></td></tr></table></figure><p>List 是 Collection 接口的子类接口<br>List 是有序（添加顺序和取出顺序一致）的，可重复的<br>List 中的每个元素都有其对应的顺序索引（从 0 开始编号）<br><strong>常用方法：</strong></p><ul><li><p>add(int, obj)：在 int 位置插入 obj 元素。返回 true</p></li><li><p>add(obj)：在末尾插入 obj。返回 true</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list.add(<span class="number">111</span>);</span><br><span class="line">list.add(<span class="number">0</span>, <span class="number">110</span>);<span class="comment">// 在第 1 个位置插入数字 110</span></span><br></pre></td></tr></table></figure></li><li><p>addElement(obj)：在末尾插入 obj。无返回值。你说要这方法有啥用？名字还长一截</p></li><li><p>addAll(int, collection)：在 int 位置插入 collection 中的所有元素</p></li><li><p>get(int)：返回 int 位置的元素</p></li><li><p>indexOf(obj)：返回 obj 首次出现时的位置</p></li><li><p>lastIndexOf(obj)：返回 obj 最后一次出现时的位置</p></li><li><p>remove(int)：移除 int 位置的元素，并返回那个被移除的元素</p></li><li><p>set(int, obj)：设置 int 位置的元素为 obj。相当于替换。返回那个被替换元素的下标setElement(obj, int)：设置 int 位置的元素为 obj。无返回值</p></li><li><p>subList(int1, int2)：返回 [int1, int2) 范围的元素构成的子集合</p></li></ul><h2 id="13-3-1-可变数组-ArrayList"><a href="#13-3-1-可变数组-ArrayList" class="headerlink" title="13.3.1 可变数组 ArrayList"></a>13.3.1 可变数组 ArrayList</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayList</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">AbstractList</span>&lt;E&gt;</span><br><span class="line">     <span class="keyword">implements</span> <span class="title class_">List</span>&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable</span><br></pre></td></tr></table></figure><p>ArrayList 是 List 的实现子类。其底层由数组来实现存储。<br>ArrayList 可以存放 null<br><strong>ArrayList 的源码：</strong></p><ol><li><p>ArrayList 中维护了一个 Object 类型的数组 elementData。该数组就是用来存放元素的数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">transient</span> Object[] elementData;</span><br></pre></td></tr></table></figure></li><li><p>创建 ArrayList 对象时，如果使用无参构造器，则 elementData[] 初始容量为 0</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果使用指定大小构造器，则初始容量为指定大小。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.elementData = <span class="keyword">new</span> <span class="title class_">Object</span>[initialCapacity];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">/* 这个场合，与默认构造器的不同之处在于</span></span><br><span class="line"><span class="comment">扩容时，该 0 容量变为 1，而默认构造器会变为 10 */</span></span><br><span class="line">        <span class="built_in">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(...);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>扩容的场合：</p></li></ol><p>如果是** 无参构造器生成的初始 0 长度的 elementData**，则将其容量置为 10。<br>否则容量扩容为 1.5 倍。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 扩容方法，传入的参数 minCapacity 是容器现有元素数量 + 1 的值</span></span><br><span class="line"><span class="comment">如果是无参构造器生成的默认数组，此时传入固定值 10 */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">grow</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> elementData.length;</span><br><span class="line">    <span class="comment">/* 计算新的容量（旧容量的 1.5 倍）</span></span><br><span class="line"><span class="comment">    此处 &gt;&gt; 为位运算符，等同于 newC = oldC + oldC / 2; */</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="comment">/* 这里如果原容量是特殊值（1 或 0），容量会变为那个 minCapacity 的值 */</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="13-3-2-可变数组-Vector"><a href="#13-3-2-可变数组-Vector" class="headerlink" title="13.3.2 可变数组 Vector"></a>13.3.2 可变数组 Vector</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Vector</span>&lt;E&gt;</span><br><span class="line">    <span class="keyword">extends</span> <span class="title class_">AbstractList</span>&lt;E&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">List</span>&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable</span><br></pre></td></tr></table></figure><blockquote><p>Vector 是 List 的实现子类。其底层由数组来实现存储<br>Vector 与 ArrayList 基本等同。ArrayList 效率更高，Vector 线程安全。<br>在开发中，需要考虑线程安全时，建议使用 Vector ，而非 ArrayList。</p></blockquote><p><strong>Vector 的底层源码：</strong></p><ol><li><p>底层维护了一个 Object 类型的数组 elementData。用以存放元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object[] elementData;</span><br></pre></td></tr></table></figure></li><li><p>使用无参构造器创建对象时，默认大小是 10</p></li></ol><p>使用有参构造器的场合，默认是那个指定大小（initialCapaticy）<br>也能在构造器中指定那个扩容的增长速度（capacityIncrement）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Vector</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Vector</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(initialCapacity, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Vector</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">int</span> capacityIncrement)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(...);</span><br><span class="line">    <span class="built_in">this</span>.elementData = <span class="keyword">new</span> <span class="title class_">Object</span>[initialCapacity];</span><br><span class="line">    <span class="built_in">this</span>.capacityIncrement = capacityIncrement;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>扩容的场合，容量变成 2 倍</li></ol><p>使用有参构造器改变了 capacityIncrement 的场合，增量是那个指定数值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">grow</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> elementData.length;</span><br><span class="line">    <span class="comment">/* 计算新的容量（按照指定的增速扩容）</span></span><br><span class="line"><span class="comment">    那个指定无效或未指定时，容量变为 2 倍 */</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> oldCapacity + ((capacityIncrement &gt; <span class="number">0</span>) ?</span><br><span class="line">                                     capacityIncrement : oldCapacity);</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="13-3-3-链表-LinkedList"><a href="#13-3-3-链表-LinkedList" class="headerlink" title="13.3.3 链表 LinkedList"></a>13.3.3 链表 LinkedList</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedList</span>&lt;E&gt;</span><br><span class="line">    <span class="keyword">extends</span> <span class="title class_">AbstractSequentialList</span>&lt;E&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">List</span>&lt;E&gt;, Deque&lt;E&gt;, Cloneable, java.io.Serializable</span><br></pre></td></tr></table></figure><blockquote><p>LinkedList 是 List 的实现子类，底层以链表形式存储元素。<br>链表是一种非线性结构：其以节点方式存储，节点间在内存上的位置不连续。<br>链表是有序的列表。单向链表每个节点包含 data 域和 next 域。那些 next 域指向下一节点的位置。<br>双向链表在单向链表的基础上，每个节点加入 prev 区域以指示其前方节点。这样，就能实现双向查找。双向链表可以不依靠辅助节点而实现自我删除。<br>LinkedList 底层实现了 双向链表 和 双端队列 特点。<br>LinkedList 可以添加 null，可添加重复元素。但没有实现同步，因此线程不安全。</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28255706/1660375592427-e6ff720f-b420-4f62-850f-83615e33048f.png#clientId=u900872a1-d44d-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=ub042fae1&margin=%5Bobject%20Object%5D&name=%E9%93%BE%E8%A1%A8%E5%9B%BE_13.3.3.png&originHeight=421&originWidth=778&originalType=binary&ratio=1&rotation=0&showTitle=false&size=170756&status=done&style=none&taskId=u64a6d58a-e275-40ba-a8b9-d411766f0d0&title=" alt="链表图_13.3.3.png"><br><strong>常用方法：</strong></p><ul><li>void addLast(E e)：尾插一个新的元素LinkedList 的 add 方法即调用该方法</li><li>void addFirst(E e)：头插一个新的元素</li><li>E removeLast()：移除并返回尾部元素。为空时报错</li><li>E poll()：移除并返回尾部元素。为空时返回 null</li><li>E removeFirst()：移除并返回头部元素。为空时报错</li><li>E getLast()：仅返回尾部元素。为空时报错</li><li>E peek()：返回尾部元素。为空时返回 null</li><li>E element()：返回头部元素。为空时返回 null</li><li>E getFirst()</li></ul><p><strong>LinkedList 的源码：</strong></p><ol><li><p>LinkedList 只有默认构造器和一个拷贝构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedList</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>();</span><br><span class="line">    addAll(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>LinkedList 底层维护了一个 双向链表</p></li></ol><p>两个属性 first、last 分别指向 首节点 和 尾节点<br>每个节点（Node 对象），里面又维护了 prev、next、item 属性。<br>其中通过 prev 指向前一个节点，通过 next 指向后一个节点。最终实现双向链表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; first;</span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; last;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;E&gt; &#123;</span><br><span class="line">    E item;</span><br><span class="line">    Node&lt;E&gt; next;</span><br><span class="line">    Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">        <span class="built_in">this</span>.item = element;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">        <span class="built_in">this</span>.prev = prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>LinkedList 不需要扩容。其增删元素时只要改变节点的指向即可。也因此，其添加、删除元素效率比数组更高</li></ol><p><strong>ArrayList 和 LinkedList 的比较：</strong></p><p>| **</p><p> | <strong>底层结构</strong> | <strong>增删效率</strong> | <strong>改查效率</strong> |<br>| — | — | — | — |<br>| ArrayList | 可变数组 | 低（数组扩容） | 高 |<br>| LinkedList | 双向链表 | 高（链表追加） | 低 |</p><p>应该根据实际情况来选择使用的集合：</p><ul><li>如果改查操作多，选择 ArrayList。一般来说，在程序中，80% - 90% 都是查询。大部分情况下，选择 ArrayList。</li><li>如果增删操作多，选择 LinkedList</li></ul><h1 id="13-4-双列集合接口-Map"><a href="#13-4-双列集合接口-Map" class="headerlink" title="13.4 双列集合接口 Map"></a>13.4 双列集合接口 Map</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Map</span>&lt;K,V&gt;</span><br></pre></td></tr></table></figure><p><strong>以下关于 Map 接口的描述，适用于 JDK 8 的环境</strong></p><blockquote><p>Map 与 Collection 并列存在，用于保存具有映射关系的数据：key - value（双列元素）<br>Map 的 key 和 value 可以是任何类型的引用数据类型，也能存入 null。<br>Map 的 key 不允许重复，value 可以重复。key 和 value 存在单一对应关系。通过特定的 key 一定能找到指定的 value。<br>一组 k - v 会被封装到一个 Entry 对象中。Entry 是一个内部接口。Map 的实现子类中都包含一个实现这个接口的内部类。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Entry</span>&lt;K,V&gt; &#123;</span><br><span class="line">K <span class="title function_">getKey</span><span class="params">()</span>;</span><br><span class="line">V <span class="title function_">getValue</span><span class="params">()</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果添加相同的 key，会覆盖原先的 key -value。等同于修改（key 不会替换，value 会被替换）<br><strong>常用方法：</strong></p><ul><li>put()：添加。已存在的场合，实行替换。（key 不替换，value 替换）</li><li>remove()：根据键删除映射关系</li><li>get()：根据键获取值</li><li>size()：元素个数</li><li>isEmpty()：判断个数是否为 0</li><li>clear()：清空</li><li>containsKey()：查找键是否存在</li><li>Set<K> keySet()：获取所有 键 构成的集合Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()：获取所有 Entry 构成的集合Collection<V> values()：获取所有 值 构成的集合</li></ul><p><strong>Map接口遍历元素：</strong></p><ul><li><strong>方法一： 利用<code>Set&lt;K&gt; keySet()</code> 方法</strong></li></ul><p>先得到所有 keys，再遍历 keys，根据每个 key 获得 value：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Set</span> <span class="variable">keyset</span> <span class="operator">=</span> map.keySet();</span><br><span class="line"><span class="keyword">for</span> (Object o : keyset) &#123;</span><br><span class="line">System.out.println(o + <span class="string">&quot; = &quot;</span> + map.get(o));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>方法二：利用 Set<V> values() 方法</strong></li></ul><p>直接把所有 values 取出，之后遍历 values</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Collection</span> <span class="variable">values</span> <span class="operator">=</span> map.values();</span><br><span class="line"><span class="keyword">for</span> (Object value : values) &#123;</span><br><span class="line">System.out.println(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>方法三：利用 Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() 方法</strong></li></ul><p>通过获取 entrySet 来获取 k - v</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;Map.Entry&gt; entrySet = map.entrySet();</span><br><span class="line"><span class="keyword">for</span> (Map.Entry e : entrySet) &#123;</span><br><span class="line">System.out.println(e.getKey() + <span class="string">&quot; - &quot;</span> + e.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="13-4-1-散列表-HashMap"><a href="#13-4-1-散列表-HashMap" class="headerlink" title="13.4.1 散列表 HashMap"></a>13.4.1 散列表 HashMap</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMap</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">AbstractMap</span>&lt;K,V&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">Map</span>&lt;K,V&gt;, Cloneable, Serializable</span><br></pre></td></tr></table></figure><blockquote><p>HashMap 是 Map 接口使用频率最高的实现类。是根据关键码值（key value）而进行直接访问的数据结构。通过将关键码值映射到表中一个位置来访问记录，以加快查找速度。<br>那个映射函数叫做散列函数，存放记录的数组叫做散列表（哈希表）<br>HashMap 是以 k - v 对得到方式来存储数据。一组数据会被封装到一个 Node 对象中。HashMap 是 Map 接口使用频率最高的实现类。是根据关键码值（key value）而进行直接访问的数据结构。通过将关键码值映射到表中一个位置来访问记录，以加快查找速度。<br>那个映射函数叫做散列函数，存放记录的数组叫做散列表（哈希表）<br>HashMap 是以 k - v 对得到方式来存储数据。一组数据会被封装到一个 Node 对象中。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>.Entry&lt;K,V&gt; &#123;</span><br><span class="line"> <span class="keyword">final</span> <span class="type">int</span> hash;</span><br><span class="line"> <span class="keyword">final</span> K key;</span><br><span class="line"> V value;</span><br><span class="line"> Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>JDK 7 前，HashMap 底层是 数组 + 链表。JDK 8 后，底层是 数组 + 链表 + 红黑树。HashMap 不保证映射的顺序。<br>HashMap 没有实现同步（没有 synchronized），是线程不安全的</p></blockquote><p><strong>HashMap 的源码：</strong></p><ol><li><p>HashMap 底层维护了 Node 类型的数组 table。默认为 null</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br></pre></td></tr></table></figure><p>另外，还有集合 values、keySet、enrtySet。这些集合能帮助程序员进行遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">transient</span> Set&lt;K&gt;keySet;</span><br><span class="line"><span class="keyword">transient</span> Collection&lt;V&gt;values;</span><br><span class="line"><span class="keyword">transient</span> Set&lt;Map.Entry&lt;K,V&gt;&gt;entrySet;</span><br></pre></td></tr></table></figure></li><li><p>创建对象时，默认构造器将加载因子（loadfactor）初始化为 0.75。</p></li></ol><p>也能指定那些初始容量和加载因子。<br>默认构造器第一次添加元素的场合，table 扩容为 16，临界值为 16 * 0.75 &#x3D; 12。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">float</span> <span class="variable">DEFAULT_LOAD_FACTOR</span> <span class="operator">=</span> <span class="number">0.75f</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAXIMUM_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;<span class="comment">// 这个默认构造的场合，其他参数都是默认值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(...);</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">        initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(...);</span><br><span class="line">    <span class="built_in">this</span>.loadFactor = loadFactor;</span><br><span class="line">    <span class="built_in">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>添加时容量不够的场合，需要扩容。</li></ol><p>默认构造器第一次添加元素的场合，table 扩容为 16，临界值为 16 * 0.75 &#x3D; 12。<br>扩容的场合，容量变为 2 倍。临界值相应变化。<br>临界值不会超过那个指定的 MAXIMUM_CAPACITY（1 &lt;&lt; 30），否则变成 Integer.MAX_VALUE。<br>JDK 8 中，如果一条链表的元素个数超过 TREEIFY_THRESHOLD（默认是 8），并且 table 的大小 &gt;&#x3D; MIN_TREEIFY_CAPACITY（默认 64），会进行树化。<br>剪枝：红黑树的元素减少到一定程度，会被重新转化为 链表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAXIMUM_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_INITIAL_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;<span class="comment">// &lt;- 旧的数据数组 table</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCap</span> <span class="operator">=</span> (oldTab == <span class="literal">null</span>) ? <span class="number">0</span> : oldTab.length;<span class="comment">// &lt;- 旧的 table 的容量</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">oldThr</span> <span class="operator">=</span> threshold;<span class="comment">// &lt;- 旧的临界值</span></span><br><span class="line">    <span class="type">int</span> newCap, newThr = <span class="number">0</span>;<span class="comment">// &lt;- 新的容量、临界值</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 旧的数组不为空时，</span></span><br><span class="line"><span class="comment">    如果容量已达指定的 MAXIMUM_CAPACITY，则不扩容</span></span><br><span class="line"><span class="comment">    否则扩容为 2 倍容量，临界值也变为 2 倍 */</span></span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        newCap = oldCap &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span> oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 旧的数组为空，但临界值已被指定（原因是：指定构造器传入初始容量为 0） */</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>)</span><br><span class="line">        newCap = oldThr;</span><br><span class="line">    <span class="comment">/* 旧的数组为空，临界值为 0（原因是：使用默认构造器）</span></span><br><span class="line"><span class="comment">    默认构造器初始化容量为 16，默认临界因子为 0.75f */</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">        newThr = (<span class="type">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 到这里，newThr（新临界值）为 0 的原因可能是：</span></span><br><span class="line"><span class="comment">    1. 旧容量小于那个最小容量（16）</span></span><br><span class="line"><span class="comment">    2. 扩容后容量大于那个最大容量</span></span><br><span class="line"><span class="comment">    3. 旧的临界值为 0 或 Integer.MIN_VALUE</span></span><br><span class="line"><span class="comment">    4. 构造器传入初始容量为 0 */</span></span><br><span class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/* 按照 新容量 * 临界因子 的方法计算临界值。临界值不会超过一个指定的最大值 */</span></span><br><span class="line">        <span class="type">float</span> <span class="variable">ft</span> <span class="operator">=</span> (<span class="type">float</span>)newCap * loadFactor;</span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="type">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                  (<span class="type">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    threshold = newThr;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 确定了容量和临界值，下面把旧数组元素移至新数组。</span></span><br><span class="line"><span class="comment">    那个移动的场合，会以新容量重新计算所有元素的下标位置 */</span></span><br><span class="line">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">Node</span>[newCap];</span><br><span class="line">    table = newTab;</span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="literal">null</span>) &#123;</span><br><span class="line">                oldTab[j] = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="literal">null</span>)</span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="built_in">this</span>, newTab, j, oldCap);</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    Node&lt;K,V&gt; loHead = <span class="literal">null</span>, loTail = <span class="literal">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; hiHead = <span class="literal">null</span>, hiTail = <span class="literal">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        next = e.next;</span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="literal">null</span>)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="literal">null</span>)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="literal">null</span>) &#123;</span><br><span class="line">                        loTail.next = <span class="literal">null</span>;</span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="literal">null</span>) &#123;</span><br><span class="line">                        hiTail.next = <span class="literal">null</span>;</span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>添加 k - v 时，通过 key 的哈希值得到其在 table 的索引，判断索引位置是否被占用。</li></ol><p>未占用的场合，直接添加。<br>占用的场合，判断其 key 是否相等。相等的场合，替换 value。否则，按照 树 或 链表 的方式处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 会先对放入元素的哈希值进行一次计算，得到一个数字：hash */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> key.hashCode();</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h ^ (h &gt;&gt;&gt; <span class="number">16</span>));<span class="comment">// 位运算符：&gt;&gt;&gt; 无符号右移</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* put 方法会调用该 putVal 方法。</span></span><br><span class="line"><span class="comment">那些传入值是：hash、key、value、false、true */</span></span><br><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent, <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab = table; <span class="comment">// &lt;- 是那个存放数据的 table 数组</span></span><br><span class="line">    <span class="type">int</span> n;<span class="comment">// &lt;- 是 table.length</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 如果原先的 table 为空，则对其重新分配空间 */</span></span><br><span class="line">    <span class="keyword">if</span> (tab == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>) &#123;</span><br><span class="line">        tab = resize();</span><br><span class="line">        n = tab.length;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 用方才计算的 hash 数，得到要放入元素的下标值 i</span></span><br><span class="line"><span class="comment">    n - 1 是数据数组的最大下标，(n - 1) &amp; hash 必定不大于 n - 1 */</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (n - <span class="number">1</span>) &amp; hash;<span class="comment">// 位运算符：&amp; 按位与</span></span><br><span class="line">    Node&lt;K,V&gt; p = tab[i];<span class="comment">// 得到 table 中，位于那个插入位置的元素</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 倘若该位置为空，则直接放入 */</span></span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">null</span>) &#123;</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 该位置不为空，意味着可能添加了重复元素 */</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e; <span class="comment">// &lt;- 被发现重复的那个 Node。无重复时结果为 null。这个 Node 的 value 会被替换。</span></span><br><span class="line">        <span class="type">K</span> <span class="variable">k</span> <span class="operator">=</span> p.key;<span class="comment">// &lt;- 当前取出进行比较的 key 值</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 为了验证其是否重复，这里要进行如下比较：</span></span><br><span class="line"><span class="comment">        1. 比较两者的 hash 数。不同的场合是不同元素</span></span><br><span class="line"><span class="comment">        2. 使用 == 和 equals 两种方法比较 key。不同的场合是不同元素 </span></span><br><span class="line"><span class="comment">        如果是相同元素，则该节点的值会被替换 */</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp; (k  == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">            e = p;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 此处节点结构是 树 的场合，还需遍历比较树的每个节点 */</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="built_in">this</span>, tab, hash, key, value);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 此处节点结构是 链表 的场合，还需遍历比较每个链表节点 */</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                e = p.next;</span><br><span class="line">                <span class="comment">/* e == null 意味着遍历结束，全部不同。这样，在此处添加那个新的 Node */</span></span><br><span class="line">                <span class="keyword">if</span> (e == <span class="literal">null</span>) &#123;</span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/* 故技重施，如果发现相同，则替换那个新元素 */</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 经历上述比较后，e != null 意味着有元素要被替换了 */</span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">            <span class="comment">/* 传入的参数 onluIfAbsent == false，所以此处一定是 true */</span></span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="literal">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);<span class="comment">// &lt;- HashMap 中，该方法为空实现。</span></span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++modCount;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 如果到达这里，说明添加了元素（而非替换），要查看大小是否超过临界值 */</span></span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);<span class="comment">// &lt;- HashMap 中，该方法为空实现。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 上面提到的一些空实现的方法 */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">afterNodeAccess</span><span class="params">(Node&lt;K,V&gt; p)</span> &#123; &#125;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">afterNodeInsertion</span><span class="params">(<span class="type">boolean</span> evict)</span> &#123; &#125;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">afterNodeRemoval</span><span class="params">(Node&lt;K,V&gt; p)</span> &#123; &#125;</span><br></pre></td></tr></table></figure><h2 id="13-4-2-散列表-HashTable"><a href="#13-4-2-散列表-HashTable" class="headerlink" title="13.4.2 散列表 HashTable"></a>13.4.2 散列表 HashTable</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hashtable</span>&lt;K,V&gt;</span><br><span class="line">    <span class="keyword">extends</span> <span class="title class_">Dictionary</span>&lt;K,V&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">Map</span>&lt;K,V&gt;, Cloneable, java.io.Serializable</span><br></pre></td></tr></table></figure><blockquote><p>Hashtable 和 HashMap 基本一致，但Hashtable 是线程安全的 。但也因为如此，Hashtable 的效率低下。</p></blockquote><p><strong>Hashtable 与 HashMap 的比较：</strong></p><p>| **</p><p> | <strong>版本</strong> | <strong>线程安全（同步）</strong> | <strong>效率</strong> | <strong>是否允许 null值</strong> |<br>| — | — | — | — | — |<br>| Hashtable | 1.0 | 安全 | 较低 | 不允许 |<br>| HashMap | 1.2 | 不安全 | 高 | 允许 |</p><ul><li><p>Hashtable 底层也是有数组，默认构造器的初始容量为 11。临界值是 11 * 0.75 &#x3D; 8。</p></li><li><p>扩容大致如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> (oldCapacity &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;<span class="comment">//即，原容量 * 2 + 1</span></span><br></pre></td></tr></table></figure></li><li><p>Hashtable 不会树化</p></li></ul><h3 id="13-5-3-红黑树-TreeMap"><a href="#13-5-3-红黑树-TreeMap" class="headerlink" title="13.5.3 红黑树 TreeMap"></a>13.5.3 红黑树 TreeMap</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeMap</span>&lt;K,V&gt;</span><br><span class="line">    <span class="keyword">extends</span> <span class="title class_">AbstractMap</span>&lt;K,V&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">NavigableMap</span>&lt;K,V&gt;, Cloneable, java.io.Serializable</span><br></pre></td></tr></table></figure><blockquote><p>TreeMap 实现了 Map 接口。底层使用 红黑树 存储数据。<br>相较数组（访问快，检索、插入慢）和链表（插入快，检索、访问慢），树形数据结构（如二叉排序树）在保证数据检索速度的同时，也能保证数据插入、删除、修改的速度</p></blockquote><p><strong>TreeMap的源码：</strong></p><ol><li><p>TreeMap 底层维护了一个二叉树，以及一个比较器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Comparator&lt;? <span class="built_in">super</span> K&gt; comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> Entry&lt;K,V&gt; root;</span><br></pre></td></tr></table></figure></li><li><p>创建对象时，能采用无参构造，也能指定比较器完成构造，那个无参构造的场合，比较器为空。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">TreeMap</span><span class="params">()</span> &#123;</span><br><span class="line">    comparator = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">TreeMap</span><span class="params">(Comparator&lt;? <span class="built_in">super</span> K&gt; comparator)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.comparator = comparator;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比较器如果为空，则要求传入的 key 必须是 Comparable 接口的实现子类，否则无法进行比较。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object k1, Object k2)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> comparator==<span class="literal">null</span> ? ((Comparable&lt;? <span class="built_in">super</span> K&gt;)k1).compareTo((K)k2)</span><br><span class="line">        : comparator.compare((K)k1, (K)k2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加时，通过比较器确定那个添加位置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    Entry&lt;K,V&gt; t = root;<span class="comment">// &lt;- 树的根节点</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 二叉树为空的场合，创建根节点，将数据放入 */</span></span><br><span class="line">    <span class="keyword">if</span> (t == <span class="literal">null</span>) &#123;</span><br><span class="line">        compare(key, key);</span><br><span class="line">        root = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;&gt;(key, value, <span class="literal">null</span>);</span><br><span class="line">        size = <span class="number">1</span>;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> cmp;<span class="comment">// &lt;- 临时值，存放比较结果</span></span><br><span class="line">    Entry&lt;K,V&gt; parent;<span class="comment">// &lt;- 临时值，存放父节点</span></span><br><span class="line">    Comparator&lt;? <span class="built_in">super</span> K&gt; cpr = comparator;<span class="comment">// &lt;- 比较器</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 有比较器的场合，按照这个方法进行比较 */</span></span><br><span class="line">    <span class="keyword">if</span> (cpr != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            parent = t;</span><br><span class="line">            cmp = cpr.compare(key, t.key);</span><br><span class="line">            <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">                t = t.left;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</span><br><span class="line">                t = t.right;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> t.setValue(value);</span><br><span class="line">        &#125; <span class="keyword">while</span> (t != <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 比较器为空的场合，按照这个方法进行比较 */</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        Comparable&lt;? <span class="built_in">super</span> K&gt; k = (Comparable&lt;? <span class="built_in">super</span> K&gt;) key;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            parent = t;</span><br><span class="line">            cmp = k.compareTo(t.key);</span><br><span class="line">            <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">                t = t.left;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</span><br><span class="line">                t = t.right;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> t.setValue(value);</span><br><span class="line">        &#125; <span class="keyword">while</span> (t != <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 将数据节点放到正确的路径下 */</span></span><br><span class="line">    Entry&lt;K,V&gt; e = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;&gt;(key, value, parent);</span><br><span class="line">    <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">        parent.left = e;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        parent.right = e;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 此处会试着将该树转换成完全二叉树 */</span></span><br><span class="line">    fixAfterInsertion(e);</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加的最后，会试着将该树转换成完全二叉树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">fixAfterInsertion</span><span class="params">(Entry&lt;K,V&gt; x)</span> &#123;</span><br><span class="line">    x.color = RED;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (x != <span class="literal">null</span> &amp;&amp; x != root &amp;&amp; x.parent.color == RED) &#123;</span><br><span class="line">        <span class="keyword">if</span> (parentOf(x) == leftOf(parentOf(parentOf(x)))) &#123;</span><br><span class="line">            Entry&lt;K,V&gt; y = rightOf(parentOf(parentOf(x)));</span><br><span class="line">            <span class="keyword">if</span> (colorOf(y) == RED) &#123;</span><br><span class="line">                setColor(parentOf(x), BLACK);</span><br><span class="line">                setColor(y, BLACK);</span><br><span class="line">                setColor(parentOf(parentOf(x)), RED);</span><br><span class="line">                x = parentOf(parentOf(x));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (x == rightOf(parentOf(x))) &#123;</span><br><span class="line">                    x = parentOf(x);</span><br><span class="line">                    rotateLeft(x);</span><br><span class="line">                &#125;</span><br><span class="line">                setColor(parentOf(x), BLACK);</span><br><span class="line">                setColor(parentOf(parentOf(x)), RED);</span><br><span class="line">                rotateRight(parentOf(parentOf(x)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Entry&lt;K,V&gt; y = leftOf(parentOf(parentOf(x)));</span><br><span class="line">            <span class="keyword">if</span> (colorOf(y) == RED) &#123;</span><br><span class="line">                setColor(parentOf(x), BLACK);</span><br><span class="line">                setColor(y, BLACK);</span><br><span class="line">                setColor(parentOf(parentOf(x)), RED);</span><br><span class="line">                x = parentOf(parentOf(x));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (x == leftOf(parentOf(x))) &#123;</span><br><span class="line">                    x = parentOf(x);</span><br><span class="line">                    rotateRight(x);</span><br><span class="line">                &#125;</span><br><span class="line">                setColor(parentOf(x), BLACK);</span><br><span class="line">                setColor(parentOf(parentOf(x)), RED);</span><br><span class="line">                rotateLeft(parentOf(parentOf(x)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    root.color = BLACK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="13-4-4-Properties"><a href="#13-4-4-Properties" class="headerlink" title="13.4.4 Properties"></a>13.4.4 Properties</h2><blockquote><p>Properties 继承自 Hashtable 并实现了 Map 接口。也使用键值对的方式保存数据<br>Properties 使用特点与 Hashtable 相似<br>Properties 还可以用于 xxx.properties 文件中，加载数据到 Properties 对象，进行读取和修改<br>xxx.properties 文件常作为配置文件</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Properties</span> <span class="keyword">extends</span> <span class="title class_">Hashtable</span>&lt;Object,Object&gt;</span><br></pre></td></tr></table></figure><ul><li><code>String getProperty(String key)</code>：输入一个 String 类型的 key，返回一个 String 的 value<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getProperty</span><span class="params">(String key)</span> &#123;</span><br><span class="line"><span class="type">Object</span> <span class="variable">oval</span> <span class="operator">=</span> <span class="built_in">super</span>.get(key);</span><br><span class="line"><span class="type">String</span> <span class="variable">sval</span> <span class="operator">=</span> (oval <span class="keyword">instanceof</span> String) ? (String)oval : <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">return</span> ((sval == <span class="literal">null</span>) &amp;&amp; (defaults != <span class="literal">null</span>)) ? defaults.getProperty(key) : sval;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="13-5-无序集合接口Set"><a href="#13-5-无序集合接口Set" class="headerlink" title="13.5 无序集合接口Set"></a>13.5 无序集合接口Set</h1><blockquote><p>Set 是 Collection 接口的子类接口。<br>Set 接口的特点是无序（添加和取出顺序不一致，其取出顺序由某个算法决定），没有索引<br>不允许重复元素。故而，最多包含一个 null</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Set</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">Collection</span>&lt;E&gt;</span><br></pre></td></tr></table></figure><h2 id="13-5-1-HashSet"><a href="#13-5-1-HashSet" class="headerlink" title="13.5.1 HashSet"></a>13.5.1 HashSet</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashSet</span>&lt;E&gt;</span><br><span class="line">    <span class="keyword">extends</span> <span class="title class_">AbstractSet</span>&lt;E&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">Set</span>&lt;E&gt;, Cloneable, java.io.Serializable</span><br></pre></td></tr></table></figure><blockquote><p>HashSet 实现了 Set 接口。底层实际上使用 HashMap 来存储数据。身在 Collection 心在 Map<br>HashSet 是无序的。其实际顺序取决于计算得到的 hash 值</p></blockquote><p><strong>HashSet的源码：</strong></p><ol><li><p>HashSet 底层是 HashMap</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> HashMap&lt;E,Object&gt; map;</span><br></pre></td></tr></table></figure></li><li><p>实例化也和 HashMap 相同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">HashSet</span><span class="params">()</span> &#123;</span><br><span class="line">    map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashSet</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">    map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(initialCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashSet</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor)</span> &#123;</span><br><span class="line">    map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(initialCapacity, loadFactor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加一个元素时调用 HashMap 的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> map.put(e, PRESENT)==<span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="13-5-2-LinkedHashSet"><a href="#13-5-2-LinkedHashSet" class="headerlink" title="13.5.2 LinkedHashSet"></a>13.5.2 LinkedHashSet</h2><blockquote><p>LinkedHashSet 是 HashSet 的子类<br>LinkedHashSet 底层是一个 LinkedHashMap，维护了一个数组 + 双向链表。有其父必有其子<br>LinkedHashSet 根据元素的 hashCode 值来决定元素的存储位置。同时，使用链表维护元素的次序。这使得元素看起来是以插入顺序保存的，并得以按照放入顺序取出</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedHashSet</span>&lt;E&gt;</span><br><span class="line">    <span class="keyword">extends</span> <span class="title class_">HashSet</span>&lt;E&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">Set</span>&lt;E&gt;, Cloneable, java.io.Serializable</span><br></pre></td></tr></table></figure><p><strong>LinkedHashSet的源码：</strong></p><ol><li>在类 HashSet 中，存在一个默认访问范围的构造器。该构造器不同于其他构造器，会让实例维护一个 LinkedHashMap<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HashSet(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor, <span class="type">boolean</span> dummy) &#123;</span><br><span class="line">    map = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;(initialCapacity, loadFactor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>LinkedHashSet 的构造器即调用了该父类构造器<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedHashSet</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(initialCapacity, loadFactor, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedHashSet</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(initialCapacity, <span class="number">.75f</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedHashSet</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(<span class="number">16</span>, <span class="number">.75f</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="13-5-3-TreeSet"><a href="#13-5-3-TreeSet" class="headerlink" title="13.5.3 TreeSet"></a>13.5.3 TreeSet</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeSet</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">AbstractSet</span>&lt;E&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">NavigableSet</span>&lt;E&gt;, Cloneable, java.io.Serializable</span><br></pre></td></tr></table></figure><blockquote><p>TreeSet 实现了 Set 接口，其底层是一个 TreeMap。好家伙，原来 Set 全家都是卧底<br>调用无参构造器创建 TreeSet 时，默认是无序排列。也能在构造时传入一个比较器。有比较器的场合，比较器返回 0 时，不发生替换<br>不传入比较器的场合，使用的是传入对象自带的比较器。所以，这个场合，传入的 key 对象必须是 Comparable 接口的实现子类</p></blockquote><h1 id="13-6-集合的选择"><a href="#13-6-集合的选择" class="headerlink" title="13.6 集合的选择"></a>13.6 集合的选择</h1><p>在开发中，选择什么集合实现类，主要取决于业务操作特点，然后根据集合实现类特性进行分析选择。<br>判断存储的类型（一组对象 [单列]，或一组键值对 [双列]）</p><ul><li>一组对象：Collection 接口<ul><li>允许重复：List<ul><li>增删多：LinkedList （双向链表）</li><li>改查多：ArrayList （Object[] 数组）</li></ul></li><li>不允许重复：Set<ul><li>无序：HashSet （数组 + 链表 + 红黑树，底层是 HashMap）</li><li>排序：TreeSet</li><li>顺序一致：LinkedHashSet （数组 + 双向链表，底层是 LinkedHashMap）</li></ul></li></ul></li><li>一组键值对：Map<ul><li>键无序：HashMap （数组 + 链表 + 红黑树 [ JDK 8 以后 ] ）</li><li>键排序：TreeMap</li><li>键顺序一致：LinkedHashMap （底层是 HashMap）</li><li>读取文件：Properties</li></ul></li></ul><h1 id="13-7-工具类-Collections"><a href="#13-7-工具类-Collections" class="headerlink" title="13.7 工具类 Collections"></a>13.7 工具类 Collections</h1><blockquote><p>Collections 工具类是一个操作 Set、List、Map 等集合的工具类<br>其中提供了一系列静态方法，对集合元素进行 排序、查询和修改等操作</p></blockquote><p><strong>常用方法：</strong><br>排序：</p><ul><li>reverse(List)：反转 List 中元素的排序</li><li>shuffle(List)：对 List 中元素进行随机排序</li><li>sort(List)：根据元素的自然顺序对指定 List 集合元素升序排列</li><li>reverse(List, Comparator)：根据指定 Comparator 对 List 排序</li><li>swap(List, int, int)：将两处元素位置互换</li></ul><p>查找、替换：</p><ul><li>Object max(Collection)：根据元素的自然排序，返回集合中最大的元素</li><li>Object max(Collection, Comparator)：根据比较器，返回最大元素</li><li>Object min(Collection)：根据元素的自然排序，返回最小元素</li><li>Object min(Collection, Comparator)：根据比较器，返回最小元素</li><li>int frequency(Collection, Object)：返回集合中指定元素的出现次数</li><li>void copy(List dest, List src)：将 src 的内容复制到 dest 中这个场合，要保证 dest 的大小不小于 src。所以，可能需要先给 dest 赋值</li><li>boolean replaceAll(List list, Object oldVal, Object newVal)：用 newVal 替换所有 oldVal 值</li></ul><p><strong>常用方法：</strong><br>排序：</p><ul><li>reverse(List)：反转 List 中元素的排序</li><li>shuffle(List)：对 List 中元素进行随机排序</li><li>sort(List)：根据元素的自然顺序对指定 List 集合元素升序排列</li><li>reverse(List, Comparator)：根据指定 Comparator 对 List 排序</li><li>swap(List, int, int)：将两处元素位置互换</li></ul><p>查找、替换：</p><ul><li>Object max(Collection)：根据元素的自然排序，返回集合中最大的元素</li><li>Object max(Collection, Comparator)：根据比较器，返回最大元素</li><li>Object min(Collection)：根据元素的自然排序，返回最小元素</li><li>Object min(Collection, Comparator)：根据比较器，返回最小元素</li><li>int frequency(Collection, Object)：返回集合中指定元素的出现次数</li><li>void copy(List dest, List src)：将 src 的内容复制到 dest 中这个场合，要保证 dest 的大小不小于 src。所以，可能需要先给 dest 赋值</li><li>boolean replaceAll(List list, Object oldVal, Object newVal)：用 newVal 替换所有 oldVal 值</li></ul><h1 id="13-8-JUnit"><a href="#13-8-JUnit" class="headerlink" title="13.8 JUnit"></a>13.8 JUnit</h1><blockquote><p>一个类有多个功能代码需要测试，为了测试，就要写入 main 方法中<br>如果有多个功能代码测试，需要反复撤销，过程繁琐<br>JUnit 是一个 Java 语言单元测试框架<br>多数 Java 开发环境都已集成了 JUnit 作为单元测试工具<br><a href="https://www.bilibili.com/video/BV1fh411y7R8?p=566&t=259.3">使用方法</a><br>……总的来讲，方法就是加入 @Test，然后 alt + enter 引入 JUnit 5，最后运行</p></blockquote>]]></content>
    
    
    <summary type="html">集合的框架体系</summary>
    
    
    
    <category term="Java 学习" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaSE (韩顺平)" scheme="http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0/JavaSE-%E9%9F%A9%E9%A1%BA%E5%B9%B3/"/>
    
    
    <category term="Java 学习" scheme="http://example.com/tags/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="JavaSE" scheme="http://example.com/tags/JavaSE/"/>
    
    <category term="韩顺平基础" scheme="http://example.com/tags/%E9%9F%A9%E9%A1%BA%E5%B9%B3%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
