<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>1. Java 概述</title>
    <url>/2022/09/11/1.%20Java%20%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<blockquote>
<p><strong>程序：一系列有序指令的集合</strong></p>
</blockquote>
<h1 id="1-1-Java-历史"><a href="#1-1-Java-历史" class="headerlink" title="1.1 Java 历史"></a>1.1 Java 历史</h1><ul>
<li>Java 目前属于甲骨文公司</li>
<li>长期支持版本为Java8 和Java11(两个版本也是目前公司运用的主流版本)</li>
<li>JavaSE: 标准版本 (基础)</li>
</ul>
<p>JavaEE: 企业版本 (包含JavaWeb,是SE版本的延申)<br>JaveME: 小型版本</p>
<h1 id="1-2-Java-重要特点"><a href="#1-2-Java-重要特点" class="headerlink" title="1.2 Java 重要特点"></a>1.2 Java 重要特点</h1><ol>
<li><p>Java 语言是面向对象的语言(oop)</p>
<blockquote>
<p>简单来说，面向对象是一种程序设计技术。其重点是放在对象和对象的接口上</p>
</blockquote>
</li>
<li><p>Java 语言是健壮的</p>
<blockquote>
<p>Java 强调早期问题检测、后期动态检测，及消除易出错的情况。其编译器能检测很多其他语言仅在运行时才会发现的问题。</p>
</blockquote>
</li>
<li><p>Java 语言是跨平台性的：一个编译好的 .class 文件可以在多个不同系统下直接运行。</p>
<blockquote>
<p>Java 中没有 “依赖具体实现” 的地方。其基本数据类型大小、有关运算的行为等都有明确说明。其绝大多数库都能很好地支持平台独立性，而不用担心操作系统。</p>
</blockquote>
</li>
<li><p>Java 语言是解释型的：解释型语言编译后需要解释器才能运行。相对的，编译型语言可以被直接执行。</p>
<blockquote>
<p>Java 解释器能在任何移植了解释器的机器上直接执行 Java 字节码。</p>
</blockquote>
</li>
</ol>
<h1 id="1-3-Java的开发工具"><a href="#1-3-Java的开发工具" class="headerlink" title="1.3 Java的开发工具"></a>1.3 Java的开发工具</h1><ul>
<li><code>javac</code>：Java 编译器。将 Java 程序编译成字节码</li>
<li><code>java</code>：Java 解释器。执行已经转换为字节码的文件</li>
<li><code>jdb</code>：Java 调试器。调试 Java 程序</li>
<li><code>javap</code>：反编译。将类文件还原回方法和变量</li>
<li><code>javadoc</code>：文档生成器。创建 HTML 文件</li>
</ul>
<h1 id="1-4-Java的运行基础"><a href="#1-4-Java的运行基础" class="headerlink" title="1.4 Java的运行基础"></a>1.4 Java的运行基础</h1><h2 id="1-4-1-JDK、JRE、JVM"><a href="#1-4-1-JDK、JRE、JVM" class="headerlink" title="1.4.1 JDK、JRE、JVM"></a>1.4.1 JDK、JRE、JVM</h2><blockquote>
<p>JVM Java虚拟机</p>
</blockquote>
<ul>
<li><p>JVM 是–跨平台性的基础。被包含在 JDK 中。</p>
</li>
<li><p>不同平台有各自对应的不同 JVM</p>
</li>
<li><p>JVM 屏蔽了底层平台的区别。能做到 ”一次编译，到处运行”</p>
<blockquote>
<p>JDK 全称：Java Development Kit（Java 开发工具包）</p>
</blockquote>
</li>
<li><p>JDK &#x3D; JRE + Java 的开发工具（Java，Javac，Javadoc 等等）</p>
</li>
<li><p>给开发人员使用的，包含 JRE</p>
<blockquote>
<p>JRE：Java Runtime Enviroment（Java 运行环境）</p>
</blockquote>
</li>
<li><p>JRE &#x3D; JVM + Java SE 标准类库（Java 的核心类库）</p>
</li>
<li><p>运行一个 Java 程序的基本条件</p>
</li>
</ul>
<h2 id="1-4-2-JDK、JRE、JVM-三者之间的关系"><a href="#1-4-2-JDK、JRE、JVM-三者之间的关系" class="headerlink" title="1.4.2 JDK、JRE、JVM 三者之间的关系"></a>1.4.2 JDK、JRE、JVM 三者之间的关系</h2><blockquote>
<ol>
<li>JDK &#x3D; JRE + java 开发工具</li>
<li>JRE &#x3D; JVM + 核心类库</li>
<li>JDK:</li>
</ol>
</blockquote>
<h1 id="1-5-Java-执行流程"><a href="#1-5-Java-执行流程" class="headerlink" title="1.5 Java 执行流程"></a>1.5 Java 执行流程</h1><blockquote>
<p><code>.Java 文件</code>（源文件） — <code>javac</code>（编译）— <code>.class 文件</code>（字节码文件） —<code> java（运行）</code>— 结果**</p>
</blockquote>
<h2 id="1-5-1-Java-编译"><a href="#1-5-1-Java-编译" class="headerlink" title="1.5.1 Java 编译"></a>1.5.1 Java 编译</h2><ul>
<li>通过编译器将 Java 源文件编译成 JVM 可识别的字节码文件。字节码文件是二进制格式的，其格式是统一的。在源文件目录下使用 Javac 编译工具对 Java 文件进行编译。</li>
<li>如果没有错误将没有提示，当前目录会对应其中每一个类生成对应名称的 .class 文件，即字节码文件，也是可执行的 Java 程序。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javac [选项] 源文件名.java			<span class="comment">//[] 中是可选项</span></span><br><span class="line"><span class="comment">// 例如编译HelloWord.java</span></span><br><span class="line">javac HelloWorld.java</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="1-5-2-Java运行"><a href="#1-5-2-Java运行" class="headerlink" title="1.5.2 Java运行"></a>1.5.2 Java运行</h2><ul>
<li>有了可执行的 Java 程序（字节码文件）</li>
<li>通过运行工具 Java.exe 对字节码文件进行执行，本质是将 .class 文件装载到 JVM 运行。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java [选项] 程序名 [参数列表]			<span class="comment">//[] 中是可选项</span></span><br><span class="line"><span class="comment">// 例如运行HelloWorld.class</span></span><br><span class="line">java HelloWorld</span><br></pre></td></tr></table></figure>
<strong><em>注意:每次修改的源文件都需要重新编译才可以运行。</em></strong></li>
</ul>
<h1 id="1-6-第一个Java程序"><a href="#1-6-第一个Java程序" class="headerlink" title="1.6 第一个Java程序"></a>1.6 第一个Java程序</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. public class Hello 表示 Hello 是一个类，是一个public共有的类</span></span><br><span class="line"><span class="comment">// 2. Hello &#123; &#125; 表示一个类的开始和结束</span></span><br><span class="line"><span class="comment">// 3. public static void main(string[] args) 表示一个主方法，也表示程序的入口</span></span><br><span class="line"><span class="comment">// 4. main() &#123; &#125; 表示方法的开始和结束</span></span><br><span class="line"><span class="comment">// 5. System.out.println(&quot;Hello World&quot;); 表示输出 &quot;Hello World&quot; 并换行</span></span><br><span class="line"><span class="comment">// 6. ; 表示语句的结束</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// System.out.print(&quot;Hello World&quot;); // 输出Hello World 但是不换行</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="1-7-Java-相关开发细节"><a href="#1-7-Java-相关开发细节" class="headerlink" title="1.7 Java 相关开发细节"></a>1.7 Java 相关开发细节</h1><ol>
<li><strong>源文件</strong>以<code>.java </code>为扩展名，源文件的基本组成部分是<code>类（class）</code></li>
<li>Java 应用程序的<strong>执行入口</strong>是 <code>main()</code>方法。其有固定的书写格式：<code>public static void main(string[]args)&#123;…&#125;</code></li>
<li>Java 语言<code>严格区分大小写</code>。</li>
<li>Java 方法由一条条语句构成，每个语句都以<code>;</code>结束。</li>
<li>大括号<code>&#123; &#125;</code>是成对出现的，缺一不可。习惯先写<code>&#123;&#125;</code>再写代码</li>
<li>一个源文件中最多只有一个<code>public</code>类，其余类不限。</li>
<li>如果文件中包含 <code>public </code>类，则文件名必须按该类命名。</li>
<li>也可以把 <code>main()</code>方法写在<code>非 public 类</code>中，然后运行指定<code>非 public 类</code>，这样入口方法是<code>非 public 类的主方法</code>。</li>
<li>在控制台按<code>tab</code>可以实现代码补齐。按方向键<code> ↑</code> 或<code>↓</code>可以调用历史代码。<blockquote>
<p>附： <strong>(1). 文件中每出现一个类，编译后就会生成对应的class文件</strong></p>
</blockquote>
</li>
</ol>
<h1 id="1-8-Java-转义字符"><a href="#1-8-Java-转义字符" class="headerlink" title="1.8 Java 转义字符"></a>1.8 Java 转义字符</h1><ol>
<li><code>\t</code>：一个制表位，实现对齐功能</li>
<li><code>\n</code>：换行符</li>
<li><code>\\</code>：一个 \</li>
<li><code>\&quot;</code>：一个 “</li>
<li><code>\&#39;</code>：一个 ‘</li>
<li><code>\r</code>：一个回车（不是换行）</li>
<li><code>\\.</code>：一个小圆点 .</li>
<li><code>\b</code>：退格键</li>
<li><code>\u????</code>：一个具体的 Unicode 字符。其中 ???? 是 4 位 16 进制数</li>
<li><code>\???</code>：一个具体的 Unicode 字符。其中 ??? 是 3 位 8 进制数</li>
</ol>
<h1 id="1-9-初学Java常见错误"><a href="#1-9-初学Java常见错误" class="headerlink" title="1.9 初学Java常见错误"></a>1.9 初学Java常见错误</h1><ol>
<li><p><strong>找不到文件</strong></p>
<blockquote>
<p>解决方法：源文件名不存在或者写错，或者当前路径错误</p>
</blockquote>
</li>
<li><p><strong>主类名和文件名不一致</strong></p>
<blockquote>
<p>解决方法：声明为public的主类应与文件名一致，否则编译失败</p>
</blockquote>
</li>
<li><p><strong>缺少分号</strong></p>
<blockquote>
<p>解决方法：编译失败，注意错误出现的行数，再到源代码中指定位置改错。</p>
</blockquote>
</li>
<li><p><strong>其他错误</strong></p>
<blockquote>
<p>解决方法：初学者大多数的错误都是语法中的错误，所以要尝试着去看懂编译器报告的错误信息</p>
</blockquote>
</li>
</ol>
<h1 id="1-10-注释"><a href="#1-10-注释" class="headerlink" title="1.10 注释"></a>1.10 注释</h1><h2 id="1-10-1-注释类型"><a href="#1-10-1-注释类型" class="headerlink" title="1.10.1 注释类型"></a>1.10.1 注释类型</h2><ul>
<li><p><strong>单行注释</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这是一条单行注释</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>选中文字按<code>ctrl</code>+ <code>/ </code>将选中文字变为单行注释</p>
</blockquote>
</li>
<li><p><strong>多行注释</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*	这</span></span><br><span class="line"><span class="comment">	是一段</span></span><br><span class="line"><span class="comment">	多行注释</span></span><br><span class="line"><span class="comment">	*/</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>多行注释中不允许多行注释嵌套</p>
</blockquote>
</li>
<li><p><strong>文件注释</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*<span class="doctag">@auther</span> An</span></span><br><span class="line"><span class="comment">*<span class="doctag">@version</span> 3.2.0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	就是说咱可以每行开头不加星号的</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="1-10-2-文档注释详解"><a href="#1-10-2-文档注释详解" class="headerlink" title="1.10.2 文档注释详解"></a>1.10.2 文档注释详解</h2><blockquote>
<p>文档注释的注释内容可被 JDK 中的 Javadoc 工具解析，生成一套以 HTML 形式体现的说明文档。<br>抽取注释：<code>javadoc -d 生成目录 -author -.. 文档名.java</code></p>
</blockquote>
<p>文档注释包含 <strong>标记</strong> 和紧随其后的 <strong>自由格式文本</strong>：</p>
<ul>
<li><strong>标记：</strong></li>
</ul>
<p>以 <code>@ </code>开始，如 <code>@since</code><br>下面列出了一些 <strong>通用注释：</strong></p>
<ul>
<li><p><code>@since</code>始于<strong>：创建一个</strong> 始于条目。其后文本可以是引入该特性的版本的任何描述</p>
</li>
<li><p><code>@author</code>作者**：产生一个 **作者条目。可以使用多个 @author 标记</p>
</li>
<li><p><code>@version</code>版本**：产生一个 **版本条目。这里的文本可以是对当前版本的任意描述</p>
</li>
<li><p><code>@link </code>超链接**：产生一个 **超链接，链接到 javadoc 相关部分或外部文档</p>
</li>
<li><p><code>@see</code>  <strong>引用</strong>：在<code> see also</code> 部分增加一个超链接。可以添加多个 @see 标记，但必须放在一起。这里的 引用 有以下选择：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*<span class="doctag">@see</span> com.test.Example#act()</span></span><br><span class="line"><span class="comment">*<span class="doctag">@see</span> &lt;a herf=&quot;../../../../../../&quot;&gt;Melody&#x27;s Box&lt;/a&gt;</span></span><br><span class="line"><span class="comment">*<span class="doctag">@see</span> &quot;一段文本&quot;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<blockquote>
<ol>
<li>只提供类、方法或变量的名字。那个场合，使用 # 来分隔类名和方法名</li>
<li><code>@see</code> 后有一个 &lt; 字符的场合，需要指定超链接。可以指向任何 URL</li>
<li><code>@see</code> 后有一个 “ 字符的场合，文本会显示在 see alse 部分</li>
</ol>
</blockquote>
</li>
<li><p><strong>自由格式文本</strong>：第一句应该是一个概要性的句子。javadoc 会自动抽取这些语句生成概要页自由格式文本中，可以使用 HTML 修饰符</p>
</li>
</ul>
<h2 id="1-10-3-文档注释的插入"><a href="#1-10-3-文档注释的插入" class="headerlink" title="1.10.3 文档注释的插入"></a>1.10.3 文档注释的插入</h2><p><code>javadoc </code>工具抽取文档注释时，会从以下位置抽取：</p>
<ul>
<li><strong>模块</strong></li>
<li><strong>包（包注释）</strong><blockquote>
<p>要想产生包注释，必须在每个包目录中添加一个单独的文件有 2 种方法：</p>
</blockquote>
<ul>
<li>提供一个名为 package-info.java 的文件。其中 只能 包含文档注释，以及后面的一个 package 语句。不能包含更多的代码或注释。</li>
<li>提供一个名为 package.html 的 HTML 文件。此时会抽取 <body>…</body> 间的所有文本</li>
</ul>
</li>
<li><strong>公共类和接口</strong>（类注释）</li>
</ul>
<p>类注释必须放在 import 语句后，类定义之前</p>
<ul>
<li><strong>公共的和受保护的字段</strong></li>
</ul>
<p>只需要对公共字段（通常是静态常量）建立文档</p>
<ul>
<li><strong>公共的和受保护的构造器和方法</strong></li>
</ul>
<p>方法注释必须放在所描述的方法之前。除了通用标记外，还能使用如下标记：</p>
<pre><code>  - @param 变量描述：该标记能给当前方法的 参数 部分添加一个条目。该描述可以占据多行。一个方法的所有 `@param` 标记必须放在一起
  - @return 返回值描述：该标记能给当前方法的 返回值 部分添加一个条目。该描述可以占据多行。
  - @throws 异常描述：该标记能给当前方法的可能抛出的 异常 添加一个条目。
</code></pre>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>2. 变量</title>
    <url>/2022/09/11/2.%20%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<h1 id="2-1-变量介绍"><a href="#2-1-变量介绍" class="headerlink" title="2.1 变量介绍"></a>2.1 变量介绍</h1><blockquote>
<p><strong>变量</strong>：<strong>变量</strong>是<strong>程序</strong>的<strong>基本组成单位</strong><br><strong>变量的三个基本要素</strong>：<strong>类型</strong> +** 名称** + <strong>值</strong><br>示例：int a &#x3D; 1 类型 int 名称 a 值 1</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> c=<span class="number">1</span>,d;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>变量的使用注意事项</strong></li>
</ul>
<ol>
<li><strong>变量</strong>表示内存中的一个存储区域。不同变量，不同类型，占用的空间大小不同。如<code>int</code>有 <code>4 byte</code>，而 <code>double </code>有 <code>8 byte</code>。</li>
<li>该区域有自己的<strong>名称</strong> <strong>变量名</strong> 和<strong>类型 数据类型</strong></li>
<li>变量必须<strong>先声明，后使用。</strong></li>
<li>变量<strong>在同一作用域内不能重名。</strong></li>
<li>该区域的数据 、 值可以在同一类型范围内变化。</li>
<li>变量的<strong>三个基本要素</strong>：类型 + 名称 + 值</li>
</ol>
<h1 id="2-2-号的使用"><a href="#2-2-号的使用" class="headerlink" title="2.2  +号的使用"></a>2.2  +号的使用</h1><ol>
<li><strong>当左右两边都是数值型，做加法运算</strong></li>
<li><strong>当左右两边任意一方为字符串，做拼接运算</strong></li>
<li><strong>运算顺序是从左到右的</strong><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="number">1</span> + <span class="string">&quot;Hello&quot;</span> + <span class="number">2</span>);			<span class="comment">// 输出 1Hello2</span></span><br><span class="line">System.out.println(<span class="number">1</span> + <span class="number">1</span>);						<span class="comment">// 输出 2</span></span><br><span class="line">System.out.println(<span class="string">&quot;Hello&quot;</span> + <span class="string">&quot;World&quot;</span>);   		<span class="comment">// 输出 HelloWorld</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="2-3-数据类型"><a href="#2-3-数据类型" class="headerlink" title="2.3 数据类型"></a>2.3 数据类型</h1><blockquote>
<p><strong>基本数据类型</strong></p>
</blockquote>
<ul>
<li><p><strong>数值型</strong></p>
<ul>
<li>整数类型：<ul>
<li><code>**byte **</code>**: **占用 1 个字节</li>
<li><code>**short **</code>**: **占用 2 个字节</li>
<li><code>**int **</code>**: **占用 4 个字节</li>
<li><code>**long **</code>**: **占用 8 个字节</li>
</ul>
</li>
<li>浮点数类型(小数类型):<ul>
<li><code>**float**</code>**: **占用 4 个字节</li>
<li><code>**double**</code>** : **占用 8 个字节</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>字符型</strong></p>
<ul>
<li><code>**char**</code> :  存放单个字符，占用 2 字节</li>
</ul>
</li>
<li><p><strong>布尔型</strong></p>
<ul>
<li><code>**boolean**</code> : 存放<code>**true(真)**</code>、<code>**false(假)**</code> 。占用 1 个字节<blockquote>
<p><strong>引用数据类型(复合数据类型)</strong></p>
</blockquote>
</li>
</ul>
</li>
<li><p>**类 : **<code>**class**</code></p>
</li>
<li><p><strong>接口 ：</strong><code>**interface**</code></p>
</li>
<li><p><strong>数组 ：</strong><code>**[ ]**</code></p>
</li>
</ul>
<h1 id="2-4-整数类型"><a href="#2-4-整数类型" class="headerlink" title="2.4 整数类型"></a>2.4 整数类型</h1><blockquote>
<p>用于存放整数值</p>
</blockquote>
<ul>
<li><code>**byte**</code> 占用 <code>**1**</code> 字节，范围<code> -128 ~ 127</code></li>
<li><code>**short **</code>占用<code>**2**</code> 字节，范围<code> -215~215-1</code></li>
<li><code>**int **</code>占用 <code>**4**</code> 字节，范围 <code>-231~231-1</code></li>
<li><code>**long**</code> 占用 <code>**8**</code> 字节，范围 <code>-263~-263-1</code></li>
</ul>
<p><strong>使用细节：</strong></p>
<ol>
<li>Java 各整数类型有固定的范围和字符长度，不受具体 OS（操作系统）影响，以保证 Java 程序的可移植性。</li>
<li>Java 默认整型常量为 int ，要声明 long 型常量必须后加 l 或 L。</li>
<li>从 Java 7 开始，加上前缀 0b 或 0B 就可以写二进制数。</li>
<li>从 Java 7 开始，可以为数字字面添加下划线。这不会影响数字的值，只是为了方便阅读。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">0b0010</span>;</span><br><span class="line">n = <span class="number">0b001</span>;</span><br><span class="line">n = <span class="number">100_0_000000</span>;</span><br><span class="line">n = <span class="number">0B0000_0010_1100</span>;</span><br><span class="line"><span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">1.0F</span>;</span><br></pre></td></tr></table></figure>
如果基本的整数、浮点类型不能满足范围、精度的需求，可以使用 “大数”</li>
</ol>
<h1 id="2-5-浮点类型"><a href="#2-5-浮点类型" class="headerlink" title="2.5 浮点类型"></a>2.5 浮点类型</h1><blockquote>
<p>可以表示一个小数</p>
</blockquote>
<ul>
<li><code>float</code> 单精度（6 ~ 7 位有效数字），占用 <code>4</code> 字节，范围约 <code>-3.403E38 ~ 3.403E38</code></li>
<li><code>double</code> 双精度（15 位有效数字），占用 <code>8</code> 字节，范围约 <code>-1.798E308 ~ 1.798E308</code></li>
</ul>
<p><em>浮点数在机器中存放形式为：浮点数 &#x3D; 符号位 + 指数位 + 尾数位</em><br><em><strong>因此，尾数部分可能丢失，造成精度损失。换言之，小数都是近似值</strong></em></p>
<h2 id="2-5-1-使用细节"><a href="#2-5-1-使用细节" class="headerlink" title="2.5.1 使用细节"></a>2.5.1 使用细节</h2><ol>
<li><p>与整数类型相似，有固定的范围和字符长度，不受具体 OS（操作系统）影响。</p>
</li>
<li><p>Java 默认浮点常量为<code> double</code> ，要声明 <code>float </code>型常量必须后加 ”f“ 或 ”F“</p>
</li>
<li><p>浮点型常量有两种表示形式</p>
<blockquote>
<p>十进制数形式：5.13、315.4F、.414<br>科学计数法：5.12e2 即[5.12 × 102]、5.12E-2 即[5.12 &#x2F; 102]</p>
</blockquote>
</li>
<li><p>通常情况下，应该使用 <code>double</code> 类型，以其更为精确。</p>
</li>
<li><p>浮点数使用陷阱：当我们对运算结果是小数的进行相对判断时，要小心。（因为**<em>小数都是近似值</em>**）</p>
</li>
</ol>
<p>正确方法是：<strong>以两个数差值的绝对值，在某个精度范围内判断</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (Math.abs(num1 - num2) &lt; <span class="number">0.00001</span>) &#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;插值范围内认为相等&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="6">
<li><p>特殊的浮点类型常量</p>
<ul>
<li><strong>正无穷大</strong>：<code>Float.POSITIVE_INFINITY</code>、<code>Double.POSITIVE_INFINITY</code>（浮点数运算中）一个正数除以 0，会得到该值</li>
<li><strong>负无穷大</strong>：<code>Float.NEGATIVE_INFINITY</code>、<code>Double.NEGATIVE_INFINITY</code>（浮点数运算中）一个负数除以 0，会得到该值</li>
<li><strong>0 &#x2F; 0</strong>：<code>Float.NaN</code>、<code>Double.NaN</code>（浮点数运算中）0 除以 0，会得到该值</li>
<li><strong>最大、最小值</strong>：<code>Float.MAX_VALUE</code>、<code>Double.MIN_VALUE</code></li>
</ul>
</li>
<li><p>不能用运算符来比较特殊值，而要用特别的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0.0</span> / <span class="number">0</span>;</span><br><span class="line">System.out.println(num == Double.NaN);			<span class="comment">// &lt;——— 始终为 false。不能如此比较</span></span><br><span class="line">System.out.println(Double.isNaN(num));			<span class="comment">// &lt;——— 判断是否是 NaN</span></span><br><span class="line">num = <span class="number">1.0</span> / <span class="number">0</span>;</span><br><span class="line">System.out.println(Double.isInfinite(num));		<span class="comment">// &lt;——— 是否是无穷大</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>由于不同处理器寄存浮点数的策略可能不同，浮点数运算的结果也可能不同。</p>
</li>
</ol>
<h1 id="2-6-字符类型"><a href="#2-6-字符类型" class="headerlink" title="2.6 字符类型"></a>2.6 字符类型</h1><blockquote>
<p>可以表示单个字符。(可以存放一个数字，因为其字符是数字编号的。输出时会输出数字对应的字符。”编码的概念“)<br><code>char c1 = &#39;a&#39;; ``  char c2 = &#39;\t&#39;; ``char c3 = &#39;字&#39;; ``char c4 = 99;</code></p>
</blockquote>
<h2 id="2-6-1-使用细节"><a href="#2-6-1-使用细节" class="headerlink" title="2.6.1 使用细节"></a>2.6.1 使用细节</h2><ol>
<li><p>字符常量用单引号括起 <code>&#39; &#39;</code></p>
</li>
<li><p><code>char </code>的本质是一个整数，输出时，输出的是<code>unicode</code>码对应的字符。<a href="https://zh.wikipedia.org/wiki/Unicode">unicode 码查询</a> 。要输出那个整数，用 <code>int</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">System.out.println((<span class="type">int</span>)c1);</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>char</code> 是可以进行运算的，其相当于一个整数。**<em>注意与</em><strong>[</strong><em>[2.2]</em><strong>](#dzjeA)</strong><em>的区别。</em>**</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注：(int)&#x27;a&#x27; = 97</span></span><br><span class="line"><span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span> + <span class="number">1</span>;				<span class="comment">// 相当于 char c1 = &#x27;b&#x27;</span></span><br><span class="line">System.out.println(<span class="string">&#x27;a&#x27;</span> + <span class="number">1</span>);	<span class="comment">// 这个代码输出 98</span></span><br><span class="line">System.out.println(<span class="string">&quot;a&quot;</span> + <span class="number">1</span>);	<span class="comment">// 这个代码输出 a1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>字符允许使用转义符（*见 [1.8 Java 转义字符]*）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27;\u0041&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><strong>转义序列 \u 能出现在引号外。所有这些转义序列会在解析代码前得到处理</strong></p>
</li>
</ol>
<ul>
<li><p>以下字符串是空串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;\u0022+\u0022&quot;</span>;</span><br><span class="line"><span class="comment">// 因为 \u0022 表示引号。该代码等同于以下代码</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span> + <span class="string">&quot;&quot;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>以下注释会报错</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// \u000A is a newline</span></span><br><span class="line"><span class="comment">// 因为 \u000A 是换行符。在解析前会得到处理。在程序看来，上述注释等于以下写法</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line">is a newline</span><br><span class="line"></span><br><span class="line"><span class="comment">// look inside c:\users</span></span><br><span class="line"><span class="comment">// 因为程序认为，\users 不是一个合法的转义字符</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在某些场合下这种写法似乎也能实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>\u005B\u005D a;			<span class="comment">// int[] a; 一个数组</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="2-6-2-字符本质与编码表"><a href="#2-6-2-字符本质与编码表" class="headerlink" title="2.6.2 字符本质与编码表"></a>2.6.2 字符本质与编码表</h2><ul>
<li><p>字符类型的本质，是把字符对应的码值编程二进制，存储。显示时将二进制代码转化为码值，找到对应的字符。</p>
</li>
<li><p>字符与码值的对应关系是字符编码表规定的。</p>
<blockquote>
<p>ASCII 编码表，占用 1 byte，共有 128 个字符。<br>Unicode 编码表，占用 2 byte，字母汉字都占用 2 byte，这样可能浪费空间。0 - 127 的字符与 ASCII 相同，所以兼容 ASCII。<br>UTF-8 编码表，根据不同符号大小可变（1 - 6 byte），字母占用 1 byte，汉字占用 3 byte。是 Unicode 的改进，是互联网上使用最广的 Unicode 实现方式。<br>GBK 编码表，可以表示汉字，字母占用 1 byte，汉字占用 2 byte。<br>GB2312 编码表，可以表示汉字（GB2312 &lt; GBK）<br>BIG5 编码表，可以存放繁体中文（香港，台湾）</p>
</blockquote>
</li>
<li><p>UTF-16 编码采用不同长度的编码表示所有 Unicode 码点。包含从 U+0000 到 U+FFFF 的经典 Unicode 代码（16位，1 个代码单元），以及 U+10000 到 U+10FFFF 的辅助字符（32位，2 个代码单元）</p>
</li>
<li><p>在 Java 中，char 类型描述的是 UTF-16 编码中的 1 个代码单元。字符串中的一个辅助字符（如 🎶）可能占用 2 个代码单元。这个场合，使用 char 可能会导致错误</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;🎶An🎶&quot;</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> str.charAt(<span class="number">1</span>);			<span class="comment">// &lt;———— 这个场合，c 是 🎶 符号的第二个代码单元而非 &#x27;A&#x27;</span></span><br></pre></td></tr></table></figure>
<p><strong><em>因此，一般不建议在程序中使用 char 类型</em></strong></p>
</li>
</ul>
<h1 id="2-7-布尔类型"><a href="#2-7-布尔类型" class="headerlink" title="2.7 布尔类型"></a>2.7 布尔类型</h1><blockquote>
<p><code>boolean</code> 只允许取值<code>ture</code> 或 <code>false</code> ，没有 <code>null</code>。适用于逻辑运算，通常用于程序流程控制<br><code>if</code> <code>while</code> <code>do-while</code> <code>for</code></p>
</blockquote>
<p><strong>使用细节：</strong></p>
<ol>
<li>不可以用 <code>0</code> 或 <code>非0</code> 的整数替代<code>false</code> 或 <code>ture</code> 。这点和 C语言 不同。</li>
<li>不能让布尔类型转换为其他类型。</li>
</ol>
<h1 id="2-8-基本数据类型转换"><a href="#2-8-基本数据类型转换" class="headerlink" title="2.8 基本数据类型转换"></a>2.8 基本数据类型转换</h1><h2 id="2-8-1-自动类型转换"><a href="#2-8-1-自动类型转换" class="headerlink" title="2.8.1 自动类型转换"></a>2.8.1 自动类型转换</h2><blockquote>
<p>自动类型转换：Java 在进行赋值或运算时，精度（容量）小的类型自动转换为精度（容量）大的类型。<br><code>char</code> -&gt; <code>int</code> -&gt; <code>long</code> -&gt; <code>float</code> -&gt; <code>double</code><br><code>byte</code> -&gt; <code>short </code>-&gt; <code>int</code> -&gt; <code>float</code> -&gt; <code>double</code><br><strong>注意：</strong><code>**char**</code>** 、**<code>**byte**</code><strong>、</strong><code>**short**</code>** 之间不可转换**</p>
</blockquote>
<p><strong>细节：</strong></p>
<ol>
<li>有多种类型数据混合运算时，系统会将所有数据转换成容量最大的那种，再进行运算。</li>
<li>如若把大精度（容量）数据赋值给小精度（容量）类型，就会报错（小数由于精度原因，大赋小会丢失精度，必不可用。但整数大赋小时：1.赋予具体数值时，判断范围。2.变量赋值时，判断类型。反之进行自动类型转换。</li>
<li><code>byte</code> <code>short</code> <code>char</code> 三者不会相互自动转换，但可以计算。计算时首先转化为 <code>int</code>。</li>
<li><code>boolean</code> 类型不参与自动转换</li>
<li>自动提升原则：表达式结果的类型自动提升为操作数中最大的类型。</li>
</ol>
<h2 id="2-8-2-强制转换"><a href="#2-8-2-强制转换" class="headerlink" title="2.8.2 强制转换"></a>2.8.2 强制转换</h2><blockquote>
<p>强制类型转换：自动类型转换的逆过程，将容量大的数据类型转换为容量小的数据类型。使用时加上强制转换符 ( ) ，但可能造成<strong>精度降低或溢出</strong>，要格外注意。</p>
</blockquote>
<p><strong>细节:</strong></p>
<ol>
<li><p>当进行数据从大到小转换时，用强制转换。</p>
</li>
<li><p>强制转换只能对最近的操作数有效，往往会使用 <code>( )</code> 提升优先级。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> (<span class="type">int</span>)(<span class="number">3</span> * <span class="number">2.5</span> + <span class="number">1.1</span> * <span class="number">6</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> (<span class="type">int</span>)<span class="number">10</span> * <span class="number">0.1</span> * <span class="number">1</span>; <span class="comment">// int 只会转换 10</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>char</code> 可以保留 <code>int</code> 的常量值，但不能保存其变量值。此时需要强制类型转换。</p>
</li>
<li><p><code>byte</code> <code>short</code> <code>char</code> 在进行运算时，当作<code>int</code> 处理。</p>
</li>
</ol>
<h2 id="2-8-3-基本数据类型和String的转换"><a href="#2-8-3-基本数据类型和String的转换" class="headerlink" title="2.8.3 基本数据类型和String的转换"></a>2.8.3 基本数据类型和<code>String</code>的转换</h2><ul>
<li><p>**基本类型转 **<code>**String**</code>**：基本数据类型加上 **<code>**&quot; &quot;**</code><strong>。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> n1 + <span class="string">&quot;&quot;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>**String**</code><strong>转基本数据类型：通过基本数据类型的包装类调用</strong><code>**parseXX**</code>** 方法。**</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;100&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> Interger.parseInt(s);</span><br></pre></td></tr></table></figure>
<p>特别的，把 <code>String</code> 转换为 <code>char</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(<span class="number">0</span>);		<span class="comment">// 得到 s 字符串中的第一个字符。</span></span><br></pre></td></tr></table></figure>
<p><strong>细节:</strong></p>
</li>
</ul>
<ol>
<li>将<code>String</code> 转成基本数据类型时，要保证其能转换为有效数据。即不能把 “Hello” 转换成 <code>int</code>。</li>
<li>如果格式不正确，会抛出异常，程序会中止。</li>
</ol>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
</search>
