<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>1. Java 概述</title>
    <url>/2022/09/11/1.%20Java%20%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<blockquote>
<p><strong>程序：一系列有序指令的集合</strong></p>
</blockquote>
<h1 id="1-1-Java-历史"><a href="#1-1-Java-历史" class="headerlink" title="1.1 Java 历史"></a>1.1 Java 历史</h1><ul>
<li>Java 目前属于甲骨文公司</li>
<li>长期支持版本为Java8 和Java11(两个版本也是目前公司运用的主流版本)</li>
<li>JavaSE: 标准版本 (基础)</li>
</ul>
<p>JavaEE: 企业版本 (包含JavaWeb,是SE版本的延申)<br>JaveME: 小型版本</p>
<h1 id="1-2-Java-重要特点"><a href="#1-2-Java-重要特点" class="headerlink" title="1.2 Java 重要特点"></a>1.2 Java 重要特点</h1><ol>
<li><p>Java 语言是面向对象的语言(oop)</p>
<blockquote>
<p>简单来说，面向对象是一种程序设计技术。其重点是放在对象和对象的接口上</p>
</blockquote>
</li>
<li><p>Java 语言是健壮的</p>
<blockquote>
<p>Java 强调早期问题检测、后期动态检测，及消除易出错的情况。其编译器能检测很多其他语言仅在运行时才会发现的问题。</p>
</blockquote>
</li>
<li><p>Java 语言是跨平台性的：一个编译好的 .class 文件可以在多个不同系统下直接运行。</p>
<blockquote>
<p>Java 中没有 “依赖具体实现” 的地方。其基本数据类型大小、有关运算的行为等都有明确说明。其绝大多数库都能很好地支持平台独立性，而不用担心操作系统。</p>
</blockquote>
</li>
<li><p>Java 语言是解释型的：解释型语言编译后需要解释器才能运行。相对的，编译型语言可以被直接执行。</p>
<blockquote>
<p>Java 解释器能在任何移植了解释器的机器上直接执行 Java 字节码。</p>
</blockquote>
</li>
</ol>
<h1 id="1-3-Java的开发工具"><a href="#1-3-Java的开发工具" class="headerlink" title="1.3 Java的开发工具"></a>1.3 Java的开发工具</h1><ul>
<li><code>javac</code>：Java 编译器。将 Java 程序编译成字节码</li>
<li><code>java</code>：Java 解释器。执行已经转换为字节码的文件</li>
<li><code>jdb</code>：Java 调试器。调试 Java 程序</li>
<li><code>javap</code>：反编译。将类文件还原回方法和变量</li>
<li><code>javadoc</code>：文档生成器。创建 HTML 文件</li>
</ul>
<h1 id="1-4-Java的运行基础"><a href="#1-4-Java的运行基础" class="headerlink" title="1.4 Java的运行基础"></a>1.4 Java的运行基础</h1><h2 id="1-4-1-JDK、JRE、JVM"><a href="#1-4-1-JDK、JRE、JVM" class="headerlink" title="1.4.1 JDK、JRE、JVM"></a>1.4.1 JDK、JRE、JVM</h2><blockquote>
<p>JVM Java虚拟机</p>
</blockquote>
<ul>
<li><p>JVM 是–跨平台性的基础。被包含在 JDK 中。</p>
</li>
<li><p>不同平台有各自对应的不同 JVM</p>
</li>
<li><p>JVM 屏蔽了底层平台的区别。能做到 ”一次编译，到处运行”</p>
<blockquote>
<p>JDK 全称：Java Development Kit（Java 开发工具包）</p>
</blockquote>
</li>
<li><p>JDK &#x3D; JRE + Java 的开发工具（Java，Javac，Javadoc 等等）</p>
</li>
<li><p>给开发人员使用的，包含 JRE</p>
<blockquote>
<p>JRE：Java Runtime Enviroment（Java 运行环境）</p>
</blockquote>
</li>
<li><p>JRE &#x3D; JVM + Java SE 标准类库（Java 的核心类库）</p>
</li>
<li><p>运行一个 Java 程序的基本条件</p>
</li>
</ul>
<h2 id="1-4-2-JDK、JRE、JVM-三者之间的关系"><a href="#1-4-2-JDK、JRE、JVM-三者之间的关系" class="headerlink" title="1.4.2 JDK、JRE、JVM 三者之间的关系"></a>1.4.2 JDK、JRE、JVM 三者之间的关系</h2><blockquote>
<ol>
<li>JDK &#x3D; JRE + java 开发工具</li>
<li>JRE &#x3D; JVM + 核心类库</li>
<li>JDK:</li>
</ol>
</blockquote>
<h1 id="1-5-Java-执行流程"><a href="#1-5-Java-执行流程" class="headerlink" title="1.5 Java 执行流程"></a>1.5 Java 执行流程</h1><blockquote>
<p><code>.Java 文件</code>（源文件） — <code>javac</code>（编译）— <code>.class 文件</code>（字节码文件） —<code> java（运行）</code>— 结果**</p>
</blockquote>
<h2 id="1-5-1-Java-编译"><a href="#1-5-1-Java-编译" class="headerlink" title="1.5.1 Java 编译"></a>1.5.1 Java 编译</h2><ul>
<li>通过编译器将 Java 源文件编译成 JVM 可识别的字节码文件。字节码文件是二进制格式的，其格式是统一的。在源文件目录下使用 Javac 编译工具对 Java 文件进行编译。</li>
<li>如果没有错误将没有提示，当前目录会对应其中每一个类生成对应名称的 .class 文件，即字节码文件，也是可执行的 Java 程序。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javac [选项] 源文件名.java			<span class="comment">//[] 中是可选项</span></span><br><span class="line"><span class="comment">// 例如编译HelloWord.java</span></span><br><span class="line">javac HelloWorld.java</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="1-5-2-Java运行"><a href="#1-5-2-Java运行" class="headerlink" title="1.5.2 Java运行"></a>1.5.2 Java运行</h2><ul>
<li>有了可执行的 Java 程序（字节码文件）</li>
<li>通过运行工具 Java.exe 对字节码文件进行执行，本质是将 .class 文件装载到 JVM 运行。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java [选项] 程序名 [参数列表]			<span class="comment">//[] 中是可选项</span></span><br><span class="line"><span class="comment">// 例如运行HelloWorld.class</span></span><br><span class="line">java HelloWorld</span><br></pre></td></tr></table></figure>
<strong><em>注意:每次修改的源文件都需要重新编译才可以运行。</em></strong></li>
</ul>
<h1 id="1-6-第一个Java程序"><a href="#1-6-第一个Java程序" class="headerlink" title="1.6 第一个Java程序"></a>1.6 第一个Java程序</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. public class Hello 表示 Hello 是一个类，是一个public共有的类</span></span><br><span class="line"><span class="comment">// 2. Hello &#123; &#125; 表示一个类的开始和结束</span></span><br><span class="line"><span class="comment">// 3. public static void main(string[] args) 表示一个主方法，也表示程序的入口</span></span><br><span class="line"><span class="comment">// 4. main() &#123; &#125; 表示方法的开始和结束</span></span><br><span class="line"><span class="comment">// 5. System.out.println(&quot;Hello World&quot;); 表示输出 &quot;Hello World&quot; 并换行</span></span><br><span class="line"><span class="comment">// 6. ; 表示语句的结束</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// System.out.print(&quot;Hello World&quot;); // 输出Hello World 但是不换行</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="1-7-Java-相关开发细节"><a href="#1-7-Java-相关开发细节" class="headerlink" title="1.7 Java 相关开发细节"></a>1.7 Java 相关开发细节</h1><ol>
<li><strong>源文件</strong>以<code>.java </code>为扩展名，源文件的基本组成部分是<code>类（class）</code></li>
<li>Java 应用程序的<strong>执行入口</strong>是 <code>main()</code>方法。其有固定的书写格式：<code>public static void main(string[]args)&#123;…&#125;</code></li>
<li>Java 语言<code>严格区分大小写</code>。</li>
<li>Java 方法由一条条语句构成，每个语句都以<code>;</code>结束。</li>
<li>大括号<code>&#123; &#125;</code>是成对出现的，缺一不可。习惯先写<code>&#123;&#125;</code>再写代码</li>
<li>一个源文件中最多只有一个<code>public</code>类，其余类不限。</li>
<li>如果文件中包含 <code>public </code>类，则文件名必须按该类命名。</li>
<li>也可以把 <code>main()</code>方法写在<code>非 public 类</code>中，然后运行指定<code>非 public 类</code>，这样入口方法是<code>非 public 类的主方法</code>。</li>
<li>在控制台按<code>tab</code>可以实现代码补齐。按方向键<code> ↑</code> 或<code>↓</code>可以调用历史代码。<blockquote>
<p>附： <strong>(1). 文件中每出现一个类，编译后就会生成对应的class文件</strong></p>
</blockquote>
</li>
</ol>
<h1 id="1-8-Java-转义字符"><a href="#1-8-Java-转义字符" class="headerlink" title="1.8 Java 转义字符"></a>1.8 Java 转义字符</h1><ol>
<li><code>\t</code>：一个制表位，实现对齐功能</li>
<li><code>\n</code>：换行符</li>
<li><code>\\</code>：一个 \</li>
<li><code>\&quot;</code>：一个 “</li>
<li><code>\&#39;</code>：一个 ‘</li>
<li><code>\r</code>：一个回车（不是换行）</li>
<li><code>\\.</code>：一个小圆点 .</li>
<li><code>\b</code>：退格键</li>
<li><code>\u????</code>：一个具体的 Unicode 字符。其中 ???? 是 4 位 16 进制数</li>
<li><code>\???</code>：一个具体的 Unicode 字符。其中 ??? 是 3 位 8 进制数</li>
</ol>
<h1 id="1-9-初学Java常见错误"><a href="#1-9-初学Java常见错误" class="headerlink" title="1.9 初学Java常见错误"></a>1.9 初学Java常见错误</h1><ol>
<li><p><strong>找不到文件</strong></p>
<blockquote>
<p>解决方法：源文件名不存在或者写错，或者当前路径错误</p>
</blockquote>
</li>
<li><p><strong>主类名和文件名不一致</strong></p>
<blockquote>
<p>解决方法：声明为public的主类应与文件名一致，否则编译失败</p>
</blockquote>
</li>
<li><p><strong>缺少分号</strong></p>
<blockquote>
<p>解决方法：编译失败，注意错误出现的行数，再到源代码中指定位置改错。</p>
</blockquote>
</li>
<li><p><strong>其他错误</strong></p>
<blockquote>
<p>解决方法：初学者大多数的错误都是语法中的错误，所以要尝试着去看懂编译器报告的错误信息</p>
</blockquote>
</li>
</ol>
<h1 id="1-10-注释"><a href="#1-10-注释" class="headerlink" title="1.10 注释"></a>1.10 注释</h1><h2 id="1-10-1-注释类型"><a href="#1-10-1-注释类型" class="headerlink" title="1.10.1 注释类型"></a>1.10.1 注释类型</h2><ul>
<li><p><strong>单行注释</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这是一条单行注释</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>选中文字按<code>ctrl</code>+ <code>/ </code>将选中文字变为单行注释</p>
</blockquote>
</li>
<li><p><strong>多行注释</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*	这</span></span><br><span class="line"><span class="comment">	是一段</span></span><br><span class="line"><span class="comment">	多行注释</span></span><br><span class="line"><span class="comment">	*/</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>多行注释中不允许多行注释嵌套</p>
</blockquote>
</li>
<li><p><strong>文件注释</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*<span class="doctag">@auther</span> An</span></span><br><span class="line"><span class="comment">*<span class="doctag">@version</span> 3.2.0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	就是说咱可以每行开头不加星号的</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="1-10-2-文档注释详解"><a href="#1-10-2-文档注释详解" class="headerlink" title="1.10.2 文档注释详解"></a>1.10.2 文档注释详解</h2><blockquote>
<p>文档注释的注释内容可被 JDK 中的 Javadoc 工具解析，生成一套以 HTML 形式体现的说明文档。<br>抽取注释：<code>javadoc -d 生成目录 -author -.. 文档名.java</code></p>
</blockquote>
<p>文档注释包含 <strong>标记</strong> 和紧随其后的 <strong>自由格式文本</strong>：</p>
<ul>
<li><strong>标记：</strong></li>
</ul>
<p>以 <code>@ </code>开始，如 <code>@since</code><br>下面列出了一些 <strong>通用注释：</strong></p>
<ul>
<li><p><code>@since</code>始于<strong>：创建一个</strong> 始于条目。其后文本可以是引入该特性的版本的任何描述</p>
</li>
<li><p><code>@author</code>作者**：产生一个 **作者条目。可以使用多个 @author 标记</p>
</li>
<li><p><code>@version</code>版本**：产生一个 **版本条目。这里的文本可以是对当前版本的任意描述</p>
</li>
<li><p><code>@link </code>超链接**：产生一个 **超链接，链接到 javadoc 相关部分或外部文档</p>
</li>
<li><p><code>@see</code>  <strong>引用</strong>：在<code> see also</code> 部分增加一个超链接。可以添加多个 @see 标记，但必须放在一起。这里的 引用 有以下选择：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*<span class="doctag">@see</span> com.test.Example#act()</span></span><br><span class="line"><span class="comment">*<span class="doctag">@see</span> &lt;a herf=&quot;../../../../../../&quot;&gt;Melody&#x27;s Box&lt;/a&gt;</span></span><br><span class="line"><span class="comment">*<span class="doctag">@see</span> &quot;一段文本&quot;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<blockquote>
<ol>
<li>只提供类、方法或变量的名字。那个场合，使用 # 来分隔类名和方法名</li>
<li><code>@see</code> 后有一个 &lt; 字符的场合，需要指定超链接。可以指向任何 URL</li>
<li><code>@see</code> 后有一个 “ 字符的场合，文本会显示在 see alse 部分</li>
</ol>
</blockquote>
</li>
<li><p><strong>自由格式文本</strong>：第一句应该是一个概要性的句子。javadoc 会自动抽取这些语句生成概要页自由格式文本中，可以使用 HTML 修饰符</p>
</li>
</ul>
<h2 id="1-10-3-文档注释的插入"><a href="#1-10-3-文档注释的插入" class="headerlink" title="1.10.3 文档注释的插入"></a>1.10.3 文档注释的插入</h2><p><code>javadoc </code>工具抽取文档注释时，会从以下位置抽取：</p>
<ul>
<li><strong>模块</strong></li>
<li><strong>包（包注释）</strong><blockquote>
<p>要想产生包注释，必须在每个包目录中添加一个单独的文件有 2 种方法：</p>
</blockquote>
<ul>
<li>提供一个名为 package-info.java 的文件。其中 只能 包含文档注释，以及后面的一个 package 语句。不能包含更多的代码或注释。</li>
<li>提供一个名为 package.html 的 HTML 文件。此时会抽取 <body>…</body> 间的所有文本</li>
</ul>
</li>
<li><strong>公共类和接口</strong>（类注释）</li>
</ul>
<p>类注释必须放在 import 语句后，类定义之前</p>
<ul>
<li><strong>公共的和受保护的字段</strong></li>
</ul>
<p>只需要对公共字段（通常是静态常量）建立文档</p>
<ul>
<li><strong>公共的和受保护的构造器和方法</strong></li>
</ul>
<p>方法注释必须放在所描述的方法之前。除了通用标记外，还能使用如下标记：</p>
<pre><code>  - @param 变量描述：该标记能给当前方法的 参数 部分添加一个条目。该描述可以占据多行。一个方法的所有 `@param` 标记必须放在一起
  - @return 返回值描述：该标记能给当前方法的 返回值 部分添加一个条目。该描述可以占据多行。
  - @throws 异常描述：该标记能给当前方法的可能抛出的 异常 添加一个条目。
</code></pre>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
</search>
